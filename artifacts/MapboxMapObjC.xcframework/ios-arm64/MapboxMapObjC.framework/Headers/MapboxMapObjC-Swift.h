#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MAPBOXMAPOBJC_SWIFT_H
#define MAPBOXMAPOBJC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapboxCommon;
@import MapboxCoreMaps;
@import MapboxMaps;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxMapObjC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MapboxMapObjC13BuiltInStyles")
@interface BuiltInStyles : NSObject
/// Mapbox Standard is a general-purpose style with 3D visualization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull standard;)
+ (NSString * _Nonnull)standard SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull streets;)
+ (NSString * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull outdoors;)
+ (NSString * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light;)
+ (NSString * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dark;)
+ (NSString * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satellite;)
+ (NSString * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satelliteStreets;)
+ (NSString * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSValue;
@class MBXGeometry;

SWIFT_CLASS("_TtC13MapboxMapObjC14GeometryHelper")
@interface GeometryHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MBXGeometry * _Nonnull)createPoint:(NSValue * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createLine:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiLine:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPoint:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPolygon:(NSArray<NSArray<NSArray<NSValue *> *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createPolygon:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)create:(NSArray<MBXGeometry *> * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMMapOptions;
@class TMBCameraOptions;

@interface MapInitOptions (SWIFT_EXTENSION(MapboxMapObjC))
/// Associated <code>MapOptions</code>
- (MBMMapOptions * _Nonnull)getMapOptions SWIFT_WARN_UNUSED_RESULT;
/// Style URI for initializing the map. Defaults to Mapbox Streets.
- (NSString * _Nullable)getStyleURI SWIFT_WARN_UNUSED_RESULT;
/// String representation of JSON style spec. Has precedence over <code>styleURI</code>.
- (NSString * _Nullable)getStyleJSON SWIFT_WARN_UNUSED_RESULT;
/// Camera options for initializing the map. CameraOptions default to 0.0 for each value.
- (TMBCameraOptions * _Nullable)getCameraOptions SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getAntialiasingSampleCount SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21MapInitOptionsFactory")
@interface MapInitOptionsFactory : NSObject
/// Initializer. The default initializer, i.e. <code>MapInitOptions()</code> will use
/// the default <code>ResourceOptionsManager</code> to use the current shared access token.
/// \param resourceOptions <code>ResourceOptions</code>; default creates an instance
/// using <code>ResourceOptionsManager.default</code>
///
/// \param mapOptions <code>MapOptions</code>; see <code>GlyphsRasterizationOptions</code> for the default
/// used for glyph rendering.
///
/// \param cameraOptions <code>CameraOptions</code> to be applied to the map, overriding
/// the default camera that has been specified in the style.
///
/// \param styleURI Style URI for the map to load. Defaults to <code>.streets</code>, but
/// can be <code>nil</code>.
///
/// \param styleJSON Style JSON in String representation. Has precedence over <code>styleURI</code>.
///
+ (MapInitOptions * _Nonnull)createWithMapOptions:(MBMMapOptions * _Nullable)mapOptions cameraOptions:(TMBCameraOptions * _Nullable)cameraOptions styleURI:(NSString * _Nullable)styleURI styleJSON:(NSString * _Nullable)styleJSON antialiasingSampleCount:(NSInteger)antialiasingSampleCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMBCameraAnimationsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCameraAnimationsManager * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
@end


@class TMBAnnotationOrchestrator;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBAnnotationOrchestrator * _Nonnull)annotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBMapboxMap;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBMapboxMap * _Nonnull)mapboxMap SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBGestureManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBGestureManager * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBViewAnnotationManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBViewAnnotationManager * _Nonnull)viewAnnotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBOrnamentsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBOrnamentsManager * _Nonnull)ornaments SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
@class TMBCameraState;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)preferredFrameRateRange:(CAFrameRateRange)value;
- (NSArray<NSNumber *> * _Nonnull)mapboxMapDebugOptions SWIFT_WARN_UNUSED_RESULT;
- (void)mapboxMapDebugOptions:(NSArray<NSNumber *> * _Nonnull)value;
- (BOOL)getPresentsWithTransaction SWIFT_WARN_UNUSED_RESULT;
- (void)setPresentsWithTransaction:(BOOL)value;
/// The preferred frames per second used for map rendering.
/// note:
/// <code>preferredFrameRateRange</code> is available for iOS 15.0 and above.
- (NSInteger)getPreferredFramesPerSecond SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=15,message="Use preferredFrameRateRange instead.");
/// The preferred frames per second used for map rendering.
/// note:
/// <code>preferredFrameRateRange</code> is available for iOS 15.0 and above.
- (void)setPreferredFramesPerSecond:(NSInteger)value SWIFT_AVAILABILITY(ios,deprecated=15,message="Use preferredFrameRateRange instead.");
- (CAFrameRateRange)getPreferredFrameRateRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)setPreferredFrameRateRange:(CAFrameRateRange)value SWIFT_AVAILABILITY(ios,introduced=15.0);
- (TMBCameraState * _Nonnull)getCameraState SWIFT_WARN_UNUSED_RESULT;
@end

@protocol TMBAttributionURLOpener;

SWIFT_CLASS("_TtC13MapboxMapObjC14MapViewFactory")
@interface MapViewFactory : NSObject
/// :nodoc:
/// See https://developer.apple.com/forums/thread/650054 for context
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame options:(MapInitOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame mapInitOptions:(MapInitOptions * _Nonnull)mapInitOptions urlOpener:(id <TMBAttributionURLOpener> _Nonnull)urlOpener SWIFT_WARN_UNUSED_RESULT;
@end





SWIFT_PROTOCOL("_TtP13MapboxMapObjC11NamedString_")
@protocol NamedString
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMStylePackLoadOptions;
@class MBMStylePack;
@class TMBCancelable;

@interface MBMOfflineManager (SWIFT_EXTENSION(MapboxMapObjC))
/// Loads a new style package or updates the existing one.
/// If a style package with the given id already exists, it is updated with
/// the values provided to the given load options. The missing resources get
/// loaded and the expired resources get updated.
/// If there no values provided to the given load options, the existing
/// style package gets refreshed: the missing resources get loaded and the
/// expired resources get updated.
/// A failed load request can be reattempted with another <code>loadStylePack()</code> call.
/// If the style cannot be fetched for any reason, the load request is terminated.
/// If the style is fetched but loading some of the style package resources
/// fails, the load request proceeds trying to load the remaining style package
/// resources.
/// important:
///
/// By default, users may download up to 750 tile packs for offline
/// use across all regions. If the limit is hit, any loadRegion call
/// will fail until excess regions are deleted. This limit is subject
/// to change. Please contact Mapbox if you require a higher limit.
/// Additional charges may apply.
/// \param styleURI The URI of the style package’s associated style
///
/// \param loadOptions The style package load options.
///
/// \param progress Invoked multiple times to report progress of the loading
/// operation.
///
/// \param completion Invoked only once upon success, failure, or cancelation
/// of the loading operation. Any <code>Result</code> error could be of type
/// <code>StylePackError</code>.
///
///
/// returns:
/// Returns a Cancelable object to cancel the load request
- (TMBCancelable * _Nonnull)loadStylePackFor:(NSString * _Nonnull)styleUriString loadOptions:(MBMStylePackLoadOptions * _Nonnull)loadOptions progress:(MBMStylePackLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion;
/// Fetch an array of the existing style packages.
/// note:
///
/// The user-provided callbacks will be executed on a worker thread; it
/// is the responsibility of the user to dispatch to a user-controlled
/// thread.
/// \param completion The result callback. Any <code>Result</code> error should
/// be of type <code>StylePackError</code>.
///
- (void)allStylePacks:(void (^ _Nonnull)(NSArray<MBMStylePack *> * _Nullable, NSError * _Nullable))completion;
/// Returns a style package by its id.
/// note:
///
/// The user-provided callbacks will be executed on a worker thread; it
/// is the responsibility of the user to dispatch to a user-controlled
/// thread.
/// \param styleURI The URI of the style package’s associated style
///
/// \param completion The result callback. Any <code>Result</code> error could be of type
/// <code>StylePackError</code>.
///
- (void)stylePackFor:(NSString * _Nonnull)styleUriString completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion;
/// Returns a style package’s associated metadata.
/// The style package’s associated metadata that a user previously set.
/// \param styleURI The URI of the style package’s associated style
///
/// \param completion The result callback. Any <code>Result</code> error could be of type
/// <code>StylePackError</code>.
///
- (void)stylePackMetadataFor:(NSString * _Nonnull)styleUriString completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/// Removes a style package.
/// Removes a style package from the existing packages list. The actual
/// resources eviction might be deferred. All pending loading operations for
/// the style package with the given id will fail with Canceled error.
/// \param styleURI The URI of the style package’s associated style
///
/// \param completion The result callback. Any <code>Result</code> error could be of type <code>StylePackError-swift.enum</code>.
///
- (void)removeStylePackFor:(NSString * _Nonnull)styleUriString completion:(void (^ _Nullable)(MBMStylePack * _Nullable, NSError * _Nullable))completion;
@end

@class TMBLightType;
@class TMBValue;
@class TMBStyleTransition;

/// An indirect light affecting all objects in the map adding a constant amount of light on them. It has no explicit direction and cannot cast shadows.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#light">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBAmbientLight")
@interface TMBAmbientLight : NSObject
/// Unique light name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Type of the light.
@property (nonatomic, readonly, strong) TMBLightType * _Nonnull type;
/// Color of the ambient light.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// A multiplier for the color of the ambient light.
@property (nonatomic, strong) TMBValue * _Nullable intensity;
/// Transition property for <code>intensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable intensityTransition;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Whether extruded geometries are lit relative to the map or viewport.
SWIFT_CLASS("_TtC13MapboxMapObjC9TMBAnchor")
@interface TMBAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The position of the light source is aligned to the rotation of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull map;)
+ (TMBAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The position of the light source is aligned to the rotation of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull viewport;)
+ (TMBAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC17TMBAnimationOwner")
@interface TMBAnimationOwner : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull gestures;)
+ (TMBAnimationOwner * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull unspecified;)
+ (TMBAnimationOwner * _Nonnull)unspecified SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBAnnotatedFeatureLayerFeature;

/// Represents either a GeoJSON geometry or an annotated layer feature.
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBAnnotatedFeature")
@interface TMBAnnotatedFeature : NSObject
/// GeoJSON geometry.
@property (nonatomic, readonly, strong) MBXGeometry * _Nullable geometry;
/// Layer feature.
@property (nonatomic, strong) TMBAnnotatedFeatureLayerFeature * _Nullable layerFeature;
/// Creates Annotated feature from layer feature.
/// \param layerId Identifier of the layer, that renders the feature.
///
/// \param featureId Feature identifier. If not specified, the annotation will appear on any feature from that layer.
///
+ (TMBAnnotatedFeature * _Nonnull)layerFeatureWithLayerId:(NSString * _Nonnull)layerId featureId:(NSString * _Nullable)featureId SWIFT_WARN_UNUSED_RESULT;
/// Creates Annotated feature from GeoJSON geometry.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     geometry: A geometry-convertible object, such as <code>Point</code>, <code>LineString</code> and others.
///   </li>
/// </ul>
+ (TMBAnnotatedFeature * _Nonnull)geometry:(MBXGeometry * _Nonnull)geometry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Represents a specific feature rendered on the layer.
SWIFT_CLASS("_TtC13MapboxMapObjC31TMBAnnotatedFeatureLayerFeature")
@interface TMBAnnotatedFeatureLayerFeature : NSObject
/// Identifier of the layer, that renders the feature.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
/// Feature identifier. If not specified, the annotation will appear on any feature from that layer.
@property (nonatomic, readonly, copy) NSString * _Nullable featureId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP13MapboxMapObjC13TMBAnnotation_")
@protocol TMBAnnotation
/// The unique identifier of the annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The geometry that is backing this annotation.
@property (nonatomic, readonly, strong) MBXGeometry * _Nonnull geometry;
/// Properties associated with the annotation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@end

@protocol TMBAnnotationManager;

/// A delegate that is called when a tap is detected on an annotation (or on several of them).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAnnotationInteractionDelegate_")
@protocol TMBAnnotationInteractionDelegate
/// This method is invoked when a tap gesture is detected on an annotation
/// \param manager The <code>AnnotationManager</code> that detected this tap gesture
///
/// \param annotations A list of <code>Annotations</code> that were tapped
///
- (void)annotationManager:(id <TMBAnnotationManager> _Nonnull)manager didDetectTappedAnnotations:(NSArray<id <TMBAnnotation>> * _Nonnull)annotations;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBAnnotationManager_")
@protocol TMBAnnotationManager
/// The id of this annotation manager.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the <code>GeoJSONSource</code> that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
/// The id of the layer that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
/// Slot for the underlying layer.
/// Use this property to position the annotations relative to other map features if you use Mapbox Standard Style.
/// See <a href="doc:Migrate-to-v11##21-The-Mapbox-Standard-Style">doc:Migrate-to-v11##21-The-Mapbox-Standard-Style</a> for more info.
@property (nonatomic, copy) NSString * _Nullable slot;
@end

@class TMBLayerPosition;
@class TMBClusterOptions;
@class TMBPointAnnotationManager;
@class TMBPolygonAnnotationManager;
@class TMBPolylineAnnotationManager;
@class TMBCircleAnnotationManager;

/// <code>AnnotationOrchestrator</code> provides a way to create annotation managers of different types.
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBAnnotationOrchestrator")
@interface TMBAnnotationOrchestrator : NSObject
/// Dictionary of annotation managers keyed by their identifiers.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <TMBAnnotationManager>> * _Nonnull annotationManagersById;
/// Creates a <code>PointAnnotationManager</code> which is used to manage a collection of
/// <code>PointAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PointAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
/// \param clusterOptions Optionally set the <code>ClusterOptions</code> to cluster the Point Annotations
///
///
/// returns:
/// An instance of <code>PointAnnotationManager</code>
- (TMBPointAnnotationManager * _Nonnull)makePointAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition clusterOptions:(TMBClusterOptions * _Nullable)clusterOptions SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolygonAnnotationManager</code> which is used to manage a collection of
/// <code>PolygonAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolygonAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager..
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolygonAnnotationManager</code>
- (TMBPolygonAnnotationManager * _Nonnull)makePolygonAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolylineAnnotationManager</code> which is used to manage a collection of
/// <code>PolylineAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolylineAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolylineAnnotationManager</code>
- (TMBPolylineAnnotationManager * _Nonnull)makePolylineAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>CircleAnnotationManager</code> which is used to manage a collection of
/// <code>CircleAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>CircleAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>CircleAnnotationManager</code>
- (TMBCircleAnnotationManager * _Nonnull)makeCircleAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Removes an annotation manager, this will remove the underlying layer and source from the style.
/// A removed annotation manager will not be able to reuse anymore, you will need to create new annotation manger to add annotations.
/// \param id Identifer of annotation manager to remove
///
- (void)removeAnnotationManagerWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBAppleLocationProviderOptions;
@protocol TMBAppleLocationProviderDelegate;
@class MBXLocation;
@class TMBHeading;

SWIFT_CLASS("_TtC13MapboxMapObjC24TMBAppleLocationProvider")
@interface TMBAppleLocationProvider : NSObject
/// Location manager options.
@property (nonatomic, strong) TMBAppleLocationProviderOptions * _Nonnull options;
/// A delegate of location provider.
@property (nonatomic, weak) id <TMBAppleLocationProviderDelegate> _Nullable delegate;
/// A stream of location updates.
/// An observer will receive a cached value (if any) upon subscription.
/// note:
/// When the first observer is added, the underlying <code>CLLocationManager</code> instance will
/// ask for permissions (if needed) and start to produce the location updates. When the last observer is gone it will stop.
- (TMBCancelable * _Nonnull)onLocationUpdateWithHandler:(void (^ _Nonnull)(NSArray<MBXLocation *> * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// A stream of heading (compass) updates.
/// An observer will receive a cached value (if any) upon subscription.
/// note:
/// When the first observer is added, the underlying <code>CLLocationManager</code> instance will
/// start to produce the heading updates. When the last observer is gone, it will stop.
- (TMBCancelable * _Nonnull)onHeadingUpdateWithHandler:(void (^ _Nonnull)(TMBHeading * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The <code>AppleLocationProviderDelegate</code> protocol defines a set of optional methods that you
/// can use to receive events from an associated location provider object.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAppleLocationProviderDelegate_")
@protocol TMBAppleLocationProviderDelegate
/// Tells the delegate that an attempt to locate the user’s position failed.
/// \param locationProvider The location provider that is tracking the user’s location.
///
/// \param error An error object containing the reason why location tracking failed.
///
- (void)appleLocationProvider:(TMBAppleLocationProvider * _Nonnull)locationProvider didFailWithError:(NSError * _Nonnull)error;
/// Tells the delegate that the accuracy authorization has changed.
/// \param locationProvider The location provider that is tracking the user’s location.
///
/// \param accuracyAuthorization The updated accuracy authorization value.
///
- (void)appleLocationProvider:(TMBAppleLocationProvider * _Nonnull)locationProvider didChangeAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuthorization;
/// Asks the delegate whether the heading calibration alert should be displayed.
/// \param locationProvider The location provider object coordinating the display of the heading calibration alert.
///
///
/// returns:
/// <code>true</code> if you want to allow the heading calibration alert to be displayed; <code>false</code> if you do not.
- (BOOL)appleLocationProviderShouldDisplayHeadingCalibration:(TMBAppleLocationProvider * _Nonnull)locationProvider SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC31TMBAppleLocationProviderOptions")
@interface TMBAppleLocationProviderOptions : NSObject
/// Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
/// The default value of this property is <code>kCLDistanceFilterNone</code>.
@property (nonatomic) CLLocationDistance distanceFilter;
/// Specifies the accuracy of the location data.
/// The default value is <code>kCLLocationAccuracyBest</code>.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/// Sets the type of user activity associated with the location updates.
/// The default value is <code>CLActivityType.other</code>.
@property (nonatomic) CLActivityType activityType;
/// Initializes provider options.
/// \param distanceFilter Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
///
/// \param desiredAccuracy Specifies the accuracy of the location data.
///
/// \param activityType Sets the type of user activity associated with the location.
///
- (nonnull instancetype)initWithDistanceFilter:(CLLocationDistance)distanceFilter desiredAccuracy:(CLLocationAccuracy)desiredAccuracy activityType:(CLActivityType)activityType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A style’s fog property is a global effect that improves depth perception by fading out distant objects.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBAtmosphere")
@interface TMBAtmosphere : NSObject
/// The color of the atmosphere region immediately below the horizon and within the <code>range</code> and above the horizon and within <code>horizon-blend</code>. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// The color of the atmosphere region above the horizon, <code>high-color</code> extends further above the horizon than the <code>color</code> property and its spread can be controlled with <code>horizon-blend</code>. The opacity can be set to <code>0</code> to remove the high atmosphere color contribution.
@property (nonatomic, strong) TMBValue * _Nullable highColor;
/// Transition property for <code>highColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable highColorTransition;
/// Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.
@property (nonatomic, strong) TMBValue * _Nullable horizonBlend;
/// Transition property for <code>horizonBlend</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable horizonBlendTransition;
/// The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.
@property (nonatomic, strong) TMBValue * _Nullable range;
/// Transition property for <code>range</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable rangeTransition;
/// The color of the region above the horizon and after the end of the <code>horizon-blend</code> contribution. The opacity can be set to <code>0</code> to have a transparent background.
@property (nonatomic, strong) TMBValue * _Nullable spaceColor;
/// Transition property for <code>spaceColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable spaceColorTransition;
/// A value controlling the star intensity where <code>0</code> will show no stars and <code>1</code> will show stars at their maximum intensity.
@property (nonatomic, strong) TMBValue * _Nullable starIntensity;
/// Transition property for <code>starIntensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable starIntensityTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum TMBOrnamentPosition : NSInteger;

/// Used to configure position, margin, and visibility for the map’s attribution button.
SWIFT_CLASS("_TtC13MapboxMapObjC27TMBAttributionButtonOptions")
@interface TMBAttributionButtonOptions : NSObject
/// The position of the attribution button.
/// The default value for this property is <code>.bottomTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the attribution button.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// Initializes an <code>AttributionButtonOptions</code>.
/// \param position The position of the attribution button.
///
/// \param margins The margins of the attribution button.
///
- (nonnull instancetype)initWithPosition:(enum TMBOrnamentPosition)position margins:(CGPoint)margins OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;

/// A protocol to open attribution URLs.
/// Use this protocol when the map view is used in non-application target(e.g. application extension target).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC23TMBAttributionURLOpener_")
@protocol TMBAttributionURLOpener
/// Asks the opener to open the provided URL.
/// \param url The URL to be opened.
///
- (void)openAttributionURL:(NSURL * _Nonnull)url;
@end

@class TMBLayerType;
@class TMBSlot;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC8TMBLayer_")
@protocol TMBLayer
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
@end


/// The background color or pattern of the map.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-background">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBBackgroundLayer")
@interface TMBBackgroundLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// The color with which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundColor;
/// Transition options for <code>backgroundColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundColorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable backgroundEmissiveStrength;
/// Transition options for <code>backgroundEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundEmissiveStrengthTransition;
/// The opacity at which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundOpacity;
/// Transition options for <code>backgroundOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundOpacityTransition;
/// Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable backgroundPattern;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBCameraTransition;
@protocol UITimingCurveProvider;

SWIFT_CLASS("_TtC13MapboxMapObjC22TMBBasicCameraAnimator")
@interface TMBBasicCameraAnimator : NSObject
/// The animator’s owner.
@property (nonatomic, readonly, strong) TMBAnimationOwner * _Nonnull owner;
/// Defines the transition that will occur to the <code>CameraOptions</code> of the renderer due to this animator
@property (nonatomic, readonly, strong) TMBCameraTransition * _Nullable transition;
/// The state from of the animator.
@property (nonatomic, readonly) UIViewAnimatingState state;
/// Boolean that represents if the animation is running or not.
@property (nonatomic, readonly) BOOL isRunning;
/// Boolean that represents if the animation is running normally or in reverse.
@property (nonatomic) BOOL isReversed;
/// A Boolean value that indicates whether a completed animation remains in the active state.
@property (nonatomic) BOOL pausesOnCompletion;
/// Value that represents what percentage of the animation has been completed.
@property (nonatomic) double fractionComplete;
/// Starts the animation if this animator is in <code>inactive</code> state. Also used to resume a “paused”
/// animation. Calling this method on an animator that has already completed or been canceled has
/// no effect.
- (void)startAnimation;
/// Starts the animation after a delay. This cannot be called on a paused animation.
/// If animations are cancelled before the end of the delay, it will also be cancelled. Calling this method
/// on an animator that has already completed or been canceled has no effect.
/// \param delay Delay (in seconds) after which the animation should start
///
- (void)startAnimationAfterDelay:(NSTimeInterval)delay;
/// Pauses the animation. Calling this method on an animator that has already completed or been
/// canceled has no effect.
- (void)pauseAnimation;
/// Stops the animation.
- (void)stopAnimation;
/// Add a completion block to the animator.
- (void)addCompletion:(void (^ _Nonnull)(UIViewAnimatingPosition))completion;
/// Continue the animation with a timing parameter (<code>UITimingCurveProvider</code>) and duration factor (<code>CGFloat</code>).
- (void)continueAnimationWithTimingParameters:(id <UITimingCurveProvider> _Nullable)timingParameters durationFactor:(double)durationFactor;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBCameraAnimator;

/// APIs for animating the camera.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCameraAnimationsManager")
@interface TMBCameraAnimationsManager : NSObject
/// List of animators currently alive
@property (nonatomic, readonly, copy) NSArray<TMBCameraAnimator *> * _Nonnull cameraAnimators;
/// Interrupts all <code>active</code> animation.
/// The camera remains at the last point before the cancel request was invoked, i.e.,
/// the camera is not reset or fast-forwarded to the end of the transition.
/// Canceled animations cannot be restarted / resumed. The animator must be recreated.
- (void)cancelAnimations;
/// Moves the viewpoint to a different location using a transition animation that
/// evokes powered flight and an optional transition duration and timing function.
/// It seamlessly incorporates zooming and panning to help
/// the user find his or her bearings even after traversing a great distance.
/// \param to The camera options at the end of the animation. Any camera parameters that are nil will
/// not be animated.
///
/// \param duration Duration of the animation, measured in seconds. If nil, a suitable calculated
/// duration is used.
///
/// \param completion Completion handler called when the animation stops
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nonnull)flyTo:(TMBCameraOptions * _Nonnull)to duration:(NSNumber * _Nullable)duration completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Ease the camera to a destination
/// \param to the target camera after animation; if <code>camera.anchor</code> is non-nil, it is use for both
/// the <code>fromValue</code> and the <code>toValue</code> of the underlying animation such that the
/// value specified will not be interpolated, but will be passed as-is to each camera update
/// during the animation. To animate <code>anchor</code> itself, use the <code>makeAnimator</code> APIs.
///
/// \param duration duration of the animation
///
/// \param curve the easing curve for the animation
///
/// \param completion completion to be called after animation
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nonnull)easeTo:(TMBCameraOptions * _Nonnull)to duration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param timingParameters The object providing the timing information. This object must adopt
/// the <code>UITimingCurveProvider</code> protocol.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (TMBBasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration timingParameters:(id <UITimingCurveProvider> _Nonnull)timingParameters animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param curve One of UIKit’s predefined timing curves to apply to the animation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (TMBBasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param controlPoint1 The first control point for the cubic Bézier timing curve.
///
/// \param controlPoint2 The second control point for the cubic Bézier timing curve.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (TMBBasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2 animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param dampingRatio The damping ratio to apply to the initial acceleration and oscillation. To
/// smoothly decelerate the animation without oscillation, specify a value of 1.
/// Specify values closer to 0 to create less damping and more oscillation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (TMBBasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)dampingRatio animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBCancelable")
@interface TMBCancelable : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBCameraAnimator")
@interface TMBCameraAnimator : TMBCancelable
@end


@class MBMCoordinateBounds;

/// Holds information about camera bounds.
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBCameraBounds")
@interface TMBCameraBounds : NSObject
/// The latitude and longitude bounds to which the camera center are constrained.
/// Defaults to: Southwest: (-90, -180) and Northeast: (90, 180).
@property (nonatomic, readonly, strong) MBMCoordinateBounds * _Nonnull bounds;
/// The maximum zoom level, in mapbox zoom levels 0-25.5. At low zoom levels,
/// a small set of map tiles covers a large geographical area. At higher zoom
/// levels, a larger number of tiles cover a smaller geographical area.
/// Defaults to 22.
@property (nonatomic, readonly) CGFloat maxZoom;
/// The minimum zoom level, in mapbox zoom levels 0-25.5.
/// Defaults to 0.
@property (nonatomic, readonly) CGFloat minZoom;
/// The maximum allowed pitch value in degrees.
/// Defaults to 85.
@property (nonatomic, readonly) CGFloat maxPitch;
/// The minimum allowed pitch value degrees.
/// Defaults to 0.
@property (nonatomic, readonly) CGFloat minPitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Holds options to be used for setting camera bounds.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBCameraBoundsOptions")
@interface TMBCameraBoundsOptions : NSObject
/// The latitude and longitude bounds to which the camera center is constrained.
/// Defaults to: Southwest: (-90, -180) and Northeast: (90, 180).
@property (nonatomic, strong) MBMCoordinateBounds * _Nullable bounds;
/// The maximum zoom level, in mapbox zoom levels 0-25.5. At low zoom levels,
/// a small set of map tiles covers a large geographical area. At higher
/// zoom levels, a larger number of tiles cover a smaller geographical area.
/// Defaults to 22.
@property (nonatomic) CGFloat maxZoom;
/// The minimum zoom level, in mapbox zoom levels 0-25.5.
/// Defaults to 0.
@property (nonatomic) CGFloat minZoom;
/// The maximum allowed pitch value in degrees.
/// Defaults to 85.
@property (nonatomic) CGFloat maxPitch;
/// The minimum allowed pitch value degrees.
/// Defaults to 0.
@property (nonatomic) CGFloat minPitch;
- (nonnull instancetype)initWithBounds:(MBMCoordinateBounds * _Nullable)bounds maxZoom:(CGFloat)maxZoom minZoom:(CGFloat)minZoom maxPitch:(CGFloat)maxPitch minPitch:(CGFloat)minPitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC16TMBCameraOptions")
@interface TMBCameraOptions : NSObject
/// The geographic coordinate that will be rendered at the midpoint of the area defined by <code>padding</code>. Defaults to (0, 0).
@property (nonatomic) CLLocationCoordinate2D center;
/// Insets from each edge of the map. Impacts the “principal point” of the graphical projection and the location at which <code>center</code> is rendered. Defaults to 0.
@property (nonatomic) UIEdgeInsets padding;
/// Point in the map’s coordinate system about which <code>zoom</code> and <code>bearing</code> should be applied. Mutually exclusive with <code>center</code>. Defaults to (0, 0).
@property (nonatomic) CGPoint anchor;
/// The zoom level of the map. Defaults to 0.
@property (nonatomic) CGFloat zoom;
/// The bearing of the map, measured in degrees clockwise from true north. Defaults to 0.
@property (nonatomic) CLLocationDirection bearing;
/// Pitch toward the horizon measured in degrees, with 0 degrees resulting in a top-down view for a two-dimensional map. Defaults to 0.
@property (nonatomic) CGFloat pitch;
/// <code>CameraOptions</code> represents a set of updates to make to the camera.
/// \param center The geographic coordinate that will be rendered at the midpoint of the area defined by <code>padding</code>.
///
/// \param padding Insets from each edge of the map. Impacts the “principal point” of the graphical projection and the location at which <code>center</code> is rendered.
///
/// \param anchor Point in the map’s coordinate system about which <code>zoom</code> and <code>bearing</code> should be applied. Mutually exclusive with <code>center</code>.
///
/// \param zoom The zoom level of the map.
///
/// \param bearing The bearing of the map, measured in degrees clockwise from true north.
///
/// \param pitch Pitch toward the horizon measured in degrees, with 0 degrees resulting in a top-down view for a two-dimensional map.
///
///
/// returns:
/// A <code>CameraOptions</code> that contains all configuration information the map will use to determine which part of the map to render.
- (nonnull instancetype)initWithCenter:(CLLocationCoordinate2D)center padding:(UIEdgeInsets)padding anchor:(CGPoint)anchor zoom:(CGFloat)zoom bearing:(CLLocationDirection)bearing pitch:(CGFloat)pitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCameraState:(TMBCameraState * _Nonnull)cameraState anchor:(CGPoint)anchor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC14TMBCameraState")
@interface TMBCameraState : NSObject
/// The geographic coordinate that will be rendered at the midpoint of the area defined by <code>padding</code>.
@property (nonatomic) CLLocationCoordinate2D center;
/// Insets from each edge of the map. Impacts the “principal point” of the graphical projection and the location at which <code>center</code> is rendered.
@property (nonatomic) UIEdgeInsets padding;
/// The zoom level of the map.
@property (nonatomic) CGFloat zoom;
/// The bearing of the map, measured in degrees clockwise from true north.
@property (nonatomic) CLLocationDirection bearing;
/// Pitch toward the horizon measured in degrees, with 0 degrees resulting in a top-down view for a two-dimensional map.
@property (nonatomic) CGFloat pitch;
- (nonnull instancetype)initWithCenter:(CLLocationCoordinate2D)center padding:(UIEdgeInsets)padding zoom:(CGFloat)zoom bearing:(CLLocationDirection)bearing pitch:(CGFloat)pitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBCameraTransitionChange;

/// Structure used to represent a desired change to the map’s camera
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCameraTransition")
@interface TMBCameraTransition : NSObject
/// Represents a change to the center coordinate of the map.
/// NOTE: Setting the <code>toValue</code> of <code>center</code> overrides any <code>anchor</code> animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull center;
/// Represents a change to the zoom of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull zoom;
/// Represents a change to the padding of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull padding;
/// Represents a change to the anchor of the map
/// NOTE: Incompatible with concurrent center animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull anchor;
/// Represents a change to the bearing of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull bearing;
/// Ensures that bearing transitions are optimized to take the shortest path. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldOptimizeBearingPath;
/// Represents a change to the pitch of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull pitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Generic struct used to represent a change in a value from a starting point (i.e. <code>fromValue</code>) to an end point (i.e. <code>toValue</code>).
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBCameraTransitionChange")
@interface TMBCameraTransitionChange : NSObject
@property (nonatomic, strong) NSValue * _Nonnull fromValue;
@property (nonatomic, strong) NSValue * _Nullable toValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBPoint;
@class TMBMapContentGestureContext;
@class UIColor;

SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCircleAnnotation")
@interface TMBCircleAnnotation : NSObject <TMBAnnotation>
/// Identifier for this annotation
@property (nonatomic, copy) NSString * _Nonnull id;
/// The geometry backing this annotation
@property (nonatomic, readonly, strong) MBXGeometry * _Nonnull geometry;
/// The point backing this annotation
@property (nonatomic, strong) TMBPoint * _Nonnull point;
/// Toggles the annotation’s selection state.
/// If the annotation is deselected, it becomes selected.
/// If the annotation is selected, it becomes deselected.
@property (nonatomic) BOOL isSelected;
/// Property to determine whether annotation can be manually moved around map
@property (nonatomic) BOOL isDraggable;
/// Handles tap gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable tapHandler)(TMBMapContentGestureContext * _Nonnull);
/// Handles long press gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable longPressHandler)(TMBMapContentGestureContext * _Nonnull);
/// Properties associated with the annotation
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Create a circle annotation with a center coordinate and an optional identifier
/// \param id Optional identifier for this annotation
///
/// \param coordinate Coordinate where this circle annotation should be centered
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id centerCoordinate:(CLLocationCoordinate2D)centerCoordinate isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id point:(TMBPoint * _Nonnull)point isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) NSNumber * _Nullable circleBlur;
/// The fill color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleColor;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable circleOpacity;
/// Circle radius.
@property (nonatomic, strong) NSNumber * _Nullable circleRadius;
/// The stroke color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleStrokeColor;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeOpacity;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBCirclePitchAlignment;
@class TMBCirclePitchScale;
@class TMBCircleTranslateAnchor;

/// An instance of <code>CircleAnnotationManager</code> is responsible for a collection of <code>CircleAnnotation</code>s.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCircleAnnotationManager")
@interface TMBCircleAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The collection of <code>CircleAnnotation</code> being managed.
@property (nonatomic, copy) NSArray<TMBCircleAnnotation *> * _Nonnull annotations;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) NSNumber * _Nullable circleEmissiveStrength;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBCirclePitchAlignment * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBCirclePitchScale * _Nullable circlePitchScale;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable circleTranslate;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBCircleTranslateAnchor * _Nullable circleTranslateAnchor;
/// Slot for the underlying layer.
/// Use this property to position the annotations relative to other map features if you use Mapbox Standard Style.
/// See <a href="doc:Migrate-to-v11##21-The-Mapbox-Standard-Style">doc:Migrate-to-v11##21-The-Mapbox-Standard-Style</a> for more info.
@property (nonatomic, copy) NSString * _Nullable slot;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBExpression;

/// A filled circle.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-circle">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBCircleLayer")
@interface TMBCircleLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) TMBValue * _Nullable circleBlur;
/// Transition options for <code>circleBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleBlurTransition;
/// The fill color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// Transition options for <code>circleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleColorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable circleEmissiveStrength;
/// Transition options for <code>circleEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleEmissiveStrengthTransition;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable circleOpacity;
/// Transition options for <code>circleOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleOpacityTransition;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchScale;
/// Circle radius.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// Transition options for <code>circleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleRadiusTransition;
/// The stroke color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeColor;
/// Transition options for <code>circleStrokeColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeColorTransition;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeOpacity;
/// Transition options for <code>circleStrokeOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeOpacityTransition;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeWidth;
/// Transition options for <code>circleStrokeWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeWidthTransition;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslate;
/// Transition options for <code>circleTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleTranslateTransition;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslateAnchor;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Orientation of circle when map is pitched.
SWIFT_CLASS("_TtC13MapboxMapObjC23TMBCirclePitchAlignment")
@interface TMBCirclePitchAlignment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The circle is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull map;)
+ (TMBCirclePitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull viewport;)
+ (TMBCirclePitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the scaling behavior of the circle when the map is pitched.
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCirclePitchScale")
@interface TMBCirclePitchScale : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Circles are scaled according to their apparent distance to the camera.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull map;)
+ (TMBCirclePitchScale * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Circles are not scaled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull viewport;)
+ (TMBCirclePitchScale * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>circle-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBCircleTranslateAnchor")
@interface TMBCircleTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The circle is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull map;)
+ (TMBCircleTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull viewport;)
+ (TMBCircleTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC17TMBClusterOptions")
@interface TMBClusterOptions : NSObject
/// The circle radius of the cluster items, 18 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// The circle color, black by default.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// The text color of cluster item, white by default
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// The text size of cluster item, 12 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Value to use for a text label of the cluster. <code>get("point_count")</code> by default which
/// will show the count of points in the cluster
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal
/// to the width of a tile, 50 by default. Value must be greater than or equal to 0.
@property (nonatomic) double clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less
/// than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom
/// levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic) double clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from
/// clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>.
/// <code>operator</code> is any expression function that accepts at
/// least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the
/// cluster contains; <code>map_expression</code> produces the value of a single point. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp(.sum) {
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": ["+", ["get", "scalerank"]]}</code>
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp {
///     Exp(.sum) {
///         Exp(.accumulated)
///         Exp(.get) { "sum" }
///     }
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Define a set of cluster options to determine how to cluster annotations.
/// Providing clusterOptions when initializing a <code>PointAnnotationManager</code>
/// will turn on clustering for that <code>PointAnnotationManager</code>.
- (nonnull instancetype)initWithCircleRadius:(TMBValue * _Nullable)circleRadius circleColor:(TMBValue * _Nullable)circleColor textColor:(TMBValue * _Nullable)textColor textSize:(TMBValue * _Nullable)textSize textField:(TMBValue * _Nullable)textField clusterRadius:(double)clusterRadius clusterMaxZoom:(double)clusterMaxZoom clusterProperties:(NSDictionary<NSString *, TMBExpression *> * _Nullable)clusterProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBCollatorOptions")
@interface TMBCollatorOptions : NSObject
/// Whether comparison option is case sensitive.
@property (nonatomic, strong) NSNumber * _Nullable caseSensitive;
/// Whether the comparison operation is diacritic sensitive
@property (nonatomic, strong) NSNumber * _Nullable diacriticSensitive;
/// The locale argument specifies the IETF language tag of the locale to use.
/// If none is provided, the default locale is used.
@property (nonatomic, copy) NSString * _Nullable locale;
- (nonnull instancetype)initWithCaseSensitive:(NSNumber * _Nullable)caseSensitive diacriticSensitive:(NSNumber * _Nullable)diacriticSensitive locale:(NSString * _Nullable)locale OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBCompassDirectionFormatterStyle : NSInteger;

/// The <code>CompassDirectionFormatter</code> class provides properly formatted
/// descriptions of absolute compass directions. For example, a value of <code>90</code> may
/// be formatted as “east”, depending on the locale.
SWIFT_CLASS("_TtC13MapboxMapObjC28TMBCompassDirectionFormatter")
@interface TMBCompassDirectionFormatter : NSObject
/// The <code>Style</code> used by this formatter. Defaults to <code>Style.long</code>.
@property (nonatomic) enum TMBCompassDirectionFormatterStyle style;
/// Returns a localized string describing the provided compass direction.
/// \param direction A compass direction, measured in degrees, where 0°
/// means “due north” and 90° means “due east”.
///
///
/// returns:
/// A localized <code>String</code> describing the provided <code>direction</code>
- (NSString * _Nonnull)stringFrom:(CLLocationDirection)direction SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>Style</code> is used to configure how a <code>CompassDirectionFormatter</code>
/// translates a compass direction into a <code>String</code>.
typedef SWIFT_ENUM(NSInteger, TMBCompassDirectionFormatterStyle, open) {
/// When a <code>CompassDirectionFormatter</code> is configured to use
/// the <code>short</code> style, it uses an abbreviation of the compass direction,
/// like “N” for north or “NE” for northeast.
  TMBCompassDirectionFormatterStyleShort = 0,
/// When a <code>CompassDirectionFormatter</code> is configured to use
/// the <code>long</code> style, it uses full descriptions of the compass direction,
/// like “north” or “northeast.”
  TMBCompassDirectionFormatterStyleLong = 1,
};

@class UIImage;
enum TMBOrnamentVisibility : NSInteger;

/// Used to configure position, margin, image, and visibility for the map’s compass view.
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBCompassViewOptions")
@interface TMBCompassViewOptions : NSObject
/// The position of the compass view.
/// The default value for this property is <code>.topTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the compass view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The image used for displaying the compass.
/// The default value for this property is nil, default compass image will be drawn.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The visibility of the compass view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
/// Initializes a <code>CompassViewOptions</code>.
/// \param position The position of the compass view.
///
/// \param margins The margins of the compass view.
///
/// \param image The image used for displaying the compass.
///
/// \param visibility The visibility of the compass view.
///
- (nonnull instancetype)initWithPosition:(enum TMBOrnamentPosition)position margins:(CGPoint)margins image:(UIImage * _Nullable)image visibility:(enum TMBOrnamentVisibility)visibility OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A light that has a direction and is located at infinite, so its rays are parallel. Simulates the sun light and it can cast shadows
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#light">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBDirectionalLight")
@interface TMBDirectionalLight : NSObject
/// Unique light name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Type of the light.
@property (nonatomic, readonly, strong) TMBLightType * _Nonnull type;
/// Enable/Disable shadow casting for this light
@property (nonatomic, strong) TMBValue * _Nullable castShadows;
/// Color of the directional light.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// Direction of the light source specified as [a azimuthal angle, p polar angle] where a indicates the azimuthal angle of the light relative to north (in degrees and proceeding clockwise), and p indicates polar angle of the light (from 0 degree, directly above, to 180 degree, directly below).
@property (nonatomic, strong) TMBValue * _Nullable direction;
/// Transition property for <code>direction</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable directionTransition;
/// A multiplier for the color of the directional light.
@property (nonatomic, strong) TMBValue * _Nullable intensity;
/// Transition property for <code>intensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable intensityTransition;
/// Determines the shadow strength, affecting the shadow receiver surfaces final color. Values near 0.0 reduce the shadow contribution to the final color. Values near to 1.0 make occluded surfaces receive almost no directional light. Designed to be used mostly for transitioning between values 0 and 1.
@property (nonatomic, strong) TMBValue * _Nullable shadowIntensity;
/// Transition property for <code>shadowIntensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable shadowIntensityTransition;
/// Creates a new Directional light.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The encoding used by this source. Mapbox Terrain RGB is used by default
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBEncoding")
@interface TMBEncoding : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull terrarium;)
+ (TMBEncoding * _Nonnull)terrarium SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull mapbox;)
+ (TMBEncoding * _Nonnull)mapbox SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBExpressionOperator;

SWIFT_CLASS("_TtC13MapboxMapObjC13TMBExpression")
@interface TMBExpression : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic, readonly, strong) TMBExpressionOperator * _Nonnull expressionOperator;
/// Length of time before a transition begins in seconds.
@property (nonatomic, readonly, copy) NSArray * _Nonnull arguments;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBExpressionOperator * _Nonnull)operator_ SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBExpressionOperator * _Nonnull)operator_ arguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)args:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface TMBExpression (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBExpression * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)subtract:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBExpressionOperator")
@interface TMBExpressionOperator : NSObject
/// For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull subtract;)
+ (TMBExpressionOperator * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
/// Logical negation. Returns <code>true</code> if the input is <code>false</code>, and <code>false</code> if the input is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=not) TMBExpressionOperator * _Nonnull not_;)
+ (TMBExpressionOperator * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are not equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull neq;)
+ (TMBExpressionOperator * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
/// Returns the product of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull product;)
+ (TMBExpressionOperator * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of floating point division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull division;)
+ (TMBExpressionOperator * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
/// Returns the remainder after integer division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull mod;)
+ (TMBExpressionOperator * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of raising the first input to the power specified by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull pow;)
+ (TMBExpressionOperator * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
/// Returns the sum of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull sum;)
+ (TMBExpressionOperator * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly less than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull lt;)
+ (TMBExpressionOperator * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is less than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull lte;)
+ (TMBExpressionOperator * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull eq;)
+ (TMBExpressionOperator * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly greater than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull gt;)
+ (TMBExpressionOperator * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is greater than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull gte;)
+ (TMBExpressionOperator * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute value of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull abs;)
+ (TMBExpressionOperator * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
/// Returns the value of a cluster property accumulated so far. Can only be used in the <code>clusterProperties</code> option of a clustered GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull accumulated;)
+ (TMBExpressionOperator * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
/// Returns the arccosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull acos;)
+ (TMBExpressionOperator * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if all the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>false</code>, the result is <code>false</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull all;)
+ (TMBExpressionOperator * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if any of the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>true</code>, the result is <code>true</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull any;)
+ (TMBExpressionOperator * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input is an array (optionally with a specific item type and length). If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull array;)
+ (TMBExpressionOperator * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// Returns the arcsine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull asin;)
+ (TMBExpressionOperator * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
/// Retrieves an item from an array.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull at;)
+ (TMBExpressionOperator * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
/// Returns the arctangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull atan;)
+ (TMBExpressionOperator * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull boolean;)
+ (TMBExpressionOperator * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
/// Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull switchCase;)
+ (TMBExpressionOperator * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
/// Returns the smallest integer that is greater than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull ceil;)
+ (TMBExpressionOperator * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
/// Evaluates each expression in turn until the first valid value is obtained. Invalid values are <code>null</code> and <a href="#types-image"><code>'image'</code></a> expressions that are unavailable in the style. If all values are invalid, <code>coalesce</code> returns the first value listed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull coalesce;)
+ (TMBExpressionOperator * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>collator</code> for use in locale-dependent comparison operations. The <code>case-sensitive</code> and <code>diacritic-sensitive</code> options default to <code>false</code>. The <code>locale</code> argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the <code>collator</code> will use a system-defined fallback locale. Use <code>resolved-locale</code> to test the results of locale fallback behavior.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull collator;)
+ (TMBExpressionOperator * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>string</code> consisting of the concatenation of the inputs. Each input is converted to a string as if by <code>to-string</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull concat;)
+ (TMBExpressionOperator * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the configuration value for the given option.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull config;)
+ (TMBExpressionOperator * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Returns the cosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull cos;)
+ (TMBExpressionOperator * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
/// Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull distance;)
+ (TMBExpressionOperator * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a <code>symbol</code> instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. <code>["distance-from-center"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull distanceFromCenter;)
+ (TMBExpressionOperator * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull downcase;)
+ (TMBExpressionOperator * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant e.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull e;)
+ (TMBExpressionOperator * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s state. Returns <code>null</code> if the requested property is not present on the feature’s state. A feature’s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their <code>id</code> attribute, which must be an integer or a string that can be cast to an integer. Note that [“feature-state”] can only be used with paint properties that support data-driven styling.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull featureState;)
+ (TMBExpressionOperator * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
/// Returns the largest integer that is less than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull floor;)
+ (TMBExpressionOperator * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>formatted</code> string for displaying mixed-format text in the <code>text-field</code> property. The input may contain a string literal or expression, including an <a href="#types-image"><code>'image'</code></a> expression. Strings may be followed by a style override object that supports the following properties:
/// <ul>
///   <li>
///     <code>"text-font"</code>: Overrides the font stack specified by the root layout property.
///   </li>
///   <li>
///     <code>"text-color"</code>: Overrides the color specified by the root paint property.
///   </li>
///   <li>
///     <code>"font-scale"</code>: Applies a scaling factor on <code>text-size</code> as specified by the root layout property.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull format;)
+ (TMBExpressionOperator * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s geometry type: <code>Point</code>, <code>LineString</code> or <code>Polygon</code>. <code>Multi*</code> feature types return the singular forms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull geometryType;)
+ (TMBExpressionOperator * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s properties, or from another object if a second argument is provided. Returns <code>null</code> if the requested property is missing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull get;)
+ (TMBExpressionOperator * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
/// Tests for the presence of an property value in the current feature’s properties, or from another object if a second argument is provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull has;)
+ (TMBExpressionOperator * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
/// Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the <code>heatmap-color</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull heatmapDensity;)
+ (TMBExpressionOperator * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from hue (range 0-360), saturation and lightness components (range 0-100), and an alpha component of 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull hsl;)
+ (TMBExpressionOperator * _Nonnull)hsl SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from hue (range 0-360), saturation and lightness components (range 0-100), and an alpha component (range 0-1). If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull hsla;)
+ (TMBExpressionOperator * _Nonnull)hsla SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s id, if it has one.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull id;)
+ (TMBExpressionOperator * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Returns a <a href="/mapbox-gl-js/style-spec/types/#resolvedimage"><code>ResolvedImage</code></a> for use in <a href="/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image"><code>icon-image</code></a>, <code>*-pattern</code> entries, and as a section in the <a href="#types-format"><code>'format'</code></a> expression. A <a href="#coalesce"><code>'coalesce'</code></a> expression containing <code>image</code> expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the <code>'image'</code> argument.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull image;)
+ (TMBExpressionOperator * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a <a href="#types-literal"><code>literal</code></a> expression to hint correct interpretation to the <a href="#type-system">type system</a>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull inExpression;)
+ (TMBExpressionOperator * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the first position at which an item can be found in an array or a substring can be found in a string, or <code>-1</code> if the input cannot be found. Accepts an optional index from where to begin the search.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull indexOf;)
+ (TMBExpressionOperator * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
/// Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. The output type must be <code>number</code>, <code>array<number></code>, or <code>color</code>.
/// Interpolation types:
/// <ul>
///   <li>
///     <code>["linear"]</code>: Interpolates linearly between the pair of stops just less than and just greater than the input.
///   </li>
///   <li>
///     <code>["exponential", base]</code>: Interpolates exponentially between the stops just less than and just greater than the input. <code>base</code> controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.
///   </li>
///   <li>
///     <code>["cubic-bezier", x1, y1, x2, y2]</code>: Interpolates using the cubic bezier curve defined by the given control points.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull interpolate;)
+ (TMBExpressionOperator * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input string is expected to render legibly. Returns <code>false</code> if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the <code>mapbox-gl-rtl-text</code> plugin is not in use in Mapbox GL JS).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull isSupportedScript;)
+ (TMBExpressionOperator * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
/// Returns the length of an array or string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull length;)
+ (TMBExpressionOperator * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
/// Binds expressions to named variables, which can then be referenced in the result expression using [“var”, “variable_name”].
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull letExpression;)
+ (TMBExpressionOperator * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along a gradient line. Can only be used in the <code>line-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull lineProgress;)
+ (TMBExpressionOperator * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
/// Provides a literal array or object value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull literal;)
+ (TMBExpressionOperator * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
/// Returns the natural logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull ln;)
+ (TMBExpressionOperator * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
/// Returns mathematical constant ln(2).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull ln2;)
+ (TMBExpressionOperator * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-ten logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull log10;)
+ (TMBExpressionOperator * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-two logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull log2;)
+ (TMBExpressionOperator * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
/// Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, <code>["get", "building_type"]</code>). Each label must be unique, and must be either:
/// <ul>
///   <li>
///     a single literal value; or
///   </li>
///   <li>
///     an array of literal values, the values of which must be all strings or all numbers (for example <code>[100, 101]</code> or <code>["c", "b"]</code>).
///   </li>
/// </ul>
/// The input matches if any of the values in the array matches using strict equality, similar to the <code>"in"</code> operator.
/// If the input type does not match the type of the labels, the result will be the fallback value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull match;)
+ (TMBExpressionOperator * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
/// Returns the maximum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull max;)
+ (TMBExpressionOperator * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
/// Returns a requested property of the light configuration based on the supplied options. Currently the only supported option is <code>brightness</code> which returns the global brightness value of the lights on a scale of 0 to 1, where 0 means total darkness and 1 means full brightness. This expression works only with 3D light, i.e. when <code>lights</code> root property is defined.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull measureLight;)
+ (TMBExpressionOperator * _Nonnull)measureLight SWIFT_WARN_UNUSED_RESULT;
/// Returns the minimum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull min;)
+ (TMBExpressionOperator * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull number;)
+ (TMBExpressionOperator * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Converts the input number into a string representation using the providing formatting rules. If set, the <code>locale</code> argument specifies the locale to use, as a BCP 47 language tag. If set, the <code>currency</code> argument specifies an ISO 4217 code to use for currency-style formatting. If set, the <code>unit</code> argument specifies a <a href="https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier">simple ECMAScript unit</a> to use for unit-style formatting. If set, the <code>min-fraction-digits</code> and <code>max-fraction-digits</code> arguments specify the minimum and maximum number of fractional digits to include.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull numberFormat;)
+ (TMBExpressionOperator * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull objectExpression;)
+ (TMBExpressionOperator * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant pi.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull pi;)
+ (TMBExpressionOperator * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
/// Returns the current pitch in degrees. <code>["pitch"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull pitch;)
+ (TMBExpressionOperator * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature properties object. Note that in some cases, it may be more efficient to use <code>["get", "property_name"]</code> directly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull properties;)
+ (TMBExpressionOperator * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns a random value in the specified range (first two input numbers) based on a supplied seed (third input). The seed can be an expression or a constant number or string value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull random;)
+ (TMBExpressionOperator * _Nonnull)random SWIFT_WARN_UNUSED_RESULT;
/// Returns the raster value of a pixel computed via <code>raster-color-mix</code>. Can only be used in the <code>raster-color</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull rasterValue;)
+ (TMBExpressionOperator * _Nonnull)rasterValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the IETF language tag of the locale being used by the provided <code>collator</code>. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull resolvedLocale;)
+ (TMBExpressionOperator * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull rgb;)
+ (TMBExpressionOperator * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull rgba;)
+ (TMBExpressionOperator * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
/// Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, <code>["round", -1.5]</code> evaluates to -2.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull round;)
+ (TMBExpressionOperator * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// Returns the sine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull sin;)
+ (TMBExpressionOperator * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches <code>sky-gradient-radius</code>. Can only be used in the <code>sky-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull skyRadialProgress;)
+ (TMBExpressionOperator * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
/// Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull slice;)
+ (TMBExpressionOperator * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
/// Returns the square root of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull sqrt;)
+ (TMBExpressionOperator * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
/// Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull step;)
+ (TMBExpressionOperator * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull string;)
+ (TMBExpressionOperator * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Returns the tangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull tan;)
+ (TMBExpressionOperator * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a boolean. The result is <code>false</code> when then input is an empty string, 0, <code>false</code>, <code>null</code>, or <code>NaN</code>; otherwise it is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull toBoolean;)
+ (TMBExpressionOperator * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull toColor;)
+ (TMBExpressionOperator * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a number, if possible. If the input is <code>null</code> or <code>false</code>, the result is 0. If the input is <code>true</code>, the result is 1. If the input is a string, it is converted to a number as specified by the <a href="https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type">“ToNumber Applied to the String Type” algorithm</a> of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull toNumber;)
+ (TMBExpressionOperator * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
/// Returns a four-element array containing the input color’s red, green, blue, and alpha components, in that order.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull toRgba;)
+ (TMBExpressionOperator * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a string. If the input is <code>null</code>, the result is <code>""</code>. If the input is a <a href="#types-boolean"><code>boolean</code></a>, the result is <code>"true"</code> or <code>"false"</code>. If the input is a number, it is converted to a string as specified by the <a href="https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type">“NumberToString” algorithm</a> of the ECMAScript Language Specification. If the input is a <a href="#color"><code>color</code></a>, it is converted to a string of the form <code>"rgba(r,g,b,a)"</code>, where <code>r</code>, <code>g</code>, and <code>b</code> are numerals ranging from 0 to 255, and <code>a</code> ranges from 0 to 1. If the input is an <a href="#types-image"><code>'image'</code></a> expression, <code>'to-string'</code> returns the image name. Otherwise, the input is converted to a string in the format specified by the <a href="https://tc39.github.io/ecma262/#sec-json.stringify"><code>JSON.stringify</code></a> function of the ECMAScript Language Specification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull toString;)
+ (TMBExpressionOperator * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// Returns a string describing the type of the given value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull typeofExpression;)
+ (TMBExpressionOperator * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull upcase;)
+ (TMBExpressionOperator * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
/// References variable bound using “let”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull varExpression;)
+ (TMBExpressionOperator * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the evaluated feature is fully contained inside a boundary of the input geometry, <code>false</code> otherwise. The input value can be a valid GeoJSON of type <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Supported features for evaluation:
/// <ul>
///   <li>
///     <code>Point</code>: Returns <code>false</code> if a point is on the boundary or falls outside the boundary.
///   </li>
///   <li>
///     <code>LineString</code>: Returns <code>false</code> if any part of a line falls outside the boundary, the line intersects the boundary, or a line’s endpoint is on the boundary.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull within;)
+ (TMBExpressionOperator * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
/// Returns the current zoom level. Note that in style layout and paint properties, [“zoom”] may only appear as the input to a top-level “step” or “interpolate” expression.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull zoom;)
+ (TMBExpressionOperator * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
/// Interpolates linearly between the pair of stops just less than and just greater than the input
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull linear;)
+ (TMBExpressionOperator * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// <code>["exponential", base]</code>
/// Interpolates exponentially between the stops just less than and just
/// greater than the input. base controls the rate at which the output increases: higher values make the output
/// increase more towards the high end of the range.
/// With values close to 1 the output increases linearly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull exponential;)
+ (TMBExpressionOperator * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
/// <code>["cubic-bezier", x1, y1, x2, y2]</code>
/// Interpolates using the cubic bezier curve defined by the given control points.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBExpressionOperator * _Nonnull cubicBezier;)
+ (TMBExpressionOperator * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TMBExpressionOptionsType : NSInteger;
@class TMBFormatOptions;
@class TMBNumberFormatOptions;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBExpressionOptions")
@interface TMBExpressionOptions : NSObject
@property (nonatomic, readonly) enum TMBExpressionOptionsType type;
@property (nonatomic, readonly) id _Nonnull options;
+ (TMBExpressionOptions * _Nonnull)format:(TMBFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)numberFormat:(TMBNumberFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)collator:(TMBCollatorOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBExpressionOptionsType, open) {
  TMBExpressionOptionsTypeFormat = 0,
  TMBExpressionOptionsTypeNumberFormat = 1,
  TMBExpressionOptionsTypeCollator = 2,
};


/// An extruded (3D) polygon.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill-extrusion">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBFillExtrusionLayer")
@interface TMBFillExtrusionLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Controls the intensity of shading near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionIntensity;
/// Transition options for <code>fillExtrusionAmbientOcclusionIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionIntensityTransition;
/// Shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to height of one floor and brings the most plausible results for buildings. This property works only with legacy light. When 3D light is enabled <code>fill-extrusion-ambient-occlusion-wall-radius</code> and <code>fill-extrusion-ambient-occlusion-ground-radius</code> are used instead.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionRadius;
/// Transition options for <code>fillExtrusionAmbientOcclusionRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionRadiusTransition;
/// The height with which to extrude the base of this layer. Must be less than or equal to <code>fill-extrusion-height</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionBase;
/// Transition options for <code>fillExtrusionBase</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionBaseTransition;
/// The base color of the extruded fill. The extrusion’s surfaces will be shaded differently based on this color in combination with the root <code>light</code> settings. If this color is specified as <code>rgba</code> with an alpha component, the alpha component will be ignored; use <code>fill-extrusion-opacity</code> to set layer opacity.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionColor;
/// Transition options for <code>fillExtrusionColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionColorTransition;
/// This parameter defines the range for the fade-out effect before an automatic content cutoff on pitched map views. The automatic cutoff range is calculated according to the minimum required zoom level of the source and layer. The fade range is expressed in relation to the height of the map view. A value of 1.0 indicates that the content is faded to the same extent as the map’s height in pixels, while a value close to zero represents a sharp cutoff. When the value is set to 0.0, the cutoff is completely disabled. Note: The property has no effect on the map if terrain is enabled.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionCutoffFadeRange;
/// The height with which to extrude this layer.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionHeight;
/// Transition options for <code>fillExtrusionHeight</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionHeightTransition;
/// The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionOpacity;
/// Transition options for <code>fillExtrusionOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionOpacityTransition;
/// Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionPattern;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslate;
/// Transition options for <code>fillExtrusionTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionTranslateTransition;
/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslateAnchor;
/// Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionVerticalGradient;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC31TMBFillExtrusionTranslateAnchor")
@interface TMBFillExtrusionTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The fill extrusion is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull map;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill extrusion is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull viewport;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A filled polygon with an optional stroked border.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBFillLayer")
@interface TMBFillLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable fillSortKey;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) TMBValue * _Nullable fillAntialias;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) TMBValue * _Nullable fillColor;
/// Transition options for <code>fillColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillColorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable fillEmissiveStrength;
/// Transition options for <code>fillEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillEmissiveStrengthTransition;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) TMBValue * _Nullable fillOpacity;
/// Transition options for <code>fillOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOpacityTransition;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) TMBValue * _Nullable fillOutlineColor;
/// Transition options for <code>fillOutlineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOutlineColorTransition;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillPattern;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslate;
/// Transition options for <code>fillTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillTranslateTransition;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslateAnchor;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBFillTranslateAnchor")
@interface TMBFillTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The fill is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull map;)
+ (TMBFillTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull viewport;)
+ (TMBFillTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A global directional light source which is only applied on 3D layers and hillshade layers. Using this type disables other light sources.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#light">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBFlatLight")
@interface TMBFlatLight : NSObject
/// Unique light name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Type of the light.
@property (nonatomic, readonly, strong) TMBLightType * _Nonnull type;
/// Whether extruded geometries are lit relative to the map or viewport.
@property (nonatomic, strong) TMBValue * _Nullable anchor;
/// Color tint for lighting extruded geometries.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
@property (nonatomic, strong) TMBValue * _Nullable intensity;
/// Transition property for <code>intensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable intensityTransition;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when <code>light.anchor</code> is set to <code>viewport</code> corresponds to the top of the viewport, or 0 degree when <code>light.anchor</code> is set to <code>map</code> corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
@property (nonatomic, strong) TMBValue * _Nullable position;
/// Transition property for <code>position</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable positionTransition;
/// Creates a new Flat light.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An animator that evokes powered flight and an optional transition duration and timing function.
/// It seamlessly incorporates zooming and panning to help the user find their bearings even after
/// traversing a great distance.
/// seealso:
/// <code>CameraAnimationsManager/fly(to:duration:completion:)</code>
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBFlyToCameraAnimator")
@interface TMBFlyToCameraAnimator : NSObject
/// The animator’s owner
@property (nonatomic, readonly, strong) TMBAnimationOwner * _Nonnull owner;
/// The animator’s duration
@property (nonatomic, readonly) NSTimeInterval duration;
/// The animator’s state
@property (nonatomic, readonly) UIViewAnimatingState state;
- (void)stopAnimation;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC16TMBFormatOptions")
@interface TMBFormatOptions : NSObject
/// Applies a scaling factor on text-size as specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable fontScale;
/// Overrides the font stack specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable textFont;
/// Overrides the color specified by the root paint property.
@property (nonatomic, strong) TMBValue * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBSourceType;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC9TMBSource_")
@protocol TMBSource
/// Rendering type of this source.
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@end

@class TMBGeoJSONSourceData;
@class TMBPromoteId;

/// A GeoJSON data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geo_json">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC16TMBGeoJSONSource")
@interface TMBGeoJSONSource : NSObject <TMBSource>
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// A URL to a GeoJSON file, or inline GeoJSON.
@property (nonatomic, strong) TMBGeoJSONSourceData * _Nullable data;
/// Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels).
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance.
@property (nonatomic, strong) NSNumber * _Nullable buffer;
/// Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
@property (nonatomic, strong) NSNumber * _Nullable tolerance;
/// If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new <code>Point</code> features in the source with additional properties:
/// <ul>
///   <li>
///     <code>cluster</code> Is <code>true</code> if the point is a cluster
///   </li>
///   <li>
///     <code>cluster_id</code> A unqiue id for the cluster to be used in conjunction with the <a href="https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom">cluster inspection methods</a>
///   </li>
///   <li>
///     <code>point_count</code> Number of original points grouped into this cluster
///   </li>
///   <li>
///     <code>point_count_abbreviated</code> An abbreviated point count
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nullable cluster;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile.
@property (nonatomic, strong) NSNumber * _Nullable clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic, strong) NSNumber * _Nullable clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>. <code>operator</code> is any expression function that accepts at least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the cluster contains; <code>map_expression</code> produces the value of a single point.
/// Example: <code>{"sum": ["+", ["get", "scalerank"]]}</code>.
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value, e.g.:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Whether to calculate line distance metrics. This is required for line layers that specify <code>line-gradient</code> values.
@property (nonatomic, strong) NSNumber * _Nullable lineMetrics;
/// Whether to generate ids for the geojson features. When enabled, the <code>feature.id</code> property will be auto assigned based on its index in the <code>features</code> array, over-writing any previous values.
@property (nonatomic, strong) NSNumber * _Nullable generateId;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>.
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TMBGeoJSONSourceType : NSInteger;
@class MBXFeature;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBGeoJSONSourceData")
@interface TMBGeoJSONSourceData : NSObject
@property (nonatomic, readonly) enum TMBGeoJSONSourceType type;
+ (TMBGeoJSONSourceData * _Nonnull)urlWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)stringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureWithFeature:(MBXFeature * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureCollectionWithFeatures:(NSArray<MBXFeature *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)geometryWithGeometry:(MBXGeometry * _Nonnull)geometry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Captures potential values of the <code>data</code> property of a GeoJSONSource
typedef SWIFT_ENUM(NSInteger, TMBGeoJSONSourceType, open) {
/// The <code>data</code> property can be an URL or inlined GeoJSON string.
  TMBGeoJSONSourceTypeString = 0,
/// The <code>data</code> property can be a feature
  TMBGeoJSONSourceTypeFeature = 1,
/// The <code>data</code> property can be a feature collection
  TMBGeoJSONSourceTypeFeatureCollection = 2,
/// The <code>data</code> property can be a geometry with no associated properties.
  TMBGeoJSONSourceTypeGeometry = 3,
/// Empty data to be used for initialization
  TMBGeoJSONSourceTypeEmpty = 4,
};

@protocol TMBGestureManagerDelegate;
@class TMBGestureOptions;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureManager")
@interface TMBGestureManager : NSObject
@property (nonatomic, weak) id <TMBGestureManagerDelegate> _Nullable delegate;
- (TMBGestureOptions * _Nonnull)gestureOptions SWIFT_WARN_UNUSED_RESULT;
/// The gesture recognizer for the pan gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull panGestureRecognizer;
/// The gesture recognizer for the “pinch to zoom” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pinchGestureRecognizer;
/// The gesture recognizer for the rotate gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull rotateGestureRecognizer;
/// The gesture recognizer for the pitch gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pitchGestureRecognizer;
/// The gesture recognizer for the “double tap to zoom in” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTapToZoomInGestureRecognizer;
/// The gesture recognizer for the “double touch to zoom out” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTouchToZoomOutGestureRecognizer;
/// The gesture recognizer for the quickZoom gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull quickZoomGestureRecognizer;
/// The gesture recognizer for the single tap gesture
/// note:
/// The single tap gesture recognizer is primarily used to route tap events to the
/// <code>*AnnotationManager</code>s. You can add a target-action pair to this gesture recognizer
/// to be notified when a single tap occurs on the map.
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull singleTapGestureRecognizer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBGestureType : NSInteger;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC25TMBGestureManagerDelegate_")
@protocol TMBGestureManagerDelegate
/// Informs the delegate that a gesture has begun.
- (void)gestureManagerWithDidBegin:(enum TMBGestureType)gestureType;
/// Informs the delegate that a gesture has ended and whether there will be additional animations after the gesture
/// has completed. Does not indicate whether gesture-based animations have completed.
- (void)gestureManagerWithDidEnd:(enum TMBGestureType)gestureType willAnimate:(BOOL)willAnimate;
/// Informs the delegate that animations triggered due to a gesture have ended.
- (void)gestureManagerWithDidEndAnimatingFor:(enum TMBGestureType)gestureType;
@end

enum TMBPanMode : NSInteger;

/// Configuration options for the built-in gestures
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureOptions")
@interface TMBGestureOptions : NSObject
/// Whether the single-touch pan gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL panEnabled;
/// Whether the pinch gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchEnabled;
/// Whether rotation gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL rotateEnabled;
/// Whether rotation is enabled during the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL simultaneousRotateAndPinchZoomEnabled;
/// Whether zoom is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchZoomEnabled;
/// Whether pan is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchPanEnabled;
/// Whether the pitch gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pitchEnabled;
/// Whether double tapping the map with one touch results in a zoom-in animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTapToZoomInEnabled;
/// Whether single tapping the map with two touches results in a zoom-out animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTouchToZoomOutEnabled;
/// Whether the quick zoom gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL quickZoomEnabled;
/// Configures the directions in which the map is allowed to move during a pan gesture.
/// Defaults to <code>PanMode.horizontalAndVertical</code>. Called <code>scrollMode</code> in
/// the Android SDK for consistency with platform conventions.
@property (nonatomic) enum TMBPanMode panMode;
/// A constant factor that determines how quickly pan deceleration animations happen.
/// Multiplied with the velocity vector once per millisecond during deceleration animations.
/// Defaults to <code>UIScrollView.DecelerationRate.normal.rawValue</code>
@property (nonatomic) CGFloat panDecelerationFactor;
/// By default, gestures rotate and zoom around the center of the gesture. Set this property to rotate and zoom around a fixed point instead.
/// This property will be ignored by the pinch gesture if <code>GestureOptions/pinchPanEnabled</code> is set to <code>true</code>.
@property (nonatomic) CGPoint focalPoint;
/// Initializes a <code>GestureOptions</code>.
/// \param panEnabled Whether the single-touch pan gesture is enabled.
///
/// \param pinchEnabled Whether the pinch gesture is enabled.
///
/// \param rotateEnabled Whether rotation gesture is enabled.
///
/// \param simultaneousRotateAndPinchZoomEnabled Whether rotation is enabled during the pinch gesture.
///
/// \param pinchZoomEnabled Whether zoom is enabled for the pinch gesture.
///
/// \param pinchPanEnabled Whether pan is enabled during the pinch gesture.
///
/// \param pitchEnabled Whether the pitch gesture is enabled.
///
/// \param doubleTapToZoomInEnabled Whether double tapping the map with one touch results in a zoom-in animation.
///
/// \param doubleTouchToZoomOutEnabled Whether single tapping the map with two touches results in a zoom-out animation.
///
/// \param quickZoomEnabled Whether the quick zoom gesture is enabled.
///
/// \param panMode The directions in which the map is allowed to move during a pan gesture.
///
/// \param panDecelerationFactor The constant factor that determines how quickly pan deceleration animations happen.
///
/// \param focalPoint The centerpoint for rotating and zooming the map.
///
- (nonnull instancetype)initWithPanEnabled:(BOOL)panEnabled pinchEnabled:(BOOL)pinchEnabled rotateEnabled:(BOOL)rotateEnabled simultaneousRotateAndPinchZoomEnabled:(BOOL)simultaneousRotateAndPinchZoomEnabled pinchZoomEnabled:(BOOL)pinchZoomEnabled pinchPanEnabled:(BOOL)pinchPanEnabled pitchEnabled:(BOOL)pitchEnabled doubleTapToZoomInEnabled:(BOOL)doubleTapToZoomInEnabled doubleTouchToZoomOutEnabled:(BOOL)doubleTouchToZoomOutEnabled quickZoomEnabled:(BOOL)quickZoomEnabled panMode:(enum TMBPanMode)panMode panDecelerationFactor:(CGFloat)panDecelerationFactor focalPoint:(CGPoint)focalPoint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBGestureType, open) {
/// The pan gesture
  TMBGestureTypePan = 0,
/// The pinch gesture
  TMBGestureTypePinch = 1,
/// The pitch gesture
  TMBGestureTypePitch = 2,
/// The double tap to zoom in gesture
  TMBGestureTypeDoubleTapToZoomIn = 3,
/// The double touch to zoom out gesture
  TMBGestureTypeDoubleTouchToZoomOut = 4,
/// The quick zoom gesture
  TMBGestureTypeQuickZoom = 5,
/// The single tap gesture
  TMBGestureTypeSingleTap = 6,
/// The rotation gesture
  TMBGestureTypeRotation = 7,
};

@class NSDate;
@class CLHeading;

/// The azimuth (orientation) of the user’s device, relative to true or magnetic north.
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBHeading")
@interface TMBHeading : NSObject
/// The heading direction (measured in degrees) relative to true or magnetic north.
/// When heading is created from CLHeading, this value resolves to <code>trueHeading</code> (priority, if valid)
/// or <code>magneticHeading</code>.
@property (nonatomic) CLLocationDirection direction;
/// The maximum deviation (measured in degrees) between the reported heading and the true geomagnetic heading.
@property (nonatomic) CLLocationDirection accuracy;
/// The time at which this heading was determined.
@property (nonatomic, copy) NSDate * _Nonnull timestamp;
/// Creates a heading.
- (nonnull instancetype)initWithDirection:(CLLocationDirection)direction accuracy:(CLLocationDirection)accuracy timestamp:(NSDate * _Nonnull)timestamp OBJC_DESIGNATED_INITIALIZER;
/// Creates a heading from CLHeading.
- (nonnull instancetype)initFrom:(CLHeading * _Nonnull)clHeading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Listens to <code>HeadingProvider</code>’s updates.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC18TMBHeadingObserver_")
@protocol TMBHeadingObserver
- (void)onHeadingUpdate:(TMBHeading * _Nonnull)heading;
@end


/// Provides heading data to drive the location puck.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC18TMBHeadingProvider_")
@protocol TMBHeadingProvider
/// Latest observed heading.
@property (nonatomic, readonly, strong) TMBHeading * _Nullable latestHeading;
/// Adds heading observer.
- (void)addWithHeadingObserver:(id <TMBHeadingObserver> _Nonnull)headingObserver;
/// Removes heading observer.
- (void)removeWithHeadingObserver:(id <TMBHeadingObserver> _Nonnull)headingObserver;
@end


/// A heatmap.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-heatmap">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBHeatmapLayer")
@interface TMBHeatmapLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Defines the color of each pixel based on its density value in a heatmap. Should be an expression that uses <code>["heatmap-density"]</code> as input.
@property (nonatomic, strong) TMBValue * _Nullable heatmapColor;
/// Similar to <code>heatmap-weight</code> but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.
@property (nonatomic, strong) TMBValue * _Nullable heatmapIntensity;
/// Transition options for <code>heatmapIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapIntensityTransition;
/// The global opacity at which the heatmap layer will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable heatmapOpacity;
/// Transition options for <code>heatmapOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapOpacityTransition;
/// Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. <code>queryRenderedFeatures</code> on heatmap layers will return points within this radius.
@property (nonatomic, strong) TMBValue * _Nullable heatmapRadius;
/// Transition options for <code>heatmapRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapRadiusTransition;
/// A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.
@property (nonatomic, strong) TMBValue * _Nullable heatmapWeight;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Direction of light source when map is rotated.
SWIFT_CLASS("_TtC13MapboxMapObjC30TMBHillshadeIlluminationAnchor")
@interface TMBHillshadeIlluminationAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The hillshade illumination is relative to the north direction.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull map;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The hillshade illumination is relative to the top of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull viewport;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-hillshade">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBHillshadeLayer")
@interface TMBHillshadeLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// The shading color used to accentuate rugged terrain like sharp cliffs and gorges.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeAccentColor;
/// Transition options for <code>hillshadeAccentColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeAccentColorTransition;
/// Intensity of the hillshade
@property (nonatomic, strong) TMBValue * _Nullable hillshadeExaggeration;
/// Transition options for <code>hillshadeExaggeration</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeExaggerationTransition;
/// The shading color of areas that faces towards the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeHighlightColor;
/// Transition options for <code>hillshadeHighlightColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeHighlightColorTransition;
/// Direction of light source when map is rotated.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationAnchor;
/// The direction of the light source used to generate the hillshading with 0 as the top of the viewport if <code>hillshade-illumination-anchor</code> is set to <code>viewport</code> and due north if <code>hillshade-illumination-anchor</code> is set to <code>map</code>.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationDirection;
/// The shading color of areas that face away from the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeShadowColor;
/// Transition options for <code>hillshadeShadowColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeShadowColorTransition;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Part of the icon placed closest to the anchor.
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBIconAnchor")
@interface TMBIconAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The center of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull center;)
+ (TMBIconAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull left;)
+ (TMBIconAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull right;)
+ (TMBIconAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull top;)
+ (TMBIconAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottom;)
+ (TMBIconAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topLeft;)
+ (TMBIconAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topRight;)
+ (TMBIconAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomLeft;)
+ (TMBIconAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomRight;)
+ (TMBIconAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Orientation of icon when map is pitched.
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBIconPitchAlignment")
@interface TMBIconPitchAlignment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The icon is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull map;)
+ (TMBIconPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The icon is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull viewport;)
+ (TMBIconPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link ICON_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconPitchAlignment * _Nonnull auto_;)
+ (TMBIconPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBIconRotationAlignment")
@interface TMBIconRotationAlignment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns icons east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns icon x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull map;)
+ (TMBIconRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull viewport;)
+ (TMBIconRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconRotationAlignment * _Nonnull auto_;)
+ (TMBIconRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Scales the icon to fit around the associated text.
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBIconTextFit")
@interface TMBIconTextFit : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The icon is displayed at its intrinsic aspect ratio.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull none;)
+ (TMBIconTextFit * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the x-dimension to fit the width of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull width;)
+ (TMBIconTextFit * _Nonnull)width SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the y-dimension to fit the height of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull height;)
+ (TMBIconTextFit * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in both x- and y-dimensions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull both;)
+ (TMBIconTextFit * _Nonnull)both SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>icon-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBIconTranslateAnchor")
@interface TMBIconTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Icons are translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull map;)
+ (TMBIconTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Icons are translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull viewport;)
+ (TMBIconTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An image data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#image">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBImageSource")
@interface TMBImageSource : NSObject <TMBSource>
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// URL that points to an image.
@property (nonatomic, copy) NSString * _Nullable url;
/// Corners of image specified in longitude, latitude pairs. Note: When using globe projection, the image will be centered at the North or South Pole in the respective hemisphere if the average latitude value exceeds 85 degrees or falls below -85 degrees.
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable coordinates;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Information about a layer
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLayerInfo")
@interface TMBLayerInfo : NSObject
/// The identifier of the layer
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the layer
@property (nonatomic, strong) TMBLayerType * _Nonnull type;
/// Create a <code>LayerInfo</code> value
/// \param id A layer ID
///
/// \param type A layer type
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(TMBLayerType * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TMBLayerPositionType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC16TMBLayerPosition")
@interface TMBLayerPosition : NSObject
@property (nonatomic, readonly, strong) id _Nonnull arg;
@property (nonatomic, readonly) enum TMBLayerPositionType type;
- (nonnull instancetype)init:(enum TMBLayerPositionType)type arg:(id _Nonnull)arg OBJC_DESIGNATED_INITIALIZER;
+ (TMBLayerPosition * _Nonnull)atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)belowLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)aboveLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBLayerPositionType, open) {
  TMBLayerPositionTypeAt = 0,
  TMBLayerPositionTypeAbove = 1,
  TMBLayerPositionTypeBelow = 2,
  TMBLayerPositionTypeDefault = 3,
};


/// Struct of supported Layer rendering types
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLayerType")
@interface TMBLayerType : NSObject
/// A filled polygon with an optional stroked border.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull fill;)
+ (TMBLayerType * _Nonnull)fill SWIFT_WARN_UNUSED_RESULT;
/// A stroked line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull line;)
+ (TMBLayerType * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// An icon or a text label.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull symbol;)
+ (TMBLayerType * _Nonnull)symbol SWIFT_WARN_UNUSED_RESULT;
/// A filled circle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull circle;)
+ (TMBLayerType * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
/// A heatmap.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull heatmap;)
+ (TMBLayerType * _Nonnull)heatmap SWIFT_WARN_UNUSED_RESULT;
/// An extruded (3D) polygon.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull fillExtrusion;)
+ (TMBLayerType * _Nonnull)fillExtrusion SWIFT_WARN_UNUSED_RESULT;
/// Raster map textures such as satellite imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull raster;)
+ (TMBLayerType * _Nonnull)raster SWIFT_WARN_UNUSED_RESULT;
/// Client-side hillshading visualization based on DEM data.
/// Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull hillshade;)
+ (TMBLayerType * _Nonnull)hillshade SWIFT_WARN_UNUSED_RESULT;
/// The background color or pattern of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull background;)
+ (TMBLayerType * _Nonnull)background SWIFT_WARN_UNUSED_RESULT;
/// Layer representing the location indicator
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull locationIndicator;)
+ (TMBLayerType * _Nonnull)locationIndicator SWIFT_WARN_UNUSED_RESULT;
/// Layer representing the sky
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull sky;)
+ (TMBLayerType * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
/// Layer with custom rendering implementation (<code>CustomLayerHost</code>)
/// seealso:
/// <code>CustomLayer</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLayerType * _Nonnull custom;)
+ (TMBLayerType * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Information about a light
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLightInfo")
@interface TMBLightInfo : NSObject
/// The identifier of the light
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the light
@property (nonatomic, strong) TMBLightType * _Nonnull type;
/// Create a <code>LightInfo</code> value
/// \param id A light ID
///
/// \param type A light type
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(TMBLightType * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Supported light types
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLightType")
@interface TMBLightType : NSObject
/// A global directional light.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLightType * _Nonnull flat;)
+ (TMBLightType * _Nonnull)flat SWIFT_WARN_UNUSED_RESULT;
/// An indirect type of light.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLightType * _Nonnull ambient;)
+ (TMBLightType * _Nonnull)ambient SWIFT_WARN_UNUSED_RESULT;
/// A type of light that has a direction.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLightType * _Nonnull directional;)
+ (TMBLightType * _Nonnull)directional SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The display of line endings.
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBLineCap")
@interface TMBLineCap : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// A cap with a squared-off end which is drawn to the exact endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull butt;)
+ (TMBLineCap * _Nonnull)butt SWIFT_WARN_UNUSED_RESULT;
/// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull round;)
+ (TMBLineCap * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull square;)
+ (TMBLineCap * _Nonnull)square SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The display of lines when joining.
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBLineJoin")
@interface TMBLineJoin : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull bevel;)
+ (TMBLineJoin * _Nonnull)bevel SWIFT_WARN_UNUSED_RESULT;
/// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull round;)
+ (TMBLineJoin * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull miter;)
+ (TMBLineJoin * _Nonnull)miter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A stroked line.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-line">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLineLayer")
@interface TMBLineLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// The display of line endings.
@property (nonatomic, strong) TMBValue * _Nullable lineCap;
/// The display of lines when joining.
@property (nonatomic, strong) TMBValue * _Nullable lineJoin;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) TMBValue * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) TMBValue * _Nullable lineRoundLimit;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) TMBValue * _Nullable lineBlur;
/// Transition options for <code>lineBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineBlurTransition;
/// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
@property (nonatomic, strong) TMBValue * _Nullable lineBorderColor;
/// Transition options for <code>lineBorderColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineBorderColorTransition;
/// The width of the line border. A value of zero means no border.
@property (nonatomic, strong) TMBValue * _Nullable lineBorderWidth;
/// Transition options for <code>lineBorderWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineBorderWidthTransition;
/// The color with which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineColor;
/// Transition options for <code>lineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineColorTransition;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable lineDasharray;
/// Decrease line layer opacity based on occlusion from 3D objects. Value 0 disables occlusion, value 1 means fully occluded.
@property (nonatomic, strong) TMBValue * _Nullable lineDepthOcclusionFactor;
/// Transition options for <code>lineDepthOcclusionFactor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineDepthOcclusionFactorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable lineEmissiveStrength;
/// Transition options for <code>lineEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineEmissiveStrengthTransition;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) TMBValue * _Nullable lineGapWidth;
/// Transition options for <code>lineGapWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineGapWidthTransition;
/// A gradient used to color a line feature at various distances along its length. Defined using a <code>step</code> or <code>interpolate</code> expression which outputs a color for each corresponding <code>line-progress</code> input value. <code>line-progress</code> is a percentage of the line feature’s total length as measured on the webmercator projected coordinate plane (a <code>number</code> between <code>0</code> and <code>1</code>). Can only be used with GeoJSON sources that specify <code>"lineMetrics": true</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineGradient;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) TMBValue * _Nullable lineOffset;
/// Transition options for <code>lineOffset</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOffsetTransition;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineOpacity;
/// Transition options for <code>lineOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOpacityTransition;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable linePattern;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslate;
/// Transition options for <code>lineTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineTranslateTransition;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, strong) TMBValue * _Nullable lineTrimOffset;
/// Stroke thickness.
@property (nonatomic, strong) TMBValue * _Nullable lineWidth;
/// Transition options for <code>lineWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineWidthTransition;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <a href="https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4">LineString geometry</a> is a collection of two or more positions, each position connected to the next position linearly.
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBLineString")
@interface TMBLineString : NSObject
/// The positions at which the line string is located.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull coordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>line-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBLineTranslateAnchor")
@interface TMBLineTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The line is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineTranslateAnchor * _Nonnull map;)
+ (TMBLineTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The line is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineTranslateAnchor * _Nonnull viewport;)
+ (TMBLineTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Location Indicator layer.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-location-indicator">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBLocationIndicatorLayer")
@interface TMBLocationIndicatorLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Name of image in sprite to use as the middle of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearingImage;
/// Name of image in sprite to use as the background of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable shadowImage;
/// Name of image in sprite to use as the top of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable topImage;
/// The accuracy, in meters, of the position source used to retrieve the position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadius;
/// Transition options for <code>accuracyRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusTransition;
/// The color for drawing the accuracy radius border. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusBorderColor;
/// Transition options for <code>accuracyRadiusBorderColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusBorderColorTransition;
/// The color for drawing the accuracy radius, as a circle. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusColor;
/// Transition options for <code>accuracyRadiusColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusColorTransition;
/// The bearing of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearing;
/// Transition options for <code>bearing</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingTransition;
/// The size of the bearing image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable bearingImageSize;
/// Transition options for <code>bearingImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingImageSizeTransition;
/// The color of the circle emphasizing the indicator. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleColor;
/// Transition options for <code>emphasisCircleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleColorTransition;
/// The radius, in pixel, of the circle emphasizing the indicator, drawn between the accuracy radius and the indicator shadow.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleRadius;
/// Transition options for <code>emphasisCircleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleRadiusTransition;
/// The displacement off the center of the top image and the shadow image when the pitch of the map is greater than 0. This helps producing a three-dimensional appearence.
@property (nonatomic, strong) TMBValue * _Nullable imagePitchDisplacement;
/// An array of [latitude, longitude, altitude] position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable location;
/// Transition options for <code>location</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationTransition;
/// The opacity of the entire location indicator layer.
@property (nonatomic, strong) TMBValue * _Nullable locationIndicatorOpacity;
/// Transition options for <code>locationIndicatorOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationIndicatorOpacityTransition;
/// The amount of the perspective compensation, between 0 and 1. A value of 1 produces a location indicator of constant width across the screen. A value of 0 makes it scale naturally according to the viewing projection.
@property (nonatomic, strong) TMBValue * _Nullable perspectiveCompensation;
/// The size of the shadow image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable shadowImageSize;
/// Transition options for <code>shadowImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable shadowImageSizeTransition;
/// The size of the top image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable topImageSize;
/// Transition options for <code>topImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable topImageSizeTransition;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBPuckRenderingData;
@protocol MBXLocationProvider;

/// An object responsible for managing user location Puck.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationManager")
@interface TMBLocationManager : NSObject
/// A stream of location change events that drive the puck.
- (TMBCancelable * _Nonnull)onLocationChangeWithHandler:(void (^ _Nonnull)(NSArray<MBXLocation *> * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// A stream of heading update events that drive the puck.
/// Heading is used when puck uses <code>PuckBearing/heading</code> as a bearing type.
- (TMBCancelable * _Nonnull)onHeadingChangeWithHandler:(void (^ _Nonnull)(TMBHeading * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// A stream of puck render events.
/// A subscriber will get the accurate (interpolated) data used to render puck,
/// as opposed to the <code>onLocationChange</code> and <code>onHeadingChange</code> that emit non-interpolated source data.
/// Observe this stream to adjust any elements that connected the actual puck position, such as route line, annotations, camera position,
/// or you can render a custom puck.
- (TMBCancelable * _Nonnull)onPuckRenderWithHandler:(void (^ _Nonnull)(TMBPuckRenderingData * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Sets the custom providers that supply puck with the location data.
/// \param locationProvider Signal that drives puck location.
///
/// \param headingProvider Signal that drives the puck’s bearing when it’s configured as <code>PuckBearing/heading</code>.
///
- (void)overrideWithLocationHandler:(void (^ _Nonnull)(NSArray<MBXLocation *> * _Nonnull))locationHandler headingHandler:(void (^ _Nullable)(TMBHeading * _Nonnull))headingHandler;
/// Sets the custom providers that supply puck with the location data.
/// \param locationProvider Provider that drives puck location.
///
/// \param headingProvider Provider that drives the puck’s bearing when it’s configured as <code>PuckBearing/heading</code>.
///
- (void)overrideWithLocationProvider:(id <MBXLocationProvider> _Nonnull)locationProvider headingProvider:(id <TMBHeadingProvider> _Nullable)headingProvider;
/// Sets the custom provider that supply puck with the location and heading data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     provider: An object that provides both location and heading data, such as <code>AppleLocationProvider</code>.
///   </li>
/// </ul>
- (void)overrideWithProvider:(id <MBXLocationProvider, TMBHeadingProvider> _Nonnull)provider;
/// Represents the latest location received from the location provider.
/// note:
/// The value is lazy and gets updated only when there is at least one consumer of location data,
/// such as visible location puck or <code>LocationManager/onLocationChange</code> observer.
/// In general, if you need to know the user location it’s recommended to observe
/// the <code>LocationManager/onLocationChange</code> instead.
@property (nonatomic, readonly, strong) MBXLocation * _Nullable latestLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol TMBPuckTypeConfiguration;
enum TMBPuckBearing : NSInteger;

/// A struct to configure a <code>LocationManager</code>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationOptions")
@interface TMBLocationOptions : NSObject
/// Sets the type of puck that should be used
@property (nonatomic, strong) id <TMBPuckTypeConfiguration> _Nullable puckType;
/// Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
/// The default value is <code>PuckBearing.heading</code>.
@property (nonatomic) enum TMBPuckBearing puckBearing;
/// Whether the puck rotates to track the bearing source.
/// The default value is <code>false</code>.
@property (nonatomic) BOOL puckBearingEnabled;
/// Initializes a <code>LocationOptions</code>.
/// \param puckType Sets the type of puck that should be used.
///
/// \param puckBearing Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
///
/// \param puckBearingEnabled Whether the puck rotates to track the bearing source.
///
- (nonnull instancetype)initWithPuckType:(id <TMBPuckTypeConfiguration> _Nullable)puckType puckBearing:(enum TMBPuckBearing)puckBearing puckBearingEnabled:(BOOL)puckBearingEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Used to configure position, margin, and visibility for the map’s logo view.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLogoViewOptions")
@interface TMBLogoViewOptions : NSObject
/// The position of the logo view.
/// The default value for this property is <code>.bottomLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the logo view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// Initializes a <code>LogoViewOptions</code>.
/// \param position The position of the logo view.
///
/// \param margins The margins of the logo view.
///
- (nonnull instancetype)initWithPosition:(enum TMBOrnamentPosition)position margins:(CGPoint)margins OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A structure that defines additional information about map content gesture
SWIFT_CLASS("_TtC13MapboxMapObjC27TMBMapContentGestureContext")
@interface TMBMapContentGestureContext : NSObject
/// The location of gesture in Map view bounds.
@property (nonatomic, readonly) CGPoint point;
/// Geographical coordinate of the map gesture.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Options for enabling debugging features in a map.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBMapViewDebugOptions")
@interface TMBMapViewDebugOptions : NSObject
/// Edges of tile boundaries are shown as thick, red lines to help diagnose
/// tile clipping issues.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull tileBorders;)
+ (TMBMapViewDebugOptions * _Nonnull)tileBorders SWIFT_WARN_UNUSED_RESULT;
/// Each tile shows its tile coordinate (x/y/z) in the upper-left corner.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull parseStatus;)
+ (TMBMapViewDebugOptions * _Nonnull)parseStatus SWIFT_WARN_UNUSED_RESULT;
/// Each tile shows a timestamp indicating when it was loaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull timestamps;)
+ (TMBMapViewDebugOptions * _Nonnull)timestamps SWIFT_WARN_UNUSED_RESULT;
/// Edges of glyphs and symbols are shown as faint, green lines to help
/// diagnose collision and label placement issues.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull collision;)
+ (TMBMapViewDebugOptions * _Nonnull)collision SWIFT_WARN_UNUSED_RESULT;
/// Each drawing operation is replaced by a translucent fill. Overlapping
/// drawing operations appear more prominent to help diagnose overdrawing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull overdraw;)
+ (TMBMapViewDebugOptions * _Nonnull)overdraw SWIFT_WARN_UNUSED_RESULT;
/// The stencil buffer is shown instead of the color buffer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull stencilClip;)
+ (TMBMapViewDebugOptions * _Nonnull)stencilClip SWIFT_WARN_UNUSED_RESULT;
/// The depth buffer is shown instead of the color buffer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull depthBuffer;)
+ (TMBMapViewDebugOptions * _Nonnull)depthBuffer SWIFT_WARN_UNUSED_RESULT;
/// Show 3D model bounding boxes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull modelBounds;)
+ (TMBMapViewDebugOptions * _Nonnull)modelBounds SWIFT_WARN_UNUSED_RESULT;
/// Each tile shows its local lighting conditions in the upper-left corner. (If <code>lights</code> properties are used, otherwise they show zero.)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull light;)
+ (TMBMapViewDebugOptions * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Show a debug UIView with information about the CameraState
/// including lat, long, zoom, pitch, & bearing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull camera;)
+ (TMBMapViewDebugOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Draws camera padding frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBMapViewDebugOptions * _Nonnull padding;)
+ (TMBMapViewDebugOptions * _Nonnull)padding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBStyleURI;
@class MBMTransitionOptions;
@class MBMStyleObjectInfo;
@class MBMStylePropertyValue;
@protocol MBMCustomLayerHost;
@class TMBSourceInfo;
@class MBMImageStretches;
@class MBMImageContent;
@class TMBTerrain;
@class MBMCustomGeometrySourceOptions;
@class MBMCanonicalTileID;

/// Style manager is a base class for <code>MapboxMap</code> and <code>Snapshotter</code> that provides provides methods to manipulate Map Style at runtime.
/// Use style manager to dynamically modify the map style. You can manage layers, sources, lights, terrain, and many more.
/// Typically, you don’t create the style manager instances yourself. Instead you receive instance of this class from <code>MapView</code> as the <code>MapView/mapboxMap</code> property, or create an instance of <code>Snapshotter</code>.
/// To load the style use <code>styleURI</code> or <code>styleJSON</code> or new experimental <code>mapStyle</code> property. The latter
/// allows not only load the style, but also modify the style configuration, for more information, see <code>MapStyle</code>.
/// important:
/// <code>StyleManager</code> should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBStyleManager")
@interface TMBStyleManager : NSObject
/// Adds a <code>layer</code> to the map
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the given <code>layer</code> at the given <code>position</code>.
- (void)addLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a  persistent <code>layer</code> to the map.
/// Persistent layers are valid across <code>style</code> changes.
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the persistent layer.
- (void)addPersistentLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Moves a <code>layer</code> to a new layer position in the style.
/// \param layerId The layer to move
///
/// \param position Position to move the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> on failure, or <code>NSError</code> with a _domain of “com.mapbox.bindgen”
- (void)moveLayerWithId:(NSString * _Nonnull)id to:(TMBLayerPosition * _Nonnull)position completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets a <code>layer</code> from the map.
/// This function is useful if you do not know the concrete type of the layer
/// you are fetching, or don’t need to know for your situation.
/// \param layerID The id of the layer to be fetched
///
///
/// throws:
/// Type conversion errors
///
/// returns:
/// The fully formed <code>layer</code> object.
- (void)layerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(id <TMBLayer> _Nullable, NSError * _Nullable))completion;
/// Adds a <code>source</code> to the map
/// \param source The source to add to the map.
///
/// \param identifier A unique source identifier.
///
/// \param dataId An optional data ID to filter <code>MapboxMap/onSourceDataLoaded</code> to only the specified data source. Applies only to <code>GeoJSONSource</code>s.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the <code>source</code>.
- (void)addSource:(id <TMBSource> _Nonnull)source dataId:(NSString * _Nullable)dataId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves a <code>source</code> from the map
/// This function is useful if you do not know the concrete type of the source
/// you are fetching, or don’t need to know for your situation.
/// \param id The id of the <code>source</code> to retrieve.
///
///
/// throws:
/// <code>TypeConversionError</code> if there is a problem decoding the source of given <code>id</code>.
///
/// returns:
/// The fully formed <code>source</code> object.
- (void)sourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Updates the <code>GeoJSONSource/data</code> property of a given <code>GeoJSONSource</code> with a new value.
/// The update will be scheduled and applied on a GeoJSON serialization queue.
/// In order to capture events when actual data is drawn on the map please refer to Events API
/// and listen to <code>onSourceDataLoaded</code> (optionally pass the <code>dataId</code> parameter to filter the events)
/// or <code>onMapLoadingError</code> with <code>type = metadata</code> if data parsing error has occurred.
/// attention:
/// This method is only effective with sources of <code>GeoJSONSource</code>
/// type, and cannot be used to update other source types.
/// \param id The identifier representing the GeoJSON source.
///
/// \param data The new data to be associated with the source.
///
/// \param dataId An optional data ID to filter <code>MapboxMap/onSourceDataLoaded</code> to only the specified data source.
///
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id data:(TMBGeoJSONSourceData * _Nonnull)data dataId:(NSString * _Nullable)dataId;
/// Add additional features to a GeoJSON style source.
/// The add operation will be scheduled and applied on a GeoJSON serialization queue.
/// In order to capture events when actual data is drawn on the map please refer to Events API
/// and listen to <code>onSourceDataLoaded</code> (optionally pass the <code>dataId</code> parameter to filter the events)
/// or <code>onMapLoadingError</code> with <code>type = metadata</code> if data parsing error has occurred.
/// Partially updating a GeoJSON source is not compatible with using shared cache and generated IDs.
/// It is important to ensure that every feature in the GeoJSON style source, as well as the newly added
/// feature, has a unique ID (or a unique promote ID if in use). Failure to provide unique IDs will result
/// in a <code>map-loading-error</code>.
/// note:
/// The method allows the user to provide a data ID, which will be returned as the <code>dataId</code> parameter in the
/// <code>source-data-loaded</code> event. However, it’s important to note that multiple partial updates can be queued
/// for the same GeoJSON source when ongoing source parsing is taking place. In these cases, the partial
/// updates will be applied to the source in batches. Only the data ID provided in the most recent call within
/// each batch will be included in the <code>source-data-loaded</code> event. If no data ID is provided in the most recent
/// call, the data ID in the <code>source-data-loaded</code>event will be null.
/// \param sourceId The identifier of the style source.
///
/// \param features An array of GeoJSON features to be added to the source.
///
/// \param dataId An arbitrary string used to track the given GeoJSON data.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding features to the source.
- (void)addGeoJSONSourceFeaturesForSourceId:(NSString * _Nonnull)sourceId features:(NSArray<MBXFeature *> * _Nonnull)features dataId:(NSString * _Nullable)dataId;
/// Update existing features in a GeoJSON style source.
/// The update operation will be scheduled and applied on a GeoJSON serialization queue.
/// In order to capture events when actual data is drawn on the map please refer to Events API
/// and listen to <code>onSourceDataLoaded</code> (optionally pass the <code>dataId</code> parameter to filter the events)
/// or <code>onMapLoadingError</code> with <code>type = metadata</code> if data parsing error has occurred.
/// Partially updating a GeoJSON source is not compatible with using shared cache and generated IDs.
/// It is important to ensure that every feature in the GeoJSON style source, as well as the newly added
/// feature, has a unique ID (or a unique promote ID if in use). Failure to provide unique IDs will result
/// in a <code>map-loading-error</code>.
/// note:
/// The method allows the user to provide a data ID, which will be returned as the <code>dataId</code> parameter in the
/// <code>source-data-loaded</code> event. However, it’s important to note that multiple partial updates can be queued
/// for the same GeoJSON source when ongoing source parsing is taking place. In these cases, the partial
/// updates will be applied to the source in batches. Only the data ID provided in the most recent call within
/// each batch will be included in the <code>source-data-loaded</code> event. If no data ID is provided in the most recent
/// call, the data ID in the <code>source-data-loaded</code>event will be null.
/// \param sourceId A style source identifier.
///
/// \param features The GeoJSON features to be updated in the source.
///
/// \param dataId An arbitrary string used to track the given GeoJSON data.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem updating features in the source.
- (void)updateGeoJSONSourceFeaturesForSourceId:(NSString * _Nonnull)sourceId features:(NSArray<MBXFeature *> * _Nonnull)features dataId:(NSString * _Nullable)dataId;
/// Remove features from a GeoJSON style source.
/// The remove operation will be scheduled and applied on a GeoJSON serialization queue.
/// In order to capture events when actual data is drawn on the map please refer to Events API
/// and listen to <code>onSourceDataLoaded</code> (optionally pass the <code>dataId</code> parameter to filter the events)
/// or <code>onMapLoadingError</code> with <code>type = metadata</code> if an error has occurred.
/// Partially updating a GeoJSON source is not compatible with using shared cache and generated IDs.
/// It is important to ensure that every feature in the GeoJSON style source, as well as the newly added
/// feature, has a unique ID (or a unique promote ID if in use). Failure to provide unique IDs will result
/// in a <code>map-loading-error</code>.
/// note:
/// The method allows the user to provide a data ID, which will be returned as the <code>dataId</code> parameter in the
/// <code>source-data-loaded</code> event. However, it’s important to note that multiple partial updates can be queued
/// for the same GeoJSON source when ongoing source parsing is taking place. In these cases, the partial
/// updates will be applied to the source in batches. Only the data ID provided in the most recent call within
/// each batch will be included in the <code>source-data-loaded</code> event. If no data ID is provided in the most recent
/// call, the data ID in the <code>source-data-loaded</code>event will be null.
/// \param sourceId A style source identifier.
///
/// \param featureIds The Ids of the features that need to be removed from the source.
///
/// \param dataId An arbitrary string used to track the given GeoJSON data.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem removing features from the source.
- (void)removeGeoJSONSourceFeaturesForSourceId:(NSString * _Nonnull)sourceId featureIds:(NSArray<NSString *> * _Nonnull)featureIds dataId:(NSString * _Nullable)dataId;
/// <code>true</code> if and only if the style JSON contents, the style specified sprite,
/// and sources are all loaded, otherwise returns <code>false</code>.
@property (nonatomic, readonly) BOOL isStyleLoaded;
/// Get or set the style URI
/// Setting a new style is asynchronous. In order to get the result of this
/// operation, listen to <code>MapEvents.styleDataLoaded</code>, <code>MapEvents.styleLoaded</code>.
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, strong) TMBStyleURI * _Nullable styleURI;
/// Get or set the style via a JSON serialization string
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, copy) NSString * _Nonnull styleJSON;
/// The map <code>style</code>’s default camera, if any, or a default camera otherwise.
/// The map <code>style</code> default camera is defined as follows:
/// <ul>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-center">center</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-zoom">zoom</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-bearing">bearing</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-pitch">pitch</a>
///   </li>
/// </ul>
/// The <code>style</code> default camera is re-evaluated when a new <code>style</code> is loaded. Values default to 0.0 if they are not defined in the <code>style</code>.
@property (nonatomic, readonly, strong) TMBCameraOptions * _Nonnull styleDefaultCamera;
/// Get or set the map <code>style</code>’s transition options.
/// By default, the style parser will attempt to read the style default
/// transition, if any, falling back to a 0.3 s transition otherwise.
/// Overridden transitions are reset once a new style has been loaded.
/// To customize the transition used when switching styles, set this
/// property after <code>MapEvents.Event.styleDataLoaded</code> where
/// <code>payload type == "style"</code> and before
/// <code>MapEvents.Event.styleDataLoaded</code> where <code>payload type == "sprite"</code>
/// and where <code>payload type == "sources"</code>.
/// seealso:
/// <code>MapboxMap/onNext(event:handler:)</code>
@property (nonatomic, strong) MBMTransitionOptions * _Nonnull styleTransition;
/// Returns the list containing information about existing style import objects.
@property (nonatomic, readonly, copy) NSArray<MBMStyleObjectInfo *> * _Nonnull styleImports;
/// Removes an existing style import.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import to remove.
///   </li>
///   <li>
///     An error describing why the operation was unsuccessful.
///   </li>
/// </ul>
///
/// throws:
///
- (void)removeStyleImportFor:(NSString * _Nonnull)importId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the style import schema.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import.
///   </li>
///   <li>
///     The style import schema, containing the default configurations for the style import,
///     or a string describing an error if the operation was not successful.
///   </li>
///   <li>
///     A StyleError or decoding error if the operation was not successful.
///   </li>
/// </ul>
///
/// throws:
///
///
/// returns:
///
- (void)getStyleImportSchemaFor:(NSString * _Nonnull)importId completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
/// Gets style import config.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import.
///   </li>
///   <li>
///     The style import configuration or a string describing an error if the operation was not successful.
///   </li>
/// </ul>
///
/// returns:
///
- (void)getStyleImportConfigPropertiesFor:(NSString * _Nonnull)importId completion:(void (^ _Nullable)(NSDictionary<NSString *, MBMStylePropertyValue *> * _Nullable, NSError * _Nullable))completion;
/// Gets the value of style import config.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import.
///   </li>
///   <li>
///     config: The style import config name.
///   </li>
///   <li>
///     The style import configuration or a string describing an error if the operation was not successful.
///   </li>
/// </ul>
///
/// returns:
///
- (void)getStyleImportConfigPropertyFor:(NSString * _Nonnull)importId config:(NSString * _Nonnull)config completion:(void (^ _Nullable)(MBMStylePropertyValue * _Nullable, NSError * _Nullable))completion;
/// Sets style import config.
/// This method can be used to perform batch update for a style import configurations.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import.
///   </li>
///   <li>
///     configs: A map of style import configurations.
///   </li>
///   <li>
///     A string describing an error if the operation was not successful.
///   </li>
/// </ul>
///
/// throws:
///
- (void)setStyleImportConfigPropertiesFor:(NSString * _Nonnull)importId configs:(NSDictionary<NSString *, id> * _Nonnull)configs completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to a style import config.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     importId: Identifier of the style import.
///   </li>
///   <li>
///     config: The style import config name.
///   </li>
///   <li>
///     value: The style import config value.
///   </li>
///   <li>
///     A string describing an error if the operation was not successful.
///   </li>
/// </ul>
///
/// throws:
///
- (void)setStyleImportConfigPropertyFor:(NSString * _Nonnull)importId config:(NSString * _Nonnull)config value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style layer given its JSON properties
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param properties A JSON dictionary of style layer properties.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addLayerWith:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new persistent style layer given its JSON properties
/// Persistent style layers remain valid across style reloads.
/// \param properties A JSON dictionary of style layer properties
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful
- (void)addPersistentLayerWith:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Returns <code>true</code> if the id passed in is associated to a persistent layer
/// \param id The layer identifier to test
///
- (void)isPersistentLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Adds a new persistent style custom layer.
/// Persistent style layers are valid across style reloads.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addPersistentCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style custom layer.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style layer
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Identifier of the style layer to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style layer exists.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Style layer identifier.
///
///
/// returns:
/// <code>true</code> if the given style layer exists, <code>false</code> otherwise.
- (BOOL)layerExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style layers’ identifiers and types
@property (nonatomic, readonly, copy) NSArray<TMBLayerInfo *> * _Nonnull allLayerIdentifiers;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (id _Nonnull)layerPropertyValueFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (MBMStylePropertyValue * _Nonnull)layerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a JSON value to a style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
/// \param value Style layer property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style layer property.
/// \param layerType Style layer type.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The default value of the property for the layers with type layerType.
- (MBMStylePropertyValue * _Nonnull)layerPropertyDefaultValueFor:(TMBLayerType * _Nonnull)layerType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the properties for a style layer.
/// \param layerId layer id.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)layerPropertiesFor:(NSString * _Nonnull)layerId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style layer properties.
/// This method can be used to perform batch update for a style layer properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/">format for a corresponding layer type</a>.
/// Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#id">layer identifier</a>
/// and/or <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#type">layer type</a>
/// is not allowed.
/// \param layerId Style layer identifier.
///
/// \param properties JSON dictionary representing the updated layer properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertiesFor:(NSString * _Nonnull)layerId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources
///   </li>
/// </ul>
/// \param id An identifier for the style source.
///
/// \param properties A JSON dictionary of style source properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style source.
/// \param id Identifier of the style source to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeSourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style source exists.
/// \param id Style source identifier.
///
///
/// returns:
/// <code>true</code> if the given source exists, <code>false</code> otherwise.
- (BOOL)sourceExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style sources’ identifiers and types.
@property (nonatomic, readonly, copy) NSArray<TMBSourceInfo *> * _Nonnull allSourceIdentifiers;
/// Gets the value of style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
///
/// returns:
/// The value of the property in the source with sourceId.
- (MBMStylePropertyValue * _Nonnull)sourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a value to a style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
/// \param value Style source property value (JSON value)
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets style source properties.
/// \param sourceId Style source identifier
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)sourcePropertiesFor:(NSString * _Nonnull)sourceId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style source properties.
/// This method can be used to perform batch update for a style source properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/">format</a> for a
/// corresponding source type. Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#type">source type</a>
/// is not allowed.
/// \param sourceId Style source identifier
///
/// \param properties A JSON dictionary of Style source properties
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertiesFor:(NSString * _Nonnull)sourceId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style source property.
/// \param sourceType Style source type.
///
/// \param property Style source property name.
///
///
/// returns:
///
/// The default value for the named property for the sources with type sourceType.
- (MBMStylePropertyValue * _Nonnull)sourcePropertyDefaultValueFor:(NSString * _Nonnull)sourceType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Updates the image of an image style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image
///   </li>
/// </ul>
/// \param id Style source identifier.
///
/// \param image UIImage
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)updateImageSourceWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// This API can also be used for
/// updating an image. If the image id was already added, it gets replaced
/// by the new image.
/// The image can be used in
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-image"><code>icon-image</code></a>,
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-fill-fill-pattern"><code>fill-pattern</code></a>, and
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-line-line-pattern"><code>line-pattern</code></a>.
/// For more information on how <code>stretchX</code> and <code>stretchY</code> parameters affect image stretching
/// see <a href="https://docs.mapbox.com/mapbox-gl-js/example/add-image-stretchable">this Mapbox GL-JS example</a>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param stretchX An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched horizontally.
///
/// \param stretchY An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched vertically.
///
/// \param content An array of four numbers, with the first two specifying the
/// left, top corner, and the last two specifying the right, bottom
/// corner. If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf stretchX:(NSArray<MBMImageStretches *> * _Nonnull)stretchX stretchY:(NSArray<MBMImageStretches *> * _Nonnull)stretchY content:(MBMImageContent * _Nullable)content completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// If the image has non-zero <code>UIImage.capInsets</code> it will be stretched accordingly,
/// regardless of the value in <code>UIImage.resizingMode</code>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param contentInsets The distances the edges of content are inset from the image rectangle.
/// If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an image from the style.
/// \param id ID of the image to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether an image exists.
/// \param id The identifier of the image.
///
///
/// returns:
/// <code>true</code> if the given image exists, <code>false</code> otherwise.
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Get an image from the style.
/// \param id ID of the image.
///
///
/// returns:
/// UIImage representing the data associated with the given ID,
/// or nil if no image is associated with that ID.
- (UIImage * _Nullable)imageWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style lights’ identifiers and types
@property (nonatomic, readonly, copy) NSArray<TMBLightInfo *> * _Nonnull allLightIdentifiers;
/// Gets the value of a style light property.
/// \param light The unique identifier of the style light in lights list.
///
/// \param property The style light property name.
///
- (id _Nonnull)lightPropertyFor:(NSString * _Nonnull)lightId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Set global directional lightning.
/// \param flatLight The flat light source.
///
- (void)setLights:(TMBFlatLight * _Nonnull)flatLight completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set dynamic lightning.
/// \param ambientLight The ambient light source.
///
/// \param directionalLight The directional light source.
///
- (void)setLightsWithAmbient:(TMBAmbientLight * _Nonnull)ambientLight directional:(TMBDirectionalLight * _Nonnull)directionalLight completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the value of a style light property in lights list.
/// \param id The unique identifier of the style light in lights list.
///
/// \param property The style light property name.
///
/// \param value The style light property value.
///
///
/// throws:
/// An error describing why the operation is unsuccessful.
- (void)setLightPropertyFor:(NSString * _Nonnull)lightId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a terrain on the style
/// \param terrain The <code>Terrain</code> that should be rendered
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrain:(TMBTerrain * _Nonnull)terrain completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes terrain from style if it was set.
- (void)removeTerrain;
/// Sets the style global terrain source properties.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#terrain
///   </li>
/// </ul>
/// \param properties A dictionary of style terrain properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to the named style terrain property.
/// \param property Style terrain property name.
///
/// \param value Style terrain property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (id _Nonnull)terrainPropertyValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (MBMStylePropertyValue * _Nonnull)terrainProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Set the atmosphere of the style
/// \param atmosphere <code>Atmosphere</code> object describing the fog, space and stars.
///
- (void)setAtmosphere:(TMBAtmosphere * _Nonnull)atmosphere completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Remove the atmosphere of the style. No fog, space or stars would be rendered.
- (void)removeAtmosphereWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set an explicit atmosphere properties
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param properties A dictionary of style fog (aka atmosphere) properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// returns:
/// Style atmosphere property value.
- (MBMStylePropertyValue * _Nonnull)atmosphereProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Adds a custom geometry to be used in the style.
/// To add the data, implement the fetchTileFunction callback in the options
/// and call <code>setCustomGeometrySourceTileData</code>.
/// \param id Style source identifier
///
/// \param options Settings for the custom geometry
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomGeometrySourceWithId:(NSString * _Nonnull)id options:(MBMCustomGeometrySourceOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set tile data of a custom geometry.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
/// \param features An array of features to add
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setCustomGeometrySourceTileDataForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId features:(NSArray<MBXFeature *> * _Nonnull)features completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate tile for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceTileForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate region for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param bounds Coordinate bounds.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceRegionForSourceId:(NSString * _Nonnull)sourceId bounds:(MBMCoordinateBounds * _Nonnull)bounds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MBMTileCacheBudget;
@class MBMCoordinateBoundsZoom;
@class MBMFreeCameraOptions;

/// MapboxMap provides access to the map model, including the camera, style, observable map events,
/// and querying rendered features. Obtain the MapboxMap instance for a <code>MapView</code> via MapView.mapboxMap.
/// important:
/// MapboxMap should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBMapboxMap")
@interface TMBMapboxMap : TMBStyleManager
/// Triggers a repaint of the map. Calling this method is typically unnecessary but
/// may be needed if using a custom layer that needs to be redrawn independently
/// of other map changes.
- (void)triggerRepaint;
/// Loads a <code>style</code> from a StyleURI, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI StyleURI to load
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleWithUri:(NSString * _Nonnull)uri transition:(MBMTransitionOptions * _Nullable)transition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Loads a <code>style</code> from a JSON string, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI Style JSON string
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleWithJson:(NSString * _Nonnull)json transition:(MBMTransitionOptions * _Nullable)transition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// When loading a map, if <code>prefetchZoomDelta</code> is set to any number greater
/// than 0, the map will first request a tile for <code>zoom - prefetchZoomDelta</code>
/// in an attempt to display a full map at lower resolution as quick as
/// possible.
/// It will get clamped at the tile source minimum zoom. The default delta
/// is 4.
@property (nonatomic) uint8_t prefetchZoomDelta;
/// The tile cache budget hint to be used by the map.
/// The budget can be given in tile units or in megabytes. A Map will do the best effort to keep memory
/// allocations for a non essential resources within the budget.
/// If tile cache budget in megabytes is set, the engine will try to use ETC1 texture compression
/// for raster layers, therefore, raster images with alpha channel will be rendered incorrectly.
/// If null is set, the tile cache budget in tile units will be dynamically calculated based on
/// the current viewport size.
/// \param tileCacheBudget The tile cache budget hint to be used by the Map.
///
- (void)setTileCacheBudget:(MBMTileCacheBudget * _Nullable)tileCacheBudget;
/// Defines whether multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude.
/// If disabled, when the map is zoomed out far enough that a single representation of the world does not fill the map’s entire container,
/// there will be blank space beyond 180 and -180 degrees longitude.
/// In this case, features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map
/// and the other on the left edge of the map) at every zoom level.
/// By default, <code>shouldRenderWorldCopies</code> is set to <code>true</code>.
@property (nonatomic) BOOL shouldRenderWorldCopies;
/// Gets elevation for the given coordinate.
/// note:
/// Elevation is only available for the visible region on the screen.
/// \param coordinate Coordinate for which to return the elevation.
///
///
/// returns:
/// Elevation (in meters) multiplied by current terrain
/// exaggeration, or empty if elevation for the coordinate is not available.
- (NSNumber * _Nullable)elevationAt:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Transforms a view’s frame into a set of coordinate bounds
/// \param rect The <code>rect</code> whose bounds will be transformed into a set of map coordinate bounds.
///
///
/// returns:
/// A <code>CoordinateBounds</code> object that represents the southwest and northeast corners of the view’s bounds.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsFor:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Transforms a set of map coordinate bounds to a <code>CGRect</code> relative to the <code>MapView</code>.
/// \param coordinateBounds The <code>coordinateBounds</code> that will be converted into a rect relative to the <code>MapView</code>
///
///
/// returns:
/// A <code>CGRect</code> whose corners represent the vertices of a set of <code>CoordinateBounds</code>.
- (CGRect)rectFor:(MBMCoordinateBounds * _Nonnull)coordinateBounds SWIFT_WARN_UNUSED_RESULT;
/// Returns the map’s options
@property (nonatomic, readonly, strong) MBMMapOptions * _Nonnull options;
/// Calculates a <code>CameraOptions</code> to fit a <code>CoordinateBounds</code>
/// This API isn’t supported by Globe projection.
/// \param coordinateBounds The coordinate bounds that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (TMBCameraOptions * _Nonnull)cameraForCoordinateBounds:(MBMCoordinateBounds * _Nonnull)coordinateBounds padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch maxZoom:(NSNumber * _Nullable)maxZoom offset:(NSNumber * _Nullable)offset SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates.
/// This API isn’t supported by Globe projection.
/// \param coordinates Array of coordinates that should fit within the new viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (TMBCameraOptions * _Nonnull)cameraForCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates into a sub-rect of the map.
/// Adjusts the zoom of <code>camera</code> to fit <code>coordinates</code> into <code>rect</code>.
/// Returns the provided camera with zoom adjusted to fit coordinates into
/// <code>rect</code>, so that the coordinates on the left, top and right of the effective
/// camera center at the principal point of the projection (defined by padding)
/// fit into the rect.
/// This API isn’t supported by Globe projection.
/// note:
///
/// This method may fail if the principal point of the projection is not
/// inside <code>rect</code> or if there is insufficient screen space, defined by
/// principal point and rect, to fit the geometry.
/// \param coordinates The coordinates to frame within <code>rect</code>.
///
/// \param camera The camera for which the zoom should be adjusted to fit <code>coordinates</code>. <code>camera.center</code> must be non-nil.
///
/// \param rect The rectangle inside of the map that should be used to frame <code>coordinates</code>.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints, or <code>cameraOptions</code> if an error occurs.
- (TMBCameraOptions * _Nonnull)cameraFor:(NSArray<NSValue *> * _Nonnull)coordinates camera:(TMBCameraOptions * _Nonnull)camera rect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Convenience method that returns the <code>camera options</code> object for given parameters.
/// \param coordinates The <code>coordinates</code> representing the bounds of the camera.
///
/// \param camera The <code>camera options</code> which will be applied before calculating the camera for the coordinates.
/// If any of the fields in camera options is not provided then the current value from the map for that field will be used.
///
/// \param coordinatesPadding The amount of padding in screen points to add to the given <code>coordinates</code>.
/// This padding is not applied to the map but to the coordinates provided. If you want to apply padding to the map use <code>camera</code> parameter.
///
/// \param maxZoom The maximum zoom level allowed in the returned camera options.
///
/// \param offset The center of the given bounds relative to map center in screen points.
///
///
/// returns:
/// A <code>CameraOptions</code> object representing the provided parameters.
- (void)cameraFor:(NSArray<NSValue *> * _Nonnull)coordinates camera:(TMBCameraOptions * _Nonnull)camera coordinatesPadding:(NSNumber * _Nullable)coordinatesPadding maxZoom:(NSNumber * _Nullable)maxZoom offset:(NSNumber * _Nullable)offset completion:(SWIFT_NOESCAPE void (^ _Nonnull)(TMBCameraOptions * _Nullable, NSError * _Nullable))completion;
/// Calculates a <code>CameraOptions</code> to fit a geometry
/// This API isn’t supported by Globe projection.
/// \param geometry The geoemtry that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (TMBCameraOptions * _Nonnull)cameraFor:(MBXGeometry * _Nonnull)geometry padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds corresponding to a given <code>CameraOptions</code>
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsForCameraBounds:(TMBCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds to a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsUnwrappedFor:(TMBCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomFor:(TMBCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will
/// be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomUnwrappedFor:(TMBCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Converts a point in the mapView’s coordinate system to a geographic coordinate.
/// The point must exist in the coordinate space of the <code>MapView</code>
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (CLLocationCoordinate2D)coordinateFor:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Converts a map coordinate to a <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinate The coordinate to convert.
///
///
/// returns:
/// A <code>CGPoint</code> relative to the <code>UIView</code>. If the point is outside of the bounds
/// of <code>MapView</code> the returned point contains <code>-1.0</code> for both coordinates.
- (CGPoint)pointFor:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Converts map coordinates to an array of <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinates The coordinate to convert.
///
///
/// returns:
/// An array of <code>CGPoint</code> relative to the <code>UIView. If a coordinate's point is outside of map view's bounds, it will be </code>(-1, -1)`
- (NSArray<NSValue *> * _Nonnull)pointsFor:(NSArray<NSValue *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// Converts points in the mapView’s coordinate system to geographic coordinates.
/// The points must exist in the coordinate space of the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (NSArray<NSValue *> * _Nonnull)coordinatesFor:(NSArray<NSValue *> * _Nonnull)points SWIFT_WARN_UNUSED_RESULT;
/// Changes the map view by any combination of center, zoom, bearing, and pitch,
/// without an animated transition. The map will retain its current values
/// for any details not passed via the camera options argument. It is not
/// guaranteed that the provided <code>CameraOptions</code> will be set, the map may apply
/// constraints resulting in a different <code>CameraState</code>.
/// important:
///
/// This method does not cancel existing animations. Call
/// <code>CameraAnimationsManager.cancelAnimations()</code>to cancel existing animations.
/// \param cameraOptions New camera options
///
- (void)setCameraTo:(TMBCameraOptions * _Nonnull)cameraOptions;
/// Returns the current camera state
@property (nonatomic, readonly, strong) TMBCameraState * _Nonnull cameraState;
/// Sets/get the map view with the free camera options.
/// FreeCameraOptions provides more direct access to the underlying camera entity.
/// For backwards compatibility the state set using this API must be representable
/// with <code>CameraOptions</code> as well. Parameters are clamped to a valid range or
/// discarded as invalid if the conversion to the pitch and bearing presentation
/// is ambiguous. For example orientation can be invalid if it leads to the
/// camera being upside down or the quaternion has zero length.
/// \param freeCameraOptions The free camera options to set.
///
@property (nonatomic, strong) MBMFreeCameraOptions * _Nonnull freeCameraOptions;
/// Returns the bounds of the map.
@property (nonatomic, readonly, strong) TMBCameraBounds * _Nonnull cameraBounds;
/// Sets the bounds of the map.
/// \param options New camera bounds. Nil values will not take effect.
///
///
/// throws:
/// <code>MapError</code>
- (void)setCameraBoundsWith:(TMBCameraBoundsOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Calculates target point where camera should move after drag. The method
/// should be called after <code>dragStart</code> and before <code>dragEnd</code>.
/// \param fromPoint The point from which the map is dragged.
///
/// \param toPoint The point to which the map is dragged.
///
///
/// returns:
///
/// The camera options object showing end point.
- (TMBCameraOptions * _Nonnull)dragCameraOptionsFrom:(CGPoint)from to:(CGPoint)to SWIFT_WARN_UNUSED_RESULT;
/// If implementing a custom animation mechanism, call this method when the animation begins.
/// Must always be paired with a corresponding call to <code>endAnimation()</code>
- (void)beginAnimation;
/// If implementing a custom animation mechanism, call this method when the animation ends.
/// Must always be paired with a corresponding call to <code>beginAnimation()</code>
- (void)endAnimation;
/// If implementing a custom gesture, call this method when the gesture begins.
/// Must always be paired with a corresponding call to <code>endGesture()</code>
- (void)beginGesture;
/// If implementing a custom gesture, call this method when the gesture ends.
/// Must always be paired with a corresponding call to <code>beginGesture()</code>
- (void)endGesture;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Clears temporary map data.
/// Clears temporary map data from the data path defined in the given resource
/// options. Useful to reduce the disk usage or in case the disk cache contains
/// invalid data.
/// note:
/// Calling this API will affect all maps that use the same data path
/// and does not affect persistent map data like offline style packages.
/// \param completion Called once the request is complete
///
+ (void)clearDataWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Update the state map of a feature within a style source.
/// Update entries in the state map of a given feature within a style source. Only entries listed in the state map
/// will be updated. An entry in the feature state map that is not listed in <code>state</code> will retain its previous value.
/// \param sourceId Style source identifier
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId Identifier of the feature whose state should be updated
///
/// \param state Map of entries to update with their respective new values
///
/// \param callback The <code>feature state operation callback</code> called when the operation completes or ends.
///
///
/// returns:
/// A <code>Cancelable</code> object  that could be used to cancel the pending operation.
- (TMBCancelable * _Nonnull)setFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId state:(NSDictionary<NSString *, id> * _Nonnull)state callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// Get the state map of a feature within a style source.
/// \param sourceId Style source identifier.
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources).
///
/// \param featureId Identifier of the feature whose state should be queried.
///
/// \param callback Feature’s state map or an empty map if the feature could not be found.
///
///
/// returns:
/// A <code>Cancelable</code> object that could be used to cancel the pending query.
- (TMBCancelable * _Nonnull)getFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId callback:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))callback;
/// Removes entries from a feature state object.
/// Remove a specified property or all property from a feature’s state object, depending on the value of <code>stateKey</code>.
/// \param sourceId The style source identifier
///
/// \param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId The feature identifier of the feature whose state should be removed.
///
/// \param stateKey The key of the property to remove. If <code>nil</code>, all feature’s state object properties are removed. Defaults to <code>nil</code>.
///
/// \param callback The <code>feature state operation callback</code> called when the operation completes or ends.
///
///
/// returns:
/// A <code>cancelable</code> object that could be used to cancel the pending operation.
- (TMBCancelable * _Nonnull)removeFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId stateKey:(NSString * _Nullable)stateKey callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// Reset all the feature states within a style source.
/// Remove all feature state entries from the specified style source or source layer.
/// Note that updates to feature state are asynchronous, so changes made by this method might not be
/// immediately visible using <code>getStateFeature</code>.
/// \param sourceId The style source identifier
///
/// \param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param callback The <code>feature state operation callback</code> called when the operation completes or ends.
///
///
/// returns:
/// A <code>cancelable</code> object that could be used to cancel the pending operation.
- (TMBCancelable * _Nonnull)resetFeatureStatesWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
@end

@class MBMRenderedQueryOptions;
@class MBMQueriedRenderedFeature;
@class MBMSourceQueryOptions;
@class MBMQueriedSourceFeature;
@class MBMFeatureExtensionValue;

@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithShape:(NSArray<NSValue *> * _Nonnull)shape options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedRenderedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithRect:(CGRect)rect options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedRenderedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithPoint:(CGPoint)point options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedRenderedFeature *> * _Nullable, NSError * _Nullable))completion;
/// Queries the map for source features.
/// \param sourceId Style source identifier used to query for source features.
///
/// \param options Options for querying source features.
///
/// \param completion Callback called when the query completes
///
- (void)querySourceFeaturesFor:(NSString * _Nonnull)sourceId options:(MBMSourceQueryOptions * _Nonnull)options completion:(void (^ _Nullable)(NSArray<MBMQueriedSourceFeature *> * _Nullable, NSError * _Nullable))completion;
/// Returns all the leaves (original points) of a cluster (given its cluster_id) from a GeoJSON source, with pagination support: limit is the number of leaves
/// to return (set to Infinity for all points), and offset is the amount of points to skip (for pagination).
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param limit the number of points to return from the query, default to 10
///
/// \param offset the amount of points to skip, default to 0
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterLeavesForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature limit:(uint64_t)limit offset:(uint64_t)offset completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the children (original points or clusters) of a cluster (on the next zoom level)
/// given its id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterChildrenForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the zoom on which the cluster expands into several children (useful for “click to zoom” feature)
/// given the cluster’s cluster_id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterExpansionZoomForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// The style has been fully loaded, and the map has rendered all visible tiles.
- (TMBCancelable * _Nonnull)onMapLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// An error that has occurred while loading the Map. The <code>type</code> property defines what resource could
/// not be loaded and the <code>message</code> property will contain a descriptive error message.
/// In case of <code>source</code> or <code>tile</code> loading errors, <code>sourceID</code> or <code>tileID</code> will contain the identifier of the source failing.
- (TMBCancelable * _Nonnull)onMapLoadingError:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style has been fully loaded, including the style, specified sprite and sources’ metadata.
/// The style specified sprite would be marked as loaded even with sprite loading error (an error will be emitted via <code>MapboxMap/onMapLoadingError</code>).
/// Sprite loading error is not fatal and we don’t want it to block the map rendering, thus this event will still be emitted if style and sources are fully loaded.
- (TMBCancelable * _Nonnull)onStyleLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style data has been loaded. The <code>type</code> property defines what kind of style data has been loaded.
/// Event may be emitted synchronously, for example, when <code>MapboxMap/loadStyle(_:transition:completion:)-2jmep</code> is used to load style.
/// Based on an event data <code>type</code> property value, following use-cases may be implemented:
/// <ul>
///   <li>
///     <code>style</code>: Style is parsed, style layer properties could be read and modified, style layers and sources could be
///     added or removed before rendering is started.
///   </li>
///   <li>
///     <code>sprite</code>: Style’s sprite sheet is parsed and it is possible to add or update images.
///   </li>
///   <li>
///     <code>sources</code>: All sources defined by the style are loaded and their properties could be read and updated if needed.
///   </li>
/// </ul>
- (TMBCancelable * _Nonnull)onStyleDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onCameraChanged:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map has entered the idle state. The map is in the idle state when there are no ongoing transitions
/// and the map has rendered all requested non-volatile tiles. The event will not be emitted if animation is in progress (see <code>MapboxMap/beginAnimation()</code>, <code>MapboxMap/endAnimation()</code>)
/// and / or gesture is in progress (see <code>MapboxMap/beginGesture()</code>, <code>MapboxMap/endGesture()</code>).
- (TMBCancelable * _Nonnull)onMapIdle:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been added with <code>StyleManager/addSource(_:dataId:)</code>  or <code>StyleManager/addSource(withId:properties:)</code>.
/// The event is emitted synchronously, therefore, it is possible to immediately
/// read added source’s properties.
- (TMBCancelable * _Nonnull)onSourceAdded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been removed with <code>StyleManager/removeSource(withId:)</code>.
/// The event is emitted synchronously, thus, <code>StyleManager/allSourceIdentifiers</code> will be
/// in sync when the observer receives the notification.
- (TMBCancelable * _Nonnull)onSourceRemoved:(void (^ _Nonnull)(id _Nonnull))handler;
/// A source data has been loaded.
/// Event may be emitted synchronously in cases when source’s metadata is available when source is added to the style.
/// The <code>dataID</code> property defines the source id.
/// The <code>type</code> property defines if source’s metadata (e.g., TileJSON) or tile has been loaded. The property of <code>metadata</code>
/// value might be useful to identify when particular source’s metadata is loaded, thus all source’s properties are
/// readable and can be updated before map will start requesting data to be rendered.
/// The <code>loaded</code> property will be set to <code>true</code> if all source’s data required for visible viewport of the map, are loaded.
/// The <code>tileID</code> property defines the tile id if the <code>type</code> field equals <code>tile</code>.
/// The <code>dataID</code> property will be returned if it has been set for this source.
- (TMBCancelable * _Nonnull)onSourceDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// A style has a missing image. This event is emitted when the map renders visible tiles and
/// one of the required images is missing in the sprite sheet. Subscriber has to provide the missing image
/// by calling <code>StyleManager/addImage(_:id:sdf:contentInsets:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageMissing:(void (^ _Nonnull)(id _Nonnull))handler;
/// An image added to the style is no longer needed and can be removed using <code>StyleManager/removeImage(withId:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageRemoveUnused:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map started rendering a frame.
- (TMBCancelable * _Nonnull)onRenderFrameStarted:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map finished rendering a frame.
/// The <code>renderMode</code> property tells whether the map has all data (<code>full</code>) required to render the visible viewport.
/// The <code>needsRepaint</code> property provides information about ongoing transitions that trigger map repaint.
/// The <code>placementChanged</code> property tells if the symbol placement has been changed in the visible viewport.
- (TMBCancelable * _Nonnull)onRenderFrameFinished:(void (^ _Nonnull)(id _Nonnull))handler;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBModel")
@interface TMBModel : NSObject
/// URL to a <code>gltf</code> 3D asset in the application bundle
@property (nonatomic, copy) NSURL * _Nullable uri;
/// Coordinates of the model in <code>[longitude, latitude]</code>format
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable position;
/// Orientation of the model
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable orientation;
- (nonnull instancetype)initWithUri:(NSURL * _Nullable)uri position:(NSArray<NSNumber *> * _Nullable)position orientation:(NSArray<NSNumber *> * _Nullable)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Defines scaling mode. Only applies to location-indicator type layers.
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBModelScaleMode")
@interface TMBModelScaleMode : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Model is scaled so that it’s always the same size relative to other map features. The property model-scale specifies how many meters each unit in the model file should cover.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBModelScaleMode * _Nonnull map;)
+ (TMBModelScaleMode * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Model is scaled so that it’s always the same size on the screen. The property model-scale specifies how many pixels each unit in model file should cover.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBModelScaleMode * _Nonnull viewport;)
+ (TMBModelScaleMode * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Defines rendering behavior of model in respect to other 3D scene objects.
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBModelType")
@interface TMBModelType : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Integrated to 3D scene, using depth testing, along with terrain, fill-extrusions and custom layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBModelType * _Nonnull common3d;)
+ (TMBModelType * _Nonnull)common3d SWIFT_WARN_UNUSED_RESULT;
/// Displayed over other 3D content, occluded by terrain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBModelType * _Nonnull locationIndicator;)
+ (TMBModelType * _Nonnull)locationIndicator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC22TMBNumberFormatOptions")
@interface TMBNumberFormatOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBScaleBarViewOptions;

/// Used to configure Ornament-specific capabilities of the map
/// All margin values are relative to the <code>MapView</code>’s safe area. To allow the safe area
/// (and thereby ornaments) to track the presence of navigation bars and tab bars,
/// make MapView the root view of a view controller.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBOrnamentOptions")
@interface TMBOrnamentOptions : NSObject
/// The ornament options for the map’s scale bar.
@property (nonatomic, strong) TMBScaleBarViewOptions * _Nonnull scaleBar;
/// The ornament options for the map’s compass view.
@property (nonatomic, strong) TMBCompassViewOptions * _Nonnull compass;
/// The ornament options for the map’s logo view.
/// Per our terms of service, a Mapbox map is required to display both
/// a Mapbox logo as well as an information icon that contains attribution
/// information. See https://docs.mapbox.com/help/how-mapbox-works/attribution/
/// for details.
@property (nonatomic, strong) TMBLogoViewOptions * _Nonnull logo;
/// The ornament options for the map’s attribution button.
@property (nonatomic, strong) TMBAttributionButtonOptions * _Nonnull attributionButton;
/// Initializes an <code>OrnamentOptions</code>.
/// \param scaleBar The ornament options for the map’s scale bar.
///
/// \param compass The ornament options for the map’s compass view.
///
/// \param logo The ornament options for the map’s logo view.
///
/// \param attributionButton The ornament options for the map’s attribution button.
///
- (nonnull instancetype)initWithScaleBar:(TMBScaleBarViewOptions * _Nonnull)scaleBar compass:(TMBCompassViewOptions * _Nonnull)compass logo:(TMBLogoViewOptions * _Nonnull)logo attributionButton:(TMBAttributionButtonOptions * _Nonnull)attributionButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Options used to configure the corner position of an ornament
typedef SWIFT_ENUM(NSInteger, TMBOrnamentPosition, open) {
  TMBOrnamentPositionTopLeft = 0,
  TMBOrnamentPositionTopRight = 1,
  TMBOrnamentPositionBottomRight = 2,
  TMBOrnamentPositionBottomLeft = 3,
  TMBOrnamentPositionTopLeading = 4,
  TMBOrnamentPositionTopTrailing = 5,
  TMBOrnamentPositionBottomLeading = 6,
  TMBOrnamentPositionBottomTrailing = 7,
};

/// Options used to configure the visibility of an ornament
typedef SWIFT_ENUM(NSInteger, TMBOrnamentVisibility, open) {
/// Shows the ornament when relevant
  TMBOrnamentVisibilityAdaptive = 0,
/// Hides the ornament
  TMBOrnamentVisibilityHidden = 1,
/// Shows the ornament
  TMBOrnamentVisibilityVisible = 2,
};

@class UIView;

/// APIs for managing map ornaments
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBOrnamentsManager")
@interface TMBOrnamentsManager : NSObject
/// The <code>OrnamentOptions</code> object that is used to set up and update the required ornaments on the map.
@property (nonatomic, strong) TMBOrnamentOptions * _Nonnull options;
/// The view for the logo ornament. This view can be used to position other views relative to the logo
/// ornament, but it should not be manipulated. Use <code>OrnamentOptions/logo</code> to configure the
/// logo presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull logoView;
/// The view for the scale bar ornament. This view can be used to position other views relative to the
/// scale bar ornament, but it should not be manipulated. Use <code>OrnamentOptions/scaleBar</code>
/// to configure the scale bar presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull scaleBarView;
/// The view for the compass ornament. This view can be used to position other views relative to the
/// compass ornament, but it should not be manipulated. Use <code>OrnamentOptions/compass</code> to
/// configure the compass presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull compassView;
/// The view for the attribution button ornament. This view can be used to position other views relative
/// to the attribution button ornament, but it should not be manipulated. Use
/// <code>OrnamentOptions/attributionButton</code> to configure the attribution button presentation
/// if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull attributionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Options used to configure the direction in which the map is allowed to move
/// during a pan gesture. Called <code>ScrollMode</code> in the Android SDK for
/// consistency with platform conventions.
typedef SWIFT_ENUM(NSInteger, TMBPanMode, open) {
/// The map may only move horizontally.
  TMBPanModeHorizontal = 0,
/// The map may only move vertically.
  TMBPanModeVertical = 1,
/// The map may move both horizontally and vertically.
  TMBPanModeHorizontalAndVertical = 2,
};


/// A <a href="https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2">Point geometry</a> represents a single position.
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBPoint")
@interface TMBPoint : NSObject
/// The position at which the point is located.
/// This property has a plural name for consistency with <a href="https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2">RFC 7946</a>. For convenience, it is represented by a <code>LocationCoordinate2D</code> instead of a dedicated <code>Position</code> type.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinates;
/// Initializes a point defined by the given position.
/// \param coordinates The position at which the point is located.
///
- (nonnull instancetype)init:(CLLocationCoordinate2D)coordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBTextAnchor;
@class TMBTextJustify;
@class TMBTextTransform;
@class TMBPointAnnotationImage;

SWIFT_CLASS("_TtC13MapboxMapObjC18TMBPointAnnotation")
@interface TMBPointAnnotation : NSObject <TMBAnnotation>
/// Identifier for this annotation
@property (nonatomic, copy) NSString * _Nonnull id;
/// The geometry backing this annotation
@property (nonatomic, readonly, strong) MBXGeometry * _Nonnull geometry;
/// The point backing this annotation
@property (nonatomic, strong) TMBPoint * _Nonnull point;
/// Toggles the annotation’s selection state.
/// If the annotation is deselected, it becomes selected.
/// If the annotation is selected, it becomes deselected.
@property (nonatomic) BOOL isSelected;
/// Property to determine whether annotation can be manually moved around map
@property (nonatomic) BOOL isDraggable;
/// Handles tap gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable tapHandler)(TMBMapContentGestureContext * _Nonnull);
/// Handles long press gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable longPressHandler)(TMBMapContentGestureContext * _Nonnull);
/// Properties associated with the annotation
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Create a point annotation with a <code>Point</code> and an optional identifier.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id point:(TMBPoint * _Nonnull)point isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// Create a point annotation with a coordinate and an optional identifier
/// \param id Optional identifier for this annotation
///
/// \param coordinate Coordinate where this annotation should be rendered
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id coordinate:(CLLocationCoordinate2D)coordinate isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBIconAnchor * _Nullable iconAnchor;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, copy) NSString * _Nullable iconImage;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconOffset;
/// Rotates the icon clockwise.
@property (nonatomic, strong) NSNumber * _Nullable iconRotate;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) NSNumber * _Nullable iconSize;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBIconTextFit * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTextFitPadding;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable symbolSortKey;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBTextAnchor * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, copy) NSString * _Nullable textField;
/// Text justification options.
@property (nonatomic, strong) TMBTextJustify * _Nullable textJustify;
/// Text tracking amount.
@property (nonatomic, strong) NSNumber * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) NSNumber * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textOffset;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) NSNumber * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) NSNumber * _Nullable textRotate;
/// Font size.
@property (nonatomic, strong) NSNumber * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBTextTransform * _Nullable textTransform;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) NSNumber * _Nullable iconEmissiveStrength;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloBlur;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconHaloColor;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloWidth;
/// Controls the transition progress between the image variants of icon-image. Zero means the first variant is used, one is the second, and in between they are blended together.
@property (nonatomic, strong) NSNumber * _Nullable iconImageCrossFade;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable iconOpacity;
/// The color with which the text will be drawn.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) NSNumber * _Nullable textEmissiveStrength;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable textHaloBlur;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) UIColor * _Nullable textHaloColor;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) NSNumber * _Nullable textHaloWidth;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable textOpacity;
@property (nonatomic, strong) TMBPointAnnotationImage * _Nullable image;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC23TMBPointAnnotationImage")
@interface TMBPointAnnotationImage : NSObject
@property (nonatomic, strong) UIImage * _Nonnull image;
@property (nonatomic, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBSymbolPlacement;
@class TMBSymbolZOrder;
@class TMBTextPitchAlignment;
@class TMBTextRotationAlignment;
@class TMBTextWritingMode;
@class TMBTextTranslateAnchor;

/// An instance of <code>PointAnnotationManager</code> is responsible for a collection of <code>PointAnnotation</code>s.
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBPointAnnotationManager")
@interface TMBPointAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The collection of <code>PointAnnotation</code> being managed.
@property (nonatomic, copy) NSArray<TMBPointAnnotation *> * _Nonnull annotations;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable iconAllowOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) NSNumber * _Nullable iconIgnorePlacement;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable iconKeepUpright;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) NSNumber * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBIconPitchAlignment * _Nullable iconPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBIconRotationAlignment * _Nullable iconRotationAlignment;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) NSNumber * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBSymbolPlacement * _Nullable symbolPlacement;
/// Distance between two symbol anchors.
@property (nonatomic, strong) NSNumber * _Nullable symbolSpacing;
/// Position symbol on buildings (both fill extrusions and models) roof tops. In order to have minimal impact on performance, this is supported only when <code>fill-extrusion-height</code> is not zoom-dependent and not edited after initial bucket creation. For fading in buildings when zooming in, fill-extrusion-vertical-scale should be used and symbols would raise with building roofs. Symbols are sorted by elevation, except in case when <code>viewport-y</code> sorting or <code>symbol-sort-key</code> are applied.
@property (nonatomic, strong) NSNumber * _Nullable symbolZElevate;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBSymbolZOrder * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable textAllowOverlap;
/// Font stack to use for displaying text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) NSNumber * _Nullable textIgnorePlacement;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable textKeepUpright;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) NSNumber * _Nullable textMaxAngle;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) NSNumber * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBTextPitchAlignment * _Nullable textPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBTextRotationAlignment * _Nullable textRotationAlignment;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, copy) NSArray<TMBTextAnchor *> * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, copy) NSArray<TMBTextWritingMode *> * _Nullable textWritingMode;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTranslate;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBIconTranslateAnchor * _Nullable iconTranslateAnchor;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textTranslate;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBTextTranslateAnchor * _Nullable textTranslateAnchor;
/// Slot for the underlying layer.
/// Use this property to position the annotations relative to other map features if you use Mapbox Standard Style.
/// See <a href="doc:Migrate-to-v11##21-The-Mapbox-Standard-Style">doc:Migrate-to-v11##21-The-Mapbox-Standard-Style</a> for more info.
@property (nonatomic, copy) NSString * _Nullable slot;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBPolygonRing;

/// A <a href="https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6">Polygon geometry</a> is conceptually a collection of <code>Ring</code>s that form a single connected geometry.
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBPolygon")
@interface TMBPolygon : NSObject
/// The positions at which the polygon is located. Each nested array corresponds to one linear ring.
@property (nonatomic, readonly, copy) NSArray<NSArray<NSValue *> *> * _Nonnull coordinates;
/// Initializes a polygon defined by the given positions.
/// This initializer is equivalent to the <a href="https://turfjs.org/docs/#polygon"><code>polygon</code></a> function in the turf-helpers package of Turf.js (<a href="https://github.com/Turfjs/turf/tree/master/packages/turf-helpers/">source code</a>).
/// \param coordinates The positions at which the polygon is located. Each nested array corresponds to one linear ring.
///
- (nonnull instancetype)init:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
/// Initializes a polygon defined by the given linear rings.
/// \param outerRing The outer linear ring.
///
/// \param innerRings The inner linear rings that define “holes” in the polygon.
///
- (nonnull instancetype)initWithOuterRing:(TMBPolygonRing * _Nonnull)outerRing innerRings:(NSArray<TMBPolygonRing *> * _Nonnull)innerRings OBJC_DESIGNATED_INITIALIZER;
/// Initializes a polygon as a given center coordinate with a given number of
/// vertices, as a means to approximate a circle.
/// This initializer is equivalent to the <a href="https://turfjs.org/docs/#circle">turf-circle</a> package of Turf.js (<a href="https://github.com/Turfjs/turf/tree/master/packages/turf-circle/">source code</a>).
/// \param center The center coordinate for the polygon.
///
/// \param radius The radius of the polygon, measured in meters.
///
/// \param vertices The number of vertices the polygon will have.
/// The recommended amount is 64.
///
///
/// returns:
/// A polygon shape which approximates a circle.
- (nonnull instancetype)initWithCenter:(CLLocationCoordinate2D)center radius:(CLLocationDistance)radius vertices:(NSInteger)vertices OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPolygonAnnotation")
@interface TMBPolygonAnnotation : NSObject <TMBAnnotation>
/// Identifier for this annotation
@property (nonatomic, copy) NSString * _Nonnull id;
/// The geometry backing this annotation
@property (nonatomic, readonly, strong) MBXGeometry * _Nonnull geometry;
/// The polygon backing this annotation
@property (nonatomic, strong) TMBPolygon * _Nonnull polygon;
/// Toggles the annotation’s selection state.
/// If the annotation is deselected, it becomes selected.
/// If the annotation is selected, it becomes deselected.
@property (nonatomic) BOOL isSelected;
/// Property to determine whether annotation can be manually moved around map
@property (nonatomic) BOOL isDraggable;
/// Handles tap gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable tapHandler)(TMBMapContentGestureContext * _Nonnull);
/// Handles long press gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable longPressHandler)(TMBMapContentGestureContext * _Nonnull);
/// Properties associated with the annotation
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Create a polygon annotation with a <code>Polygon</code> and an optional identifier.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id polygon:(TMBPolygon * _Nonnull)polygon isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable fillSortKey;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) UIColor * _Nullable fillColor;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) NSNumber * _Nullable fillOpacity;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) UIColor * _Nullable fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable fillPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An instance of <code>PolygonAnnotationManager</code> is responsible for a collection of <code>PolygonAnnotation</code>s.
SWIFT_CLASS("_TtC13MapboxMapObjC27TMBPolygonAnnotationManager")
@interface TMBPolygonAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The collection of <code>PolygonAnnotation</code> being managed.
@property (nonatomic, copy) NSArray<TMBPolygonAnnotation *> * _Nonnull annotations;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) NSNumber * _Nullable fillAntialias;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) NSNumber * _Nullable fillEmissiveStrength;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable fillTranslate;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBFillTranslateAnchor * _Nullable fillTranslateAnchor;
/// Slot for the underlying layer.
/// Use this property to position the annotations relative to other map features if you use Mapbox Standard Style.
/// See <a href="doc:Migrate-to-v11##21-The-Mapbox-Standard-Style">doc:Migrate-to-v11##21-The-Mapbox-Standard-Style</a> for more info.
@property (nonatomic, copy) NSString * _Nullable slot;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <a href="https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6">linear ring</a> is a closed figure bounded by three or more straight line segments.
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBPolygonRing")
@interface TMBPolygonRing : NSObject
/// The positions at which the linear ring is located.
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull coordinates;
/// Initializes a linear ring defined by the given positions.
/// \param coordinates The positions at which the linear ring is located.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC21TMBPolylineAnnotation")
@interface TMBPolylineAnnotation : NSObject <TMBAnnotation>
/// Identifier for this annotation
@property (nonatomic, copy) NSString * _Nonnull id;
/// The geometry backing this annotation
@property (nonatomic, readonly, strong) MBXGeometry * _Nonnull geometry;
/// The line string backing this annotation
@property (nonatomic, strong) TMBLineString * _Nonnull lineString;
/// Toggles the annotation’s selection state.
/// If the annotation is deselected, it becomes selected.
/// If the annotation is selected, it becomes deselected.
@property (nonatomic) BOOL isSelected;
/// Property to determine whether annotation can be manually moved around map
@property (nonatomic) BOOL isDraggable;
/// Handles tap gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable tapHandler)(TMBMapContentGestureContext * _Nonnull);
/// Handles long press gesture on this annotation.
/// Should return <code>true</code> if the gesture is handled, or <code>false</code> to propagate it to the annotations or layers below.
@property (nonatomic, copy) BOOL (^ _Nullable longPressHandler)(TMBMapContentGestureContext * _Nonnull);
/// Properties associated with the annotation
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Create a polyline annotation with a <code>LineString</code> and an optional identifier.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id lineString:(TMBLineString * _Nonnull)lineString isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// Create a polyline annotation with an array of coordinates and an optional identifier.
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id lineCoordinates:(NSArray<NSValue *> * _Nonnull)lineCoordinates isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable OBJC_DESIGNATED_INITIALIZER;
/// The display of lines when joining.
@property (nonatomic, strong) TMBLineJoin * _Nullable lineJoin;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) NSNumber * _Nullable lineBlur;
/// The color of the line border. If line-border-width is greater than zero and the alpha value of this color is 0 (default), the color for the border will be selected automatically based on the line color.
@property (nonatomic, strong) UIColor * _Nullable lineBorderColor;
/// The width of the line border. A value of zero means no border.
@property (nonatomic, strong) NSNumber * _Nullable lineBorderWidth;
/// The color with which the line will be drawn.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) NSNumber * _Nullable lineGapWidth;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) NSNumber * _Nullable lineOffset;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable lineOpacity;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable linePattern;
/// Stroke thickness.
@property (nonatomic, strong) NSNumber * _Nullable lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An instance of <code>PolylineAnnotationManager</code> is responsible for a collection of <code>PolylineAnnotation</code>s.
SWIFT_CLASS("_TtC13MapboxMapObjC28TMBPolylineAnnotationManager")
@interface TMBPolylineAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The collection of <code>PolylineAnnotation</code> being managed.
@property (nonatomic, copy) NSArray<TMBPolylineAnnotation *> * _Nonnull annotations;
/// The display of line endings.
@property (nonatomic, strong) TMBLineCap * _Nullable lineCap;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) NSNumber * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) NSNumber * _Nullable lineRoundLimit;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDasharray;
/// Decrease line layer opacity based on occlusion from 3D objects. Value 0 disables occlusion, value 1 means fully occluded.
@property (nonatomic, strong) NSNumber * _Nullable lineDepthOcclusionFactor;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) NSNumber * _Nullable lineEmissiveStrength;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTranslate;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBLineTranslateAnchor * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTrimOffset;
/// Slot for the underlying layer.
/// Use this property to position the annotations relative to other map features if you use Mapbox Standard Style.
/// See <a href="doc:Migrate-to-v11##21-The-Mapbox-Standard-Style">doc:Migrate-to-v11##21-The-Mapbox-Standard-Style</a> for more info.
@property (nonatomic, copy) NSString * _Nullable slot;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MBMProjectedMeters;
@class MBMMercatorCoordinate;

/// A collection of <a href="https://en.wikipedia.org/wiki/Web_Mercator_projection">Spherical Mercator</a> projection methods.
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBProjection")
@interface TMBProjection : NSObject
/// Maximum supported latitude value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CLLocationDegrees latitudeMax;)
+ (CLLocationDegrees)latitudeMax SWIFT_WARN_UNUSED_RESULT;
/// Minimum supported latitude value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CLLocationDegrees latitudeMin;)
+ (CLLocationDegrees)latitudeMin SWIFT_WARN_UNUSED_RESULT;
/// Calculate distance spanned by one pixel at the specified latitude and
/// zoom level.
/// \param latitude The latitude for which to return the value
///
/// \param zoom The zoom level
///
///
/// returns:
/// Meters
+ (double)metersPerPointFor:(CLLocationDegrees)latitude zoom:(CGFloat)zoom SWIFT_WARN_UNUSED_RESULT;
/// Calculate Spherical Mercator ProjectedMeters coordinates.
/// \param coordinate Coordinate at which to calculate the projected
/// meters
///
///
/// returns:
/// Spherical Mercator ProjectedMeters coordinates
+ (MBMProjectedMeters * _Nonnull)projectedMetersFor:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Calculate a coordinate for a Spherical Mercator projected
/// meters.
/// \param projectedMeters Spherical Mercator ProjectedMeters coordinates
///
///
/// returns:
/// A coordinate
+ (CLLocationCoordinate2D)coordinateFor:(MBMProjectedMeters * _Nonnull)projectedMeters SWIFT_WARN_UNUSED_RESULT;
/// Calculate a point on the map in Mercator Projection for a given
/// coordinate at the specified zoom scale.
/// note:
/// Coordinate latitudes will be clamped to
/// [Projection.latitudeMin, Projection.latitudeMax]
/// \param coordinate The coordinate for which to return the value.
///
/// \param zoomScale The current zoom factor applied on the map, is used to
/// calculate the world size as tileSize * zoomScale (i.e.
/// 512 * 2 ^ Zoom level) where tileSize is the width of a tile
/// in points.
///
///
/// returns:
/// Mercator coordinate
+ (MBMMercatorCoordinate * _Nonnull)project:(CLLocationCoordinate2D)coordinate zoomScale:(CGFloat)zoomScale SWIFT_WARN_UNUSED_RESULT;
/// Calculate a coordinate for a given point on the map in Mercator Projection.
/// \param mercatorCoordinate Point on the map in Mercator projection.
///
/// \param zoomScale The current zoom factor applied on the map, is used to
/// calculate the world size as tileSize * zoomScale (i.e.
/// 512 * 2 ^ Zoom level) where tileSize is the width of a tile in
/// points.
///
///
/// returns:
/// Unprojected coordinate
+ (CLLocationCoordinate2D)unproject:(MBMMercatorCoordinate * _Nonnull)mercatorCoordinate zoomScale:(CGFloat)zoomScale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TMBPromoteIdType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC12TMBPromoteId")
@interface TMBPromoteId : NSObject
@property (nonatomic, readonly) enum TMBPromoteIdType type;
+ (TMBPromoteId * _Nonnull)string:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBPromoteId * _Nonnull)object:(NSDictionary<NSString *, NSString *> * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBPromoteIdType, open) {
  TMBPromoteIdTypeString = 0,
  TMBPromoteIdTypeObject = 1,
};


SWIFT_PROTOCOL("_TtP13MapboxMapObjC24TMBPuckTypeConfiguration_")
@protocol TMBPuckTypeConfiguration
@end

@class TMBPuck2DConfigurationPulsing;

SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck2DConfiguration")
@interface TMBPuck2DConfiguration : NSObject <TMBPuckTypeConfiguration>
/// The opacity of the entire location indicator.
@property (nonatomic) double opacity;
/// Image to use as the top of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable topImage;
/// Image to use as the middle of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable bearingImage;
/// Image to use as the background of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable shadowImage;
/// The size of the images, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable scale;
@property (nonatomic, strong) TMBPuck2DConfigurationPulsing * _Nullable pulsing;
/// Flag determining if the horizontal accuracy ring should be shown arround the <code>Puck</code>. default value is false
@property (nonatomic) BOOL showsAccuracyRing;
/// The color of the accuracy ring.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingColor;
/// The color of the accuracy ring border.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingBorderColor;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image.
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale pulsing:(TMBPuck2DConfigurationPulsing * _Nullable)pulsing showsAccuracyRing:(BOOL)showsAccuracyRing opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image..
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param accuracyRingColor The color of the accuracy ring.
///
/// \param accuracyRingBorderColor The color of the accuracy ring border.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale showsAccuracyRing:(BOOL)showsAccuracyRing accuracyRingColor:(UIColor * _Nonnull)accuracyRingColor accuracyRingBorderColor:(UIColor * _Nonnull)accuracyRingBorderColor opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBPuck2DConfigurationPulsingRadius;

/// The configuration parameters for sonar-like pulsing circle animation shown around the 2D puck.
SWIFT_CLASS("_TtC13MapboxMapObjC29TMBPuck2DConfigurationPulsing")
@interface TMBPuck2DConfigurationPulsing : NSObject
/// Create a pulsing animation config with a color and radius.
/// \param color The color of the pulsing circle.
///
/// \param radius The radius of the pulsing circle.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color radius:(TMBPuck2DConfigurationPulsingRadius * _Nonnull)radius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Circle radius configuration for the pulsing circle animation.
SWIFT_CLASS("_TtC13MapboxMapObjC35TMBPuck2DConfigurationPulsingRadius")
@interface TMBPuck2DConfigurationPulsingRadius : NSObject
@property (nonatomic, readonly, strong) NSNumber * _Nullable constant;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck3DConfiguration")
@interface TMBPuck3DConfiguration : NSObject <TMBPuckTypeConfiguration>
/// The model to use as the locaiton puck
@property (nonatomic, strong) TMBModel * _Nonnull model;
/// The scale of the model.
@property (nonatomic, strong) TMBValue * _Nullable modelScale;
/// The rotation of the model in euler angles [lon, lat, z].
@property (nonatomic, strong) TMBValue * _Nullable modelRotation;
/// The opacity of the model used as the location puck
@property (nonatomic, strong) TMBValue * _Nullable modelOpacity;
/// Strength of the emission.
/// There is no emission for value 0. For value 1.0, only emissive component (no shading) is displayed and values above 1.0 produce light contribution to surrounding area, for some of the parts (e.g. windows).
/// Default value is 1.
@property (nonatomic, strong) TMBValue * _Nullable modelEmissiveStrength;
/// Initialize a <code>Puck3DConfiguration</code> with a model, scale and rotation.
/// \param model The <code>gltf</code> model to use for the puck.
///
/// \param modelScale The amount to scale the model by.
///
/// \param modelRotation The rotation of the model in euler angles <code>[lon, lat, z]</code>.
///
/// \param modelOpacity The opacity of the model used as the location puck
///
- (nonnull instancetype)initWithModel:(TMBModel * _Nonnull)model modelScale:(TMBValue * _Nullable)modelScale modelRotation:(TMBValue * _Nullable)modelRotation modelOpacity:(TMBValue * _Nullable)modelOpacity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Controls how the puck is oriented
typedef SWIFT_ENUM(NSInteger, TMBPuckBearing, open) {
/// The puck should set its bearing using <code>heading: CLHeading</code>. Bearing will mimic user’s
/// spatial orientation.
  TMBPuckBearingHeading = 0,
/// The puck should set its bearing using <code>course: CLLocationDirection</code>. Bearing will mimic
/// the general direction of travel.
  TMBPuckBearingCourse = 1,
};


/// Represents the interpolated data ready to render the user location puck.
SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPuckRenderingData")
@interface TMBPuckRenderingData : NSObject
/// Puck’s location.
@property (nonatomic, strong) MBXLocation * _Nonnull location;
/// Puck’s heading.
@property (nonatomic, strong) TMBHeading * _Nullable heading;
/// Creates a puck rendering data.
- (nonnull instancetype)initWithLocation:(MBXLocation * _Nonnull)location heading:(TMBHeading * _Nullable)heading OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the different types of pucks
typedef SWIFT_ENUM(NSInteger, TMBPuckType, open) {
/// A 2-dimensional puck. Optionally provide <code>Puck2DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck2D = 0,
/// A 3-dimensional puck. Provide a <code>Puck3DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck3D = 1,
};



/// A RGB-encoded raster DEM source
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster_dem">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBRasterDemSource")
@interface TMBRasterDemSource : NSObject <TMBSource>
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// The encoding used by this source. Mapbox Terrain RGB is used by default
@property (nonatomic, strong) TMBEncoding * _Nullable encoding;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Raster map textures such as satellite imagery.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBRasterLayer")
@interface TMBRasterLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// Increase or reduce the brightness of the image. The value is the maximum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMax;
/// Transition options for <code>rasterBrightnessMax</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMaxTransition;
/// Increase or reduce the brightness of the image. The value is the minimum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMin;
/// Transition options for <code>rasterBrightnessMin</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMinTransition;
/// Defines a color map by which to colorize a raster layer, parameterized by the <code>["raster-value"]</code> expression and evaluated at 1024 uniformly spaced steps over the range specified by <code>raster-color-range</code>.
@property (nonatomic, strong) TMBValue * _Nullable rasterColor;
/// When <code>raster-color</code> is active, specifies the combination of source RGB channels used to compute the raster value. Computed using the equation <code>mix.r * src.r + mix.g * src.g + mix.b * src.b + mix.a</code>. The first three components specify the mix of source red, green, and blue channels, respectively. The fourth component serves as a constant offset and is <em>not</em> multipled by source alpha. Source alpha is instead carried through and applied as opacity to the colorized result. Default value corresponds to RGB luminosity.
@property (nonatomic, strong) TMBValue * _Nullable rasterColorMix;
/// Transition options for <code>rasterColorMix</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterColorMixTransition;
/// When <code>raster-color</code> is active, specifies the range over which <code>raster-color</code> is tabulated. Units correspond to the computed raster value via <code>raster-color-mix</code>.
@property (nonatomic, strong) TMBValue * _Nullable rasterColorRange;
/// Transition options for <code>rasterColorRange</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterColorRangeTransition;
/// Increase or reduce the contrast of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterContrast;
/// Transition options for <code>rasterContrast</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterContrastTransition;
/// Fade duration when a new tile is added.
@property (nonatomic, strong) TMBValue * _Nullable rasterFadeDuration;
/// Rotates hues around the color wheel.
@property (nonatomic, strong) TMBValue * _Nullable rasterHueRotate;
/// Transition options for <code>rasterHueRotate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterHueRotateTransition;
/// The opacity at which the image will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable rasterOpacity;
/// Transition options for <code>rasterOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterOpacityTransition;
/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
@property (nonatomic, strong) TMBValue * _Nullable rasterResampling;
/// Increase or reduce the saturation of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterSaturation;
/// Transition options for <code>rasterSaturation</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterSaturationTransition;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBRasterResampling")
@interface TMBRasterResampling : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull linear;)
+ (TMBRasterResampling * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull nearest;)
+ (TMBRasterResampling * _Nonnull)nearest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TMBScheme;

/// A raster tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBRasterSource")
@interface TMBRasterSource : NSObject <TMBSource>
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) TMBScheme * _Nullable scheme;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC16TMBResolvedImage")
@interface TMBResolvedImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBResolvedImage (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name available:(BOOL)available SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to configure position, margin, and visibility for the map’s scale bar view.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBScaleBarViewOptions")
@interface TMBScaleBarViewOptions : NSObject
/// The position of the scale bar view.
/// The default value for this property is <code>.topLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the scale bar view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The visibility of the scale bar view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
/// Specifies the whether the scale bar uses the metric system.
/// True if the scale bar is using metric units, false if the scale bar is using imperial units.
/// The default value for this property is <code>Locale.current.usesMetricSystem</code>.
@property (nonatomic) BOOL useMetricUnits;
/// Initializes a <code>ScaleBarViewOptions</code>.
/// \param position The position of the scale bar view.
///
/// \param margins The margins of the scale bar view.
///
/// \param visibility The visibility of the scale bar view.
///
/// \param useMetricUnits Whether the scale bar uses the metric system.
///
- (nonnull instancetype)initWithPosition:(enum TMBOrnamentPosition)position margins:(CGPoint)margins visibility:(enum TMBOrnamentVisibility)visibility useMetricUnits:(BOOL)useMetricUnits OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
SWIFT_CLASS("_TtC13MapboxMapObjC9TMBScheme")
@interface TMBScheme : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Slippy map tilenames scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull xyz;)
+ (TMBScheme * _Nonnull)xyz SWIFT_WARN_UNUSED_RESULT;
/// OSGeo spec scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull tms;)
+ (TMBScheme * _Nonnull)tms SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A spherical dome around the map that is always rendered behind all other layers.
/// Warning: As of v10.6.0, <code>Atmosphere</code> is the preferred method for atmospheric styling. Sky layer is not supported by the globe projection, and will be phased out in future major release.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-sky">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBSkyLayer")
@interface TMBSkyLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereColor;
/// A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereHaloColor;
/// Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0 degree is directly above, at zenith, and 90 degree at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSun;
/// Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSunIntensity;
/// Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using <code>sky-radial-progress</code>. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, <code>sky-gradient-radius</code>] centered at the position specified by <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradient;
/// Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0 degree is directly above, at zenith, and 90 degree at the horizon.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientCenter;
/// The angular distance (measured in degrees) from <code>sky-gradient-center</code> up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientRadius;
/// The opacity of the entire sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyOpacity;
/// Transition options for <code>skyOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable skyOpacityTransition;
/// The type of the sky
@property (nonatomic, strong) TMBValue * _Nullable skyType;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The type of the sky
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBSkyType")
@interface TMBSkyType : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Renders the sky with a gradient that can be configured with {@link SKY_GRADIENT_RADIUS} and {@link SKY_GRADIENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull gradient;)
+ (TMBSkyType * _Nonnull)gradient SWIFT_WARN_UNUSED_RESULT;
/// Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through {@link SKY_ATMOSPHERE_SUN}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull atmosphere;)
+ (TMBSkyType * _Nonnull)atmosphere SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A pre-specified location in the style where layer will be added to
/// (such as on top of existing land layers, but below all labels).
SWIFT_CLASS("_TtC13MapboxMapObjC7TMBSlot")
@interface TMBSlot : NSObject
/// Above POI labels and behind Place and Transit labels
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSlot * _Nonnull top;)
+ (TMBSlot * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// Above lines (roads, etc.) and behind 3D buildings
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSlot * _Nonnull middle;)
+ (TMBSlot * _Nonnull)middle SWIFT_WARN_UNUSED_RESULT;
/// Above polygons (land, landuse, water, etc.)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSlot * _Nonnull bottom;)
+ (TMBSlot * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Information about a Source
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceInfo")
@interface TMBSourceInfo : NSObject
/// The identifier of the source
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the source
@property (nonatomic, strong) TMBSourceType * _Nonnull type;
/// Create a <code>SourceInfo</code> value
/// \param id A source ID
///
/// \param type A source type
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(TMBSourceType * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Struct of supported Source Types
/// Docs : https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceType")
@interface TMBSourceType : NSObject
/// A vector tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull vector;)
+ (TMBSourceType * _Nonnull)vector SWIFT_WARN_UNUSED_RESULT;
/// A raster tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull raster;)
+ (TMBSourceType * _Nonnull)raster SWIFT_WARN_UNUSED_RESULT;
/// A raster DEM source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull rasterDem;)
+ (TMBSourceType * _Nonnull)rasterDem SWIFT_WARN_UNUSED_RESULT;
/// A GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull geoJson;)
+ (TMBSourceType * _Nonnull)geoJson SWIFT_WARN_UNUSED_RESULT;
/// An image source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull image;)
+ (TMBSourceType * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// A model source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull model;)
+ (TMBSourceType * _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class TMBStyleProjection;

@interface TMBStyleManager (SWIFT_EXTENSION(MapboxMapObjC))
/// Sets the projection.
/// \param projection The <code>StyleProjection</code> to apply to the style.
///
///
/// throws:
/// <code>StyleError</code> if the projection could not be applied.
- (void)setProjection:(TMBStyleProjection * _Nonnull)projection completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// The current projection.
- (TMBStyleProjection * _Nullable)projection SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBStyleProjectionName;

/// Describes the projection used to render the map.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleProjection")
@interface TMBStyleProjection : NSObject
/// The name of the projection.
@property (nonatomic, strong) TMBStyleProjectionName * _Nonnull name;
/// Initializes a projection
- (nonnull instancetype)initWithName:(TMBStyleProjectionName * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The name of the projection to be used for rendering the map.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBStyleProjectionName")
@interface TMBStyleProjectionName : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The Mercator projection is the default projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull mercator;)
+ (TMBStyleProjectionName * _Nonnull)mercator SWIFT_WARN_UNUSED_RESULT;
/// A globe projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull globe;)
+ (TMBStyleProjectionName * _Nonnull)globe SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The transition property for a layer.
/// A transition property controls timing for the interpolation between a
/// transitionable style property’s previous value and new value.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleTransition")
@interface TMBStyleTransition : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic) NSTimeInterval duration;
/// Length of time before a transition begins in seconds.
@property (nonatomic) NSTimeInterval delay;
/// Initiralizer for <code>StyleTransition</code>
/// \param duration Time for transition in seconds.
///
/// \param delay Time before transition begins in seconds.
///
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Enum representing the latest version of the Mapbox styles (as of publication). In addition,
/// you can provide a custom URL or earlier version of a Mapbox style by using the <code>.custom</code> case.
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBStyleURI")
@interface TMBStyleURI : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull streets;)
+ (TMBStyleURI * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull outdoors;)
+ (TMBStyleURI * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull light;)
+ (TMBStyleURI * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull dark;)
+ (TMBStyleURI * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull satellite;)
+ (TMBStyleURI * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull satelliteStreets;)
+ (TMBStyleURI * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Standard is a general-purpose style with 3D visualization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleURI * _Nonnull standard;)
+ (TMBStyleURI * _Nonnull)standard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An icon or a text label.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-symbol">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBSymbolLayer")
@interface TMBSymbolLayer : NSObject <TMBLayer>
/// Unique layer name
@property (nonatomic, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly, strong) TMBLayerType * _Nonnull type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except <code>BackgroundLayer</code>, <code>SkyLayer</code>, and <code>LocationIndicatorLayer</code>.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.
@property (nonatomic, strong) TMBSlot * _Nullable slot;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nonnull visibility;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable iconAllowOverlap;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable iconAnchor;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) TMBValue * _Nullable iconIgnorePlacement;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, strong) TMBValue * _Nullable iconImage;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable iconKeepUpright;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, strong) TMBValue * _Nullable iconOffset;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) TMBValue * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable iconPitchAlignment;
/// Rotates the icon clockwise.
@property (nonatomic, strong) TMBValue * _Nullable iconRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBValue * _Nullable iconRotationAlignment;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) TMBValue * _Nullable iconSize;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) TMBValue * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBValue * _Nullable symbolPlacement;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable symbolSortKey;
/// Distance between two symbol anchors.
@property (nonatomic, strong) TMBValue * _Nullable symbolSpacing;
/// Position symbol on buildings (both fill extrusions and models) roof tops. In order to have minimal impact on performance, this is supported only when <code>fill-extrusion-height</code> is not zoom-dependent and not edited after initial bucket creation. For fading in buildings when zooming in, fill-extrusion-vertical-scale should be used and symbols would raise with building roofs. Symbols are sorted by elevation, except in case when <code>viewport-y</code> sorting or <code>symbol-sort-key</code> are applied.
@property (nonatomic, strong) TMBValue * _Nullable symbolZElevate;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBValue * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable textAllowOverlap;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Font stack to use for displaying text.
@property (nonatomic, strong) TMBValue * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) TMBValue * _Nullable textIgnorePlacement;
/// Text justification options.
@property (nonatomic, strong) TMBValue * _Nullable textJustify;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable textKeepUpright;
/// Text tracking amount.
@property (nonatomic, strong) TMBValue * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) TMBValue * _Nullable textLineHeight;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) TMBValue * _Nullable textMaxAngle;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) TMBValue * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, strong) TMBValue * _Nullable textOffset;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) TMBValue * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable textPitchAlignment;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) TMBValue * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) TMBValue * _Nullable textRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBValue * _Nullable textRotationAlignment;
/// Font size.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBValue * _Nullable textTransform;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, strong) TMBValue * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, strong) TMBValue * _Nullable textWritingMode;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconColor;
/// Transition options for <code>iconColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconColorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable iconEmissiveStrength;
/// Transition options for <code>iconEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconEmissiveStrengthTransition;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloBlur;
/// Transition options for <code>iconHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloBlurTransition;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloColor;
/// Transition options for <code>iconHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloColorTransition;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloWidth;
/// Transition options for <code>iconHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloWidthTransition;
/// Controls the transition progress between the image variants of icon-image. Zero means the first variant is used, one is the second, and in between they are blended together.
@property (nonatomic, strong) TMBValue * _Nullable iconImageCrossFade;
/// Transition options for <code>iconImageCrossFade</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconImageCrossFadeTransition;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable iconOpacity;
/// Transition options for <code>iconOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconOpacityTransition;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslate;
/// Transition options for <code>iconTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconTranslateTransition;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslateAnchor;
/// The color with which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// Transition options for <code>textColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textColorTransition;
/// Controls the intensity of light emitted on the source features. This property works only with 3D light, i.e. when <code>lights</code> root property is defined.
@property (nonatomic, strong) TMBValue * _Nullable textEmissiveStrength;
/// Transition options for <code>textEmissiveStrength</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textEmissiveStrengthTransition;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable textHaloBlur;
/// Transition options for <code>textHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloBlurTransition;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) TMBValue * _Nullable textHaloColor;
/// Transition options for <code>textHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloColorTransition;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) TMBValue * _Nullable textHaloWidth;
/// Transition options for <code>textHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloWidthTransition;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textOpacity;
/// Transition options for <code>textOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textOpacityTransition;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable textTranslate;
/// Transition options for <code>textTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textTranslateTransition;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable textTranslateAnchor;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Label placement relative to its geometry.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBSymbolPlacement")
@interface TMBSymbolPlacement : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The label is placed at the point where the geometry is located.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull point;)
+ (TMBSymbolPlacement * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
/// The label is placed along the line of the geometry. Can only be used on LineString and Polygon geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull line;)
+ (TMBSymbolPlacement * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// The label is placed at the center of the line of the geometry. Can only be used on LineString and Polygon geometries. Note that a single feature in a vector tile may contain multiple line geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull lineCenter;)
+ (TMBSymbolPlacement * _Nonnull)lineCenter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBSymbolZOrder")
@interface TMBSymbolZOrder : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// Sorts symbols by symbol sort key if set. Otherwise, sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBSymbolZOrder * _Nonnull auto_;)
+ (TMBSymbolZOrder * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull viewportY;)
+ (TMBSymbolZOrder * _Nonnull)viewportY SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by symbol sort key if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull source;)
+ (TMBSymbolZOrder * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The global terrain source.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#terrain">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBTerrain")
@interface TMBTerrain : NSObject
- (nonnull instancetype)initWithSourceId:(NSString * _Nonnull)sourceId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, strong) TMBValue * _Nullable exaggeration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Part of the text placed closest to the anchor.
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBTextAnchor")
@interface TMBTextAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The center of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull center;)
+ (TMBTextAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull left;)
+ (TMBTextAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull right;)
+ (TMBTextAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull top;)
+ (TMBTextAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottom;)
+ (TMBTextAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topLeft;)
+ (TMBTextAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topRight;)
+ (TMBTextAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomLeft;)
+ (TMBTextAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomRight;)
+ (TMBTextAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Text justification options.
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBTextJustify")
@interface TMBTextJustify : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The text is aligned towards the anchor position.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextJustify * _Nonnull auto_;)
+ (TMBTextJustify * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the left.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull left;)
+ (TMBTextJustify * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The text is centered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull center;)
+ (TMBTextJustify * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the right.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull right;)
+ (TMBTextJustify * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Orientation of text when map is pitched.
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBTextPitchAlignment")
@interface TMBTextPitchAlignment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The text is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull map;)
+ (TMBTextPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull viewport;)
+ (TMBTextPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link TEXT_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextPitchAlignment * _Nonnull auto_;)
+ (TMBTextPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBTextRotationAlignment")
@interface TMBTextRotationAlignment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns text east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns text x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull map;)
+ (TMBTextRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull viewport;)
+ (TMBTextRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextRotationAlignment * _Nonnull auto_;)
+ (TMBTextRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
SWIFT_CLASS("_TtC13MapboxMapObjC16TMBTextTransform")
@interface TMBTextTransform : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The text is not altered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull none;)
+ (TMBTextTransform * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in uppercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull uppercase;)
+ (TMBTextTransform * _Nonnull)uppercase SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in lowercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull lowercase;)
+ (TMBTextTransform * _Nonnull)lowercase SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>text-translate</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBTextTranslateAnchor")
@interface TMBTextTranslateAnchor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// The text is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull map;)
+ (TMBTextTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull viewport;)
+ (TMBTextTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBTextWritingMode")
@interface TMBTextWritingMode : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue;
/// If a text’s language supports horizontal writing mode, symbols would be laid out horizontally.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull horizontal;)
+ (TMBTextWritingMode * _Nonnull)horizontal SWIFT_WARN_UNUSED_RESULT;
/// If a text’s language supports vertical writing mode, symbols would be laid out vertically.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull vertical;)
+ (TMBTextWritingMode * _Nonnull)vertical SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MBXTileRegionLoadProgress;
@class MBXTileRegion;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBTileStoreObserver_")
@protocol TMBTileStoreObserver
/// Called whenever the load progress of a <code>TileRegion</code> changes.
- (void)onRegionLoadProgressForId:(NSString * _Nonnull)id progress:(MBXTileRegionLoadProgress * _Nonnull)progress;
/// Called when a <code>TileRegion</code> load finishes.
- (void)onRegionLoadFinishedForId:(NSString * _Nonnull)id region:(MBXTileRegion * _Nullable)region error:(NSError * _Nullable)error;
/// Called when a <code>TileRegion</code> was removed.
- (void)onRegionRemovedForId:(NSString * _Nonnull)id;
/// Called when the geometry of a <code>TileRegion</code> was modified.
- (void)onRegionGeometryChangedForId:(NSString * _Nonnull)id geometry:(MBXGeometry * _Nullable)geometry;
/// Called when the user-provided metadata associated with a <code>TileRegion</code> was changed.
- (void)onRegionMetadataChangedForId:(NSString * _Nonnull)id value:(id _Nonnull)value;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBValue")
@interface TMBValue : NSObject
@property (nonatomic, readonly) id _Nullable constant;
@property (nonatomic, readonly, strong) TMBExpression * _Nullable expression;
- (nonnull instancetype)initWithConstant:(id _Nullable)constant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpression:(TMBExpression * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
+ (TMBValue * _Nonnull)constant:(NSObject * _Nonnull)constant SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)intValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)doubleValue:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)expression:(TMBExpression * _Nonnull)expression SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolPlacement:(TMBSymbolPlacement * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)modelScaleMode:(TMBModelScaleMode * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)skyType:(TMBSkyType * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)modelType:(TMBModelType * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBVisibility : NSInteger;

@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)visibility:(enum TMBVisibility)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lightType:(TMBLightType * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)encoding:(TMBEncoding * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconPitchAlignment:(TMBIconPitchAlignment * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textPitchAlignment:(TMBTextPitchAlignment * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)sourceType:(TMBSourceType * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)styleURI:(TMBStyleURI * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textWritingMode:(TMBTextWritingMode * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textAnchor:(TMBTextAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textRotationAlignment:(TMBTextRotationAlignment * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTextFit:(TMBIconTextFit * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTransform:(TMBTextTransform * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconAnchor:(TMBIconAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillTranslateAnchor:(TMBFillTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)styleProjectionName:(TMBStyleProjectionName * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineTranslateAnchor:(TMBLineTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconRotationAlignment:(TMBIconRotationAlignment * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTranslateAnchor:(TMBIconTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)layerType:(TMBLayerType * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTranslateAnchor:(TMBTextTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineJoin:(TMBLineJoin * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchAlignment:(TMBCirclePitchAlignment * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchScale:(TMBCirclePitchScale * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)expressionOperator:(TMBExpressionOperator * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circleTranslateAnchor:(TMBCircleTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolZOrder:(TMBSymbolZOrder * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineCap:(TMBLineCap * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillExtrusionTranslateAnchor:(TMBFillExtrusionTranslateAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textJustify:(TMBTextJustify * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)rasterResampling:(TMBRasterResampling * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)scheme:(TMBScheme * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)hillshadeIlluminationAnchor:(TMBHillshadeIlluminationAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end



@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)anchor:(TMBAnchor * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end







































/// A vector tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#vector">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBVectorSource")
@interface TMBVectorSource : NSObject <TMBSource>
@property (nonatomic, readonly, strong) TMBSourceType * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) TMBScheme * _Nullable scheme;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>. If specified as a string for a vector tile source, the same property is used across all its source layers. If specified as an object only specified source layers will have id overriden, others will fallback to original feature id
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MBMViewAnnotationAnchorConfig;

/// Creates a view annotation.
/// Use view annotations if you need to display interactive UIView bound to
/// a geographical coordinate or map feature.
/// The view annotations are great for displaying unique interactive features. However, they may be suboptimal for large amounts of data and don’t support clustering. For those cases use <code>PointAnnotation</code> or Runtime Styling API, for example, <code>SymbolLayer</code> with <code>GeoJSONSource</code>.
/// note:
/// View Annotations appear above all content of MapView (e.g. layers, annotations, puck). If you need to display annotation between layers or below puck, use <code>PointAnnotation</code>.
/// To display a view annotation configure a UIView, create <code>ViewAnnotation</code>, and add it to the view annotation manager:
/// \code
/// let view = CustomView()
/// view.icon = UIImage(named: "traffic-icon")
/// let annotation = ViewAnnotation(
///   coordinate: CLLocationCoordinate(latitude: 10, longitude: 10),
///   view: view)
/// mapView.viewAnnotations.add(annotation)
///
/// \endcodeThe annotation can be displayed on a layer feature referenced by it’s <code>layerId</code> and <code>featureId</code>:
/// \code
/// annotation.annotatedFeature = .layerFeature(layerId: "route-line", featureId: "sf-la")
///
/// \endcodeThe view annotation automatically inserts and removes it’s view into the view hierarchy and updates its <code>isHidden</code> property.
/// important:
/// Don’t set <code>UIView.isHidden</code> property to hide the annotation. Instead, use <code>visible</code> property.
/// When view content or layout is updated, use <code>setNeedsUpdateSize()</code> to update the the annotation size. It’s safe to use it multiple times, only one update will be performed.
/// \code
/// view.hintText = "Less Traffic"
/// annotation.setNeedsUpdateSize() // Updates the annotation size.
///
/// \endcodenote:
/// The <code>ViewAnnotation</code> uses <code>UIView.systemLayoutSizeFitting(_:)</code> to measure the view size. Make sure that your view returns the correct size (e.g. implemented using AutoLayout, or returns correct size from <code>UIView.sizeThatFits(_:)</code> when layout is manual).
/// To remove annotation when it’s no longer needed, use <code>remove()</code> method.
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBViewAnnotation")
@interface TMBViewAnnotation : NSObject
/// Annotation view.
@property (nonatomic, readonly, strong) UIView * _Nonnull view;
/// Associates the view annotation with the feature geometry.
/// The geometry may be any <code>Geometry</code> or a feature rendered on a specified layer.
@property (nonatomic, strong) TMBAnnotatedFeature * _Nonnull annotatedFeature;
/// If true, the annotation will be visible even if it collides with other previously drawn annotations.
/// The property is <code>false</code> by default.
@property (nonatomic) BOOL allowOverlap;
/// When <code>false</code>, the annotation won’t be shown on top of Puck.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL allowOverlapWithPuck;
/// When <code>false</code>, the annotation will be displayed even if it go beyond camera padding.
/// The camera padding is set via <code>MapboxMap/setCamera(to:)</code>.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL ignoreCameraPadding;
/// Specifies if this view annotation is visible or not.
/// The property is <code>true</code> by default.
@property (nonatomic) BOOL visible;
/// Specifies if this view annotation is selected meaning it should be placed on top of others.
/// The property is <code>false</code> by default.
@property (nonatomic) BOOL selected;
/// A list of anchor configurations available.
/// The annotation will automatically pick the first best anchor position depending on position
/// relative to other elements on the map.
/// If not specified, the annotation will be placed in center.
/// The <code>onAnchorChanged</code> is called when the effective position is updated:
/// \code
/// let view = CustomView()
/// let annotation = ViewAnnotation(
///     annotatedFeature: .layerFeature(layerId: "route-line", featureId: "sf-la"),
///     view: view)
///
/// // Allow top and bottom anchor directions.
/// annotation.variableAnchors = [
///   ViewAnnotationAnchorConfig(anchor: .top),
///   ViewAnnotationAnchorConfig(anchor: .bottom)
/// ]
///
/// annotation.onAnchorChanged = { config in
///     // Update the view's anchor to the newly picked one.
///     view.anchor = config.anchor
/// }
///
/// \endcode
@property (nonatomic, copy) NSArray<MBMViewAnnotationAnchorConfig *> * _Nonnull variableAnchors;
/// Called when visibility of annotation is changed.
/// The annotation becomes hidden when it goes out of MapView’s bounds or <code>visible</code> property is changed.
/// The callback takes <code>true</code> when annotation is visible.
@property (nonatomic, readonly, copy) void (^ _Nullable onVisibilityChanged)(BOOL);
/// Called when <code>anchorConfig</code> is changed.
/// See <code>variableAnchors</code>.
/// The callback takes the <code>anchorConfig</code> parameter which represents the selected anchor configuration.
@property (nonatomic, readonly, copy) void (^ _Nullable onAnchorChanged)(MBMViewAnnotationAnchorConfig * _Nonnull);
/// Called when <code>anchorCoordinate</code> is changed.
@property (nonatomic, readonly, copy) void (^ _Nullable onAnchorCoordinateChanged)(CLLocationCoordinate2D);
/// Called when view frame is changed.
/// The callback takes the <code>frame</code> parameter.
@property (nonatomic, readonly, copy) void (^ _Nullable onFrameChanged)(CGRect);
/// Currently selected anchor configuration.
@property (nonatomic, readonly, strong) MBMViewAnnotationAnchorConfig * _Nullable anchorConfig;
/// The actual geographical coordinate used for positioning this annotation.
@property (nonatomic, readonly, strong) NSValue * _Nullable anchorCoordinate;
/// Creates an annotation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     annotatedFeature: The feature the annotation will be bound to. It may be a <code>Geometry</code>,
///     such as <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, or a feature rendered on a layer.
///   </li>
///   <li>
///     view: View to use as annotation.
///   </li>
/// </ul>
+ (TMBViewAnnotation * _Nonnull)fromAnnotatedFeature:(TMBAnnotatedFeature * _Nonnull)annotatedFeature view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Creates an annotation at specified coordinate.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     coordinate: Geographical coordinate of the annotation.
///   </li>
///   <li>
///     view: View to use as annotation.
///   </li>
/// </ul>
+ (TMBViewAnnotation * _Nonnull)fromCoordinate:(CLLocationCoordinate2D)coordinate view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Creates a view annotation on feature rendered on a layer.
/// \param layerId Layer identifier which renders the feature.
///
/// \param featureId Feature identifier. If not specified, the annotation will appear on any feature from that layer.
///
/// \param content The view to place on the map.
///
+ (TMBViewAnnotation * _Nonnull)fromLayerId:(NSString * _Nonnull)layerId featureId:(NSString * _Nullable)featureId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Removes view annotation.
/// This method removes the view from its superview.
- (void)remove;
/// Invalidates the current size of view annotation.
/// Call this method when the managed view layout is updated. The annotation will be repositioned according to the new size in the next rendering call.
- (void)setNeedsUpdateSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC24TMBViewAnnotationManager")
@interface TMBViewAnnotationManager : NSObject
- (void)addWithAnnotation:(TMBViewAnnotation * _Nonnull)annotation;
- (void)removeAllViewAnnotations;
/// Calculates <code>CameraOptions</code> to fit the list of view annotations.
/// important:
/// This API isn’t supported by Globe projection.
/// \param ids The list of annotations ids to be framed.
///
/// \param padding See <code>CameraOptions/padding</code>.
///
/// \param bearing See <code>CameraOptions/bearing</code>.
///
/// \param pitch See <code>CameraOptions/pitch</code>.
///
- (TMBCameraOptions * _Nullable)cameraForAnnotations:(NSArray<TMBViewAnnotation *> * _Nonnull)annotations padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Stores layout and visibility settings for a view annotation.
/// important:
/// <code>ViewAnnotationOptions</code> is deprecated and will be removed in future releases. Use <code>ViewAnnotation</code> instead.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBViewAnnotationOptions")
@interface TMBViewAnnotationOptions : NSObject
@property (nonatomic, strong) TMBAnnotatedFeature * _Nullable annotatedFeature;
/// View annotation width in pixels.
@property (nonatomic, strong) NSNumber * _Nullable width;
/// View annotation height in pixels.
@property (nonatomic, strong) NSNumber * _Nullable height;
/// If true, the annotation will be visible even if it collides with other previously drawn annotations.
/// If allowOverlap is null, default value <code>false</code> will be applied.
/// Note: When the value is true, the ordering of the views are determined by the order of their addition.
@property (nonatomic, strong) NSNumber * _Nullable allowOverlap;
/// When <code>false</code>, the annotation won’t be shown on top of the Puck.
@property (nonatomic, strong) NSNumber * _Nullable allowOverlapWithPuck;
/// Specifies if this view annotation is visible or not.
/// Note: If this property is not specified explicitly when creating / updating view annotation, visibility will be
/// handled automatically based on the <code>ViewAnnotation</code> view’s visibility e.g. if actual view is set to be not visible the SDK
/// will automatically update view annotation to have <code>visible = false</code>.
/// If visible is null, default value <code>true</code> will be applied.
@property (nonatomic, strong) NSNumber * _Nullable visible;
@property (nonatomic, copy) NSArray<MBMViewAnnotationAnchorConfig *> * _Nullable variableAnchors;
/// Specifies if this view annotation is selected meaning it should be placed on top of others.
/// If selected in null, default value <code>false</code> will be applied.
@property (nonatomic, strong) NSNumber * _Nullable selected;
/// When <code>false</code>, the annotation will be displayed even if it go beyond camera padding.
@property (nonatomic, strong) NSNumber * _Nullable ignoreCameraPadding;
/// Initializes a <code>ViewAnnotationOptions</code>
- (nonnull instancetype)initWithAnnotatedFeature:(TMBAnnotatedFeature * _Nullable)annotatedFeature width:(NSNumber * _Nullable)width height:(NSNumber * _Nullable)height allowOverlap:(NSNumber * _Nullable)allowOverlap allowOverlapWithPuck:(NSNumber * _Nullable)allowOverlapWithPuck visible:(NSNumber * _Nullable)visible selected:(NSNumber * _Nullable)selected variableAnchors:(NSArray<MBMViewAnnotationAnchorConfig *> * _Nullable)variableAnchors ignoreCameraPadding:(NSNumber * _Nullable)ignoreCameraPadding OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBVisibility, open) {
/// The layer is shown.
  TMBVisibilityVisible = 0,
/// The layer is not shown.
  TMBVisibilityNone = 1,
};

@class MBXTileRegionLoadOptions;
@class MBXTilesetDescriptor;

@interface MBXTileStore (SWIFT_EXTENSION(MapboxMapObjC))
/// Loads a new tile region or updates the existing one.
/// Creating of a new region requires providing both geometry and tileset
/// descriptors to the given load options, otherwise the load request fails
/// with <code>RegionNotFound</code> error.
/// If a tile region with the given id already exists, it gets updated with
/// the values provided to the given load options. The missing resources get
/// loaded and the expired resources get updated.
/// If there are no values provided to the given load options, the existing tile
/// region gets refreshed: the missing resources get loaded and the expired
/// resources get updated.
/// A failed load request can be reattempted with another <code>loadTileRegion()</code> call.
/// If there is already a pending loading operation for the tile region with
/// the given id, the pending loading operation will fail with an error of
/// <code>Canceled</code> type.
/// note:
///
/// The user-provided callbacks will be executed on a
/// TileStore-controlled worker thread; it is the responsibility of the
/// user to dispatch to a user-controlled thread.
/// important:
///
/// By default, users may download up to 750 tile packs for offline
/// use across all regions. If the limit is hit, any loadRegion call
/// will fail until excess regions are deleted. This limit is subject
/// to change. Please contact Mapbox if you require a higher limit.
/// Additional charges may apply.
/// \param id The tile region identifier.
///
/// \param loadOptions The tile region load options.
///
/// \param progress Invoked multiple times to report progress of the loading
/// operation. Optional, default is nil.
///
/// \param completion Invoked only once upon success, failure, or cancelation
/// of the loading operation. Any <code>Result</code> error could be of type
/// <code>TileRegionError</code>.
///
///
/// returns:
/// A <code>Cancelable</code> object to cancel the load request
- (TMBCancelable * _Nonnull)loadTileRegionForId:(NSString * _Nonnull)id loadOptions:(MBXTileRegionLoadOptions * _Nonnull)loadOptions progress:(MBXTileRegionLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
/// Checks if a tile region with the given id contains all tilesets from all
/// of the given tileset descriptors.
/// note:
///
/// The user-provided callbacks will be executed on a TileStore-controlled
/// worker thread; it is the responsibility of the user to dispatch to a
/// user-controlled thread.
/// \param id The tile region identifier.
///
/// \param descriptors The array of tileset descriptors.
///
/// \param completion The result callback. Any <code>Result</code> error could be of type
/// <code>TileRegionError</code>.
///
- (void)tileRegionContainsDescriptorsForId:(NSString * _Nonnull)id descriptors:(NSArray<MBXTilesetDescriptor *> * _Nonnull)descriptors completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Fetch the array of the existing tile regions.
/// note:
///
/// The user-provided callbacks will be executed on a TileStore-controlled
/// worker thread; it is the responsibility of the user to dispatch to a
/// user-controlled thread.
/// \param completion The result callback. Any <code>Result</code> error should be
/// of type <code>TileRegionError</code>.
///
- (void)allTileRegions:(void (^ _Nonnull)(NSArray<MBXTileRegion *> * _Nullable, NSError * _Nullable))completion;
/// Returns a tile region given its id.
/// note:
///
/// The user-provided callbacks will be executed on a TileStore-controlled
/// worker thread; it is the responsibility of the user to dispatch to a
/// user-controlled thread.
/// \param id The tile region id.
///
/// \param completion The Result callback. Any <code>Result</code> error could be of type
/// <code>TileRegionError</code>.
///
- (void)tileRegionForId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
/// Fetch a tile region’s associated geometry
/// The region associated geometry is provided by the client and it represents
/// the area, which the tile region must cover. The actual regional geometry
/// depends on the tiling scheme and might exceed the associated geometry.
/// note:
///
/// The user-provided callbacks will be executed on a TileStore-controlled
/// worker thread; it is the responsibility of the user to dispatch to a
/// user-controlled thread.
/// \param id The tile region id.
///
/// \param completion The Result closure. Any <code>Result</code> error could be of type
/// <code>TileRegionError</code>.
///
- (void)tileRegionGeometryForId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(MBXGeometry * _Nullable, NSError * _Nullable))completion;
/// Fetch a tile region’s associated metadata
/// The region’s associated metadata that a user previously set for this region.
/// \param id The tile region id.
///
/// \param completion The Result closure. Any <code>Result</code> error could be of type
/// <code>TileRegionError</code>.
///
- (void)tileRegionMetadataForId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/// Allows observing a tile store’s activity
/// \param observer The object to be notified when events occur. TileStore holds a strong reference to this object until the subscription is canceled.
///
///
/// returns:
/// An object that can be used to cancel the subscription.
- (TMBCancelable * _Nonnull)subscribe:(id <TMBTileStoreObserver> _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
/// An overloaded version of <code>removeTileRegion(forId:)</code> with a callback for feedback.
/// On successful tile region removal, the given callback is invoked with the removed tile region.
/// Otherwise, the given callback is invoked with an error.
/// \param id The tile region identifier.
///
/// \param callback A callback to be invoked when a tile region was removed. 
///
- (void)removeRegionForId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TileStoreFactory")
@interface TileStoreFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Returns a shared <code>TileStore</code> instance at the default location. Creates a
/// new one if one doesn’t yet exist.
/// <ul>
///   <li>
///     See Also:
///     <code>shared(for:)</code>
///   </li>
/// </ul>
+ (MBXTileStore * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
/// Gets a <code>TileStore</code> instance for the given storage path. Creates a new one
/// if one doesn’t exist.
/// If the given path is empty, the tile store at the default location is
/// returned.
/// On iOS, this storage path is excluded from automatic cloud backup.
/// \param filePathURL The path on disk where tiles and metadata will be stored
///
///
/// returns:
/// TileStore instance.
+ (MBXTileStore * _Nonnull)sharedFor:(NSURL * _Nonnull)filePathURL SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
