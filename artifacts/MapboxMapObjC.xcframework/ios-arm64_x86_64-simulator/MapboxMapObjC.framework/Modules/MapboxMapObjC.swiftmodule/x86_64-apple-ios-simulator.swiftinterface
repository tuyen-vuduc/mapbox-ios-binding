// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios15.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapboxMapObjC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation/*.CoreLocation*/
import Foundation
import MapboxCommon
import MapboxCoreMaps
@_exported import MapboxMapObjC
import MapboxMaps
import MapboxMobileEvents
import Swift
import Turf
import _Concurrency
import _StringProcessing
@objc public protocol TMBAnnotation {
  @objc var id: Swift.String { get }
  @objc var geometryInJSON: Swift.String { get }
  @objc var userInfo: [Swift.String : Any]? { get }
}
@objc extension MapboxCoreMaps.OfflineManager {
  @objc dynamic public func loadStyle(styleUriString: Swift.String, styleLoadOptions: MapboxCoreMaps.StylePackLoadOptions, progress: @escaping MapboxCoreMaps.StylePackLoadProgressCallback, completion: @escaping (MapboxCoreMaps.StylePack?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allStylePacks(_ completion: @escaping ([MapboxCoreMaps.StylePack]?, (any Swift.Error)?) -> Swift.Void)
}
@objc extension MapboxCommon.TileStore {
  @objc dynamic public class func getDefault() -> MapboxCommon.TileStore
  @discardableResult
  @objc dynamic public func loadTileRegion(forId id: Swift.String, loadOptions: MapboxCommon.TileRegionLoadOptions, progress: MapboxCommon.TileRegionLoadProgressCallback? = nil, completion: @escaping (MapboxCommon.TileRegion?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allTileRegions(_ completion: @escaping ([MapboxCommon.TileRegion]?, (any Swift.Error)?) -> Swift.Void)
}
@objc public protocol NamedString {
  @objc func stringValue() -> Swift.String
}
@objc public enum TMBOrnamentVisibility : Swift.Int {
  case adaptive
  case hidden
  case visible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setTerrain(_ value: MapboxMapObjC.TMBTerrain, onError: ((any Swift.Error) -> Swift.Void)?)
}
@objc open class TMBTerrain : ObjectiveC.NSObject {
  public var sourceId: Swift.String
  @objc public init(sourceId: Swift.String)
  @objc public var exaggeration: MapboxMapObjC.TMBValue?
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setCamera(to cameraOptions: MapboxCoreMaps.CameraOptions)
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func ornamentsOptionsScaleBarVisibility(_ value: MapboxMapObjC.TMBOrnamentVisibility)
}
extension MapboxMaps.MapView {
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onMapLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onMapLoadingError(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onMapIdle(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onStyleDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onStyleLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onStyleImageMissing(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onStyleImageRemoveUnused(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onSourceDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onSourceAdded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onSourceRemoved(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onRenderFrameStarted(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onRenderFrameFinished(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onEvenCameraChanged(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onResourceRequest(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationDelegate(_ delegate: any MapboxMaps.LocationPermissionsDelegate)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationRequestTemporaryFullAccuracyPermissions(_ customKey: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func puck2D(_ build: ((_ builder: MapboxMapObjC.Puck2DConfigurationBuilder) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func puckBearingSource(_ source: MapboxMapObjC.TMBPuckBearingSource)
}
extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func preferredFrameRateRange(_ value: QuartzCore.CAFrameRateRange)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions() -> [Foundation.NSNumber]
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions(_ value: [Foundation.NSNumber])
}
@_hasMissingDesignatedInitializers @objc open class TMBCancelable : ObjectiveC.NSObject {
  @objc public func cancel()
  @objc deinit
}
extension MapboxMaps.ResourceOptions {
  public init(_ objcValue: MapboxCoreMaps.ResourceOptions)
}
@_hasMissingDesignatedInitializers @objc open class TMBStyle : ObjectiveC.NSObject {
  @objc public func addImage(_ image: UIKit.UIImage, id: Swift.String, completion: ((any Swift.Error) -> Swift.Void)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class MapViewFactory : ObjectiveC.NSObject {
  @objc public static func create(frame: CoreFoundation.CGRect, options: MapboxMaps.MapInitOptions?) -> MapboxMaps.MapView
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSource(_ id: Swift.String, properties: [Swift.String : Any], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeSource(_ id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func sourceExists(_ id: Swift.String) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSourceProperties(for id: Swift.String, properties: [Swift.String : Any], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getSourceProperties(for id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?) -> [Swift.String : Any]
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSource(id: Swift.String, geometry: MapboxMapObjC.TMBGeometry, onError: ((any Swift.Error) -> Swift.Void)?)
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRasterDemSource(_ id: Swift.String, configure: (MapboxMapObjC.RasterDemSourceBuilder) -> Swift.Void, onError: ((any Swift.Error) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers @objc open class RasterDemSourceBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func url(_ value: Swift.String?) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func tiles(_ value: [Swift.String]?) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func bounds(_ value: [Swift.Double]?) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func minzoom(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func maxzoom(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func tileSize(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func attribution(_ value: Swift.String?) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func encoding(_ value: MapboxMapObjC.TMBEncoding?) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func volatile(_ value: Swift.Bool) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func prefetchZoomDelta(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func minimumTileUpdateInterval(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func maxOverscaleFactorForParentTiles(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func tileRequestsDelay(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @discardableResult
  @objc public func tileNetworkRequestsDelay(_ value: Swift.Double) -> MapboxMapObjC.RasterDemSourceBuilder
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TMBAnnotationManager {
  @objc var id: Swift.String { get }
  @objc var sourceId: Swift.String { get }
  @objc var layerId: Swift.String { get }
}
@objc public protocol TMBAnnotationInteractionDelegate {
  @objc func annotationManager(_ manager: any MapboxMapObjC.TMBAnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMapObjC.TMBAnnotation])
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateSkyLayer(_ id: Swift.String, configure: (MapboxMapObjC.SkyLayerBuilder) -> Swift.Void, onError: ((any Swift.Error) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc open class SkyLayerBuilder : ObjectiveC.NSObject, MapboxMapObjC.LayerBuilder {
  public typealias T = MapboxMaps.SkyLayer
  final public let id: Swift.String
  @objc public class func withId(_ id: Swift.String) -> MapboxMapObjC.SkyLayerBuilder
  public func create() -> MapboxMaps.SkyLayer
  public func update(_ layer: inout MapboxMaps.SkyLayer)
  @objc public func filter(_ value: MapboxMapObjC.TMBExpression?)
  @objc public func source(_ value: Swift.String?)
  @objc public func sourceLayer(_ value: Swift.String?)
  @objc public func minZoom(_ value: Foundation.NSNumber?)
  @objc public func maxZoom(_ value: Foundation.NSNumber?)
  @objc public func visibility(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyAtmosphereColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyAtmosphereHaloColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyAtmosphereSun(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyAtmosphereSunIntensity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyGradient(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyGradientCenter(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyGradientRadius(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyOpacity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func skyOpacityTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func skyType(_ value: MapboxMapObjC.TMBValue?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBVisibility : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let visible: MapboxMapObjC.TMBVisibility
  @objc public static let none: MapboxMapObjC.TMBVisibility
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineCap : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let butt: MapboxMapObjC.TMBLineCap
  @objc public static let round: MapboxMapObjC.TMBLineCap
  @objc public static let square: MapboxMapObjC.TMBLineCap
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineJoin : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let bevel: MapboxMapObjC.TMBLineJoin
  @objc public static let round: MapboxMapObjC.TMBLineJoin
  @objc public static let miter: MapboxMapObjC.TMBLineJoin
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let center: MapboxMapObjC.TMBIconAnchor
  @objc public static let left: MapboxMapObjC.TMBIconAnchor
  @objc public static let right: MapboxMapObjC.TMBIconAnchor
  @objc public static let top: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottom: MapboxMapObjC.TMBIconAnchor
  @objc public static let topLeft: MapboxMapObjC.TMBIconAnchor
  @objc public static let topRight: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottomLeft: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottomRight: MapboxMapObjC.TMBIconAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconPitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconPitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBIconPitchAlignment
  @objc public static let auto: MapboxMapObjC.TMBIconPitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconRotationAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconRotationAlignment
  @objc public static let viewport: MapboxMapObjC.TMBIconRotationAlignment
  @objc public static let auto: MapboxMapObjC.TMBIconRotationAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconTextFit : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let none: MapboxMapObjC.TMBIconTextFit
  @objc public static let width: MapboxMapObjC.TMBIconTextFit
  @objc public static let height: MapboxMapObjC.TMBIconTextFit
  @objc public static let both: MapboxMapObjC.TMBIconTextFit
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSymbolPlacement : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let point: MapboxMapObjC.TMBSymbolPlacement
  @objc public static let line: MapboxMapObjC.TMBSymbolPlacement
  @objc public static let lineCenter: MapboxMapObjC.TMBSymbolPlacement
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSymbolZOrder : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let auto: MapboxMapObjC.TMBSymbolZOrder
  @objc public static let viewportY: MapboxMapObjC.TMBSymbolZOrder
  @objc public static let source: MapboxMapObjC.TMBSymbolZOrder
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let center: MapboxMapObjC.TMBTextAnchor
  @objc public static let left: MapboxMapObjC.TMBTextAnchor
  @objc public static let right: MapboxMapObjC.TMBTextAnchor
  @objc public static let top: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottom: MapboxMapObjC.TMBTextAnchor
  @objc public static let topLeft: MapboxMapObjC.TMBTextAnchor
  @objc public static let topRight: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottomLeft: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottomRight: MapboxMapObjC.TMBTextAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextJustify : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let auto: MapboxMapObjC.TMBTextJustify
  @objc public static let left: MapboxMapObjC.TMBTextJustify
  @objc public static let center: MapboxMapObjC.TMBTextJustify
  @objc public static let right: MapboxMapObjC.TMBTextJustify
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextPitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextPitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBTextPitchAlignment
  @objc public static let auto: MapboxMapObjC.TMBTextPitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextRotationAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextRotationAlignment
  @objc public static let viewport: MapboxMapObjC.TMBTextRotationAlignment
  @objc public static let auto: MapboxMapObjC.TMBTextRotationAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextTransform : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let none: MapboxMapObjC.TMBTextTransform
  @objc public static let uppercase: MapboxMapObjC.TMBTextTransform
  @objc public static let lowercase: MapboxMapObjC.TMBTextTransform
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFillTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBIconTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBTextTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCirclePitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCirclePitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBCirclePitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCirclePitchScale : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCirclePitchScale
  @objc public static let viewport: MapboxMapObjC.TMBCirclePitchScale
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCircleTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCircleTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBCircleTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFillExtrusionTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillExtrusionTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillExtrusionTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBRasterResampling : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let linear: MapboxMapObjC.TMBRasterResampling
  @objc public static let nearest: MapboxMapObjC.TMBRasterResampling
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBHillshadeIlluminationAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBHillshadeIlluminationAnchor
  @objc public static let viewport: MapboxMapObjC.TMBHillshadeIlluminationAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSkyType : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let gradient: MapboxMapObjC.TMBSkyType
  @objc public static let atmosphere: MapboxMapObjC.TMBSkyType
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBAnchor
  @objc public static let viewport: MapboxMapObjC.TMBAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleProjectionName : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let mercator: MapboxMapObjC.TMBStyleProjectionName
  @objc public static let globe: MapboxMapObjC.TMBStyleProjectionName
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextWritingMode : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let horizontal: MapboxMapObjC.TMBTextWritingMode
  @objc public static let vertical: MapboxMapObjC.TMBTextWritingMode
  @objc deinit
}
@objc open class TMBCircleAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.CircleAnnotation
  public init(swiftValue: MapboxMaps.CircleAnnotation)
  @objc public class func from(center coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBCircleAnnotation
  @objc public var circleSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleRadius: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBCircleAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBCircleAnnotation] {
    @objc get
    @objc set
  }
  final public let swiftValue: MapboxMaps.CircleAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)?
  public init(_ swiftValue: MapboxMaps.CircleAnnotationManager)
  @objc public var circlePitchAlignment: MapboxMapObjC.TMBCirclePitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var circlePitchScale: MapboxMapObjC.TMBCirclePitchScale? {
    @objc get
    @objc set
  }
  @objc public var circleTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var circleTranslateAnchor: MapboxMapObjC.TMBCircleTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public protocol TMBGeoData {
}
@_hasMissingDesignatedInitializers @objc open class TMBGeometry : ObjectiveC.NSObject {
  final public let data: any MapboxMapObjC.TMBGeoData
  @objc public class func from(data: any MapboxMapObjC.TMBGeoData) -> MapboxMapObjC.TMBGeometry
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateSymbolLayer(_ id: Swift.String, configure: (MapboxMapObjC.SymbolLayerBuilder) -> Swift.Void, onError: ((any Swift.Error) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc open class SymbolLayerBuilder : ObjectiveC.NSObject, MapboxMapObjC.LayerBuilder {
  public typealias T = MapboxMaps.SymbolLayer
  final public let id: Swift.String
  @objc public class func withId(_ id: Swift.String) -> MapboxMapObjC.SymbolLayerBuilder
  public func create() -> MapboxMaps.SymbolLayer
  public func update(_ layer: inout MapboxMaps.SymbolLayer)
  @objc public func filter(_ value: MapboxMapObjC.TMBExpression?)
  @objc public func source(_ value: Swift.String?)
  @objc public func sourceLayer(_ value: Swift.String?)
  @objc public func minZoom(_ value: Foundation.NSNumber?)
  @objc public func maxZoom(_ value: Foundation.NSNumber?)
  @objc public func visibility(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconAllowOverlap(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconAnchor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconIgnorePlacement(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconImage(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconKeepUpright(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconOffset(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconOptional(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconPadding(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconPitchAlignment(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconRotate(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconRotationAlignment(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconSize(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconTextFit(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconTextFitPadding(_ value: MapboxMapObjC.TMBValue?)
  @objc public func symbolAvoidEdges(_ value: MapboxMapObjC.TMBValue?)
  @objc public func symbolPlacement(_ value: MapboxMapObjC.TMBValue?)
  @objc public func symbolSortKey(_ value: MapboxMapObjC.TMBValue?)
  @objc public func symbolSpacing(_ value: MapboxMapObjC.TMBValue?)
  @objc public func symbolZOrder(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textAllowOverlap(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textAnchor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textField(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textFont(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textIgnorePlacement(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textJustify(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textKeepUpright(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textLetterSpacing(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textLineHeight(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textMaxAngle(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textMaxWidth(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textOffset(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textOptional(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textPadding(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textPitchAlignment(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textRadialOffset(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textRotate(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textRotationAlignment(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textSize(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textTransform(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textVariableAnchor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textWritingMode(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconColorTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconHaloBlur(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconHaloBlurTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconHaloColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconHaloColorTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconHaloWidth(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconHaloWidthTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconOpacity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconOpacityTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconTranslate(_ value: MapboxMapObjC.TMBValue?)
  @objc public func iconTranslateTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func iconTranslateAnchor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textColorTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textHaloBlur(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textHaloBlurTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textHaloColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textHaloColorTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textHaloWidth(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textHaloWidthTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textOpacity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textOpacityTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textTranslate(_ value: MapboxMapObjC.TMBValue?)
  @objc public func textTranslateTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func textTranslateAnchor(_ value: MapboxMapObjC.TMBValue?)
  @objc deinit
}
@objc open class TMBPointAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func image(_ image: UIKit.UIImage, name: Swift.String)
  public var swiftValue: MapboxMaps.PointAnnotation
  public init(swiftValue: MapboxMaps.PointAnnotation)
  @objc public class func from(coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBPointAnnotation
  @objc public var iconAnchor: MapboxMapObjC.TMBIconAnchor? {
    @objc get
    @objc set
  }
  @objc public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var iconOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textAnchor: MapboxMapObjC.TMBTextAnchor? {
    @objc get
    @objc set
  }
  @objc public var textField: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var textJustify: MapboxMapObjC.TMBTextJustify? {
    @objc get
    @objc set
  }
  @objc public var textLetterSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textRadialOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textTransform: MapboxMapObjC.TMBTextTransform? {
    @objc get
    @objc set
  }
  @objc public var iconColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPointAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPointAnnotation] {
    @objc get
    @objc set
  }
  final public let swiftValue: MapboxMaps.PointAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)?
  public init(_ swiftValue: MapboxMaps.PointAnnotationManager)
  @objc public var iconAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPitchAlignment: MapboxMapObjC.TMBIconPitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var iconRotationAlignment: MapboxMapObjC.TMBIconRotationAlignment? {
    @objc get
    @objc set
  }
  @objc public var iconTextFit: MapboxMapObjC.TMBIconTextFit? {
    @objc get
    @objc set
  }
  @objc public var iconTextFitPadding: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var symbolAvoidEdges: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolPlacement: MapboxMapObjC.TMBSymbolPlacement? {
    @objc get
    @objc set
  }
  @objc public var symbolSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolZOrder: MapboxMapObjC.TMBSymbolZOrder? {
    @objc get
    @objc set
  }
  @objc public var textAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textFont: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var textIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxAngle: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPitchAlignment: MapboxMapObjC.TMBTextPitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var textRotationAlignment: MapboxMapObjC.TMBTextRotationAlignment? {
    @objc get
    @objc set
  }
  @objc public var textVariableAnchor: [MapboxMapObjC.TMBTextAnchor]? {
    @objc get
    @objc set
  }
  @objc public var textWritingMode: [MapboxMapObjC.TMBTextWritingMode]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslateAnchor: MapboxMapObjC.TMBIconTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc public var textTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textTranslateAnchor: MapboxMapObjC.TMBTextTranslateAnchor? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.")
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public enum TMBLayerPosition : Swift.Int {
  case at
  case below
  case above
  case unowned
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMapObjC.TMBLayerPosition {
  public func swiftValue(_ layerPositionParam: Swift.AnyObject?) -> MapboxMaps.LayerPosition
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImageData : ObjectiveC.NSObject {
  final public let available: Swift.Bool
  final public let name: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImage : ObjectiveC.NSObject, Swift.Codable {
  final public let available: Swift.Bool?
  final public let name: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MapboxMapObjC.TMBResolvedImage {
  @objc dynamic public class func from(name: Swift.String) -> MapboxMapObjC.TMBResolvedImage
  @objc dynamic public class func from(name: Swift.String, available: Swift.Bool) -> MapboxMapObjC.TMBResolvedImage
}
@objc open class TMBPolygonAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  public var swiftValue: MapboxMaps.PolygonAnnotation
  public init(swiftValue: MapboxMaps.PolygonAnnotation)
  @objc public class func polygon(_ polygon: MapboxMapObjC.TMBPolygon) -> MapboxMapObjC.TMBPolygonAnnotation
  @objc public var fillSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillOutlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillPattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolygon : ObjectiveC.NSObject {
  final public let swiftValue: Turf.Polygon
  @objc public init(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]])
  @objc public init(_ coordinates: [[Turf.LocationCoordinate2D]])
  @objc public class func create(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc public class func from(coordinates: [[Turf.LocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc deinit
}
@objc open class TMBPolygonAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolygonAnnotation] {
    @objc get
    @objc set
  }
  @objc public var fillAntialias: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var fillTranslateAnchor: MapboxMapObjC.TMBFillTranslateAnchor? {
    @objc get
    @objc set
  }
  final public let swiftValue: MapboxMaps.PolygonAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)?
  public init(_ swiftValue: MapboxMaps.PolygonAnnotationManager)
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func polygonAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition = TMBLayerPosition.unowned, layerPositionParam: Swift.AnyObject?) -> MapboxMapObjC.TMBPolygonAnnotationManager
  @objc @_Concurrency.MainActor(unsafe) dynamic public func circleAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition = TMBLayerPosition.unowned, layerPositionParam: Swift.AnyObject?) -> MapboxMapObjC.TMBCircleAnnotationManager
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pointAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition = TMBLayerPosition.unowned, layerPositionParam: Swift.AnyObject?) -> MapboxMapObjC.TMBPointAnnotationManager
  @objc @_Concurrency.MainActor(unsafe) dynamic public func polylineAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition = TMBLayerPosition.unowned, layerPositionParam: Swift.AnyObject?) -> MapboxMapObjC.TMBPolylineAnnotationManager
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class GeometryHelper : ObjectiveC.NSObject {
  @objc public class func createPoint(_ location: Foundation.NSValue) -> MapboxCommon.Geometry
  @objc public class func createLine(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiLine(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func createMultiPoint(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiPolygon(_ locations: [[[Foundation.NSValue]]]) -> MapboxCommon.Geometry
  @objc public class func createPolygon(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func create(_ items: [MapboxCommon.Geometry]) -> MapboxCommon.Geometry
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addLayer(properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition = .unowned, layerPositionParam: ObjectiveC.NSObject?, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeLayer(id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func isPersistentLayer(id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func layerExists(id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setLayerProperties(for id: Swift.String, properties: [Swift.String : Any], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateLayerProperties(for id: Swift.String, properties: [Swift.String : Any], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getLayerProperties(for id: Swift.String, onError: ((any Swift.Error) -> Swift.Void)?) -> [Swift.String : Any]
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPersistentLayer(properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition = .unowned, layerPositionParam: ObjectiveC.NSObject?, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addLayer(target: ObjectiveC.NSObject, selector: ObjectiveC.Selector, layerPosition: MapboxMapObjC.TMBLayerPosition = .unowned, layerPositionParam: ObjectiveC.NSObject?, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addLayer(builder: () -> Swift.AnyObject, layerPosition: MapboxMapObjC.TMBLayerPosition = .unowned, layerPositionParam: ObjectiveC.NSObject?, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCustomLayer(_ id: Swift.String, layerHost: any MapboxCoreMaps.CustomLayerHost, layerPosition: MapboxMapObjC.TMBLayerPosition = .unowned, layerPositionParam: ObjectiveC.NSObject?, onError: ((any Swift.Error) -> Swift.Void)?)
}
public protocol LayerBuilder {
  associatedtype T : MapboxMaps.Layer
  var id: Swift.String { get }
  func create() -> Self.T
  func update(_ layer: inout Self.T)
}
@objc open class TMBPoint : ObjectiveC.NSObject, MapboxMapObjC.TMBGeoData {
  public var swiftValue: Turf.Point
  public var coordinates: Turf.LocationCoordinate2D {
    get
    set
  }
  public init(_ coordinates: Turf.LocationCoordinate2D)
  @objc public class func with(coordinates: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBPoint
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSourceType : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let vector: MapboxMapObjC.TMBSourceType
  @objc public static let raster: MapboxMapObjC.TMBSourceType
  @objc public static let rasterDem: MapboxMapObjC.TMBSourceType
  @objc public static let geoJson: MapboxMapObjC.TMBSourceType
  @objc public static let image: MapboxMapObjC.TMBSourceType
  @objc public static let model: MapboxMapObjC.TMBSourceType
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setLightProperty(_ name: Swift.String, value: Any, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setLight(properties: [Swift.String : Any], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightAnchor(_ value: MapboxMapObjC.TMBAnchor, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightColor(_ value: UIKit.UIColor, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightColorTransition(_ value: MapboxMapObjC.TMBStyleTransition, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightIntensity(_ value: Swift.Double, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightIntensityTransition(_ value: MapboxMapObjC.TMBStyleTransition, onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightPosition(_ value: [Swift.Double], onError: ((any Swift.Error) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func lightPositionTransition(_ value: MapboxMapObjC.TMBStyleTransition, onError: ((any Swift.Error) -> Swift.Void)?)
}
@objc open class TMBStyleTransition : ObjectiveC.NSObject {
  final public let duration: Swift.Double
  final public let delay: Swift.Double
  @objc public init(duration: Swift.Double, delay: Swift.Double)
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setStyle(_ styleUri: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setStyle(inJson styleJson: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadStyle(_ styleUri: Swift.String, completion: ((MapboxMapObjC.TMBStyle?, (any Swift.Error)?) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc open class TMBScheme : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let xyz: MapboxMapObjC.TMBScheme
  @objc public static let tms: MapboxMapObjC.TMBScheme
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBEncoding : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let terrarium: MapboxMapObjC.TMBEncoding
  @objc public static let mapbox: MapboxMapObjC.TMBEncoding
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBExpression : ObjectiveC.NSObject {
  final public let `operator`: MapboxMapObjC.TMBOperator
  final public let arguments: [Any]
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBOperator) -> MapboxMapObjC.TMBExpression
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBOperator, arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc deinit
}
@objc open class TMBPolylineAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.PolylineAnnotation
  public init(swiftValue: MapboxMaps.PolylineAnnotation)
  @objc public class func from(id: Swift.String = UUID().uuidString, coordinates: [Turf.LocationCoordinate2D], isSelected: Swift.Bool = false, isDraggable: Swift.Bool = false) -> MapboxMapObjC.TMBPolylineAnnotation
  @objc public var lineJoin: MapboxMapObjC.TMBLineJoin? {
    @objc get
    @objc set
  }
  @objc public var lineSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var lineGapWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var linePattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lineWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolylineAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolylineAnnotation] {
    @objc get
    @objc set
  }
  final public let swiftValue: MapboxMaps.PolylineAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)?
  public init(_ swiftValue: MapboxMaps.PolylineAnnotationManager)
  @objc public var lineCap: MapboxMapObjC.TMBLineCap? {
    @objc get
    @objc set
  }
  @objc public var lineMiterLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineRoundLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineDasharray: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslateAnchor: MapboxMapObjC.TMBLineTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc public var lineTrimOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOperator : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let subtract: MapboxMapObjC.TMBOperator
  @objc public static let not: MapboxMapObjC.TMBOperator
  @objc public static let neq: MapboxMapObjC.TMBOperator
  @objc public static let product: MapboxMapObjC.TMBOperator
  @objc public static let division: MapboxMapObjC.TMBOperator
  @objc public static let mod: MapboxMapObjC.TMBOperator
  @objc public static let pow: MapboxMapObjC.TMBOperator
  @objc public static let sum: MapboxMapObjC.TMBOperator
  @objc public static let lt: MapboxMapObjC.TMBOperator
  @objc public static let lte: MapboxMapObjC.TMBOperator
  @objc public static let eq: MapboxMapObjC.TMBOperator
  @objc public static let gt: MapboxMapObjC.TMBOperator
  @objc public static let gte: MapboxMapObjC.TMBOperator
  @objc public static let abs: MapboxMapObjC.TMBOperator
  @objc public static let accumulated: MapboxMapObjC.TMBOperator
  @objc public static let acos: MapboxMapObjC.TMBOperator
  @objc public static let all: MapboxMapObjC.TMBOperator
  @objc public static let any: MapboxMapObjC.TMBOperator
  @objc public static let array: MapboxMapObjC.TMBOperator
  @objc public static let asin: MapboxMapObjC.TMBOperator
  @objc public static let at: MapboxMapObjC.TMBOperator
  @objc public static let atan: MapboxMapObjC.TMBOperator
  @objc public static let boolean: MapboxMapObjC.TMBOperator
  @objc public static let switchCase: MapboxMapObjC.TMBOperator
  @objc public static let ceil: MapboxMapObjC.TMBOperator
  @objc public static let coalesce: MapboxMapObjC.TMBOperator
  @objc public static let collator: MapboxMapObjC.TMBOperator
  @objc public static let concat: MapboxMapObjC.TMBOperator
  @objc public static let cos: MapboxMapObjC.TMBOperator
  @objc public static let distance: MapboxMapObjC.TMBOperator
  @objc public static let distanceFromCenter: MapboxMapObjC.TMBOperator
  @objc public static let downcase: MapboxMapObjC.TMBOperator
  @objc public static let e: MapboxMapObjC.TMBOperator
  @objc public static let featureState: MapboxMapObjC.TMBOperator
  @objc public static let floor: MapboxMapObjC.TMBOperator
  @objc public static let format: MapboxMapObjC.TMBOperator
  @objc public static let geometryType: MapboxMapObjC.TMBOperator
  @objc public static let get: MapboxMapObjC.TMBOperator
  @objc public static let has: MapboxMapObjC.TMBOperator
  @objc public static let heatmapDensity: MapboxMapObjC.TMBOperator
  @objc public static let id: MapboxMapObjC.TMBOperator
  @objc public static let image: MapboxMapObjC.TMBOperator
  @objc public static let inExpression: MapboxMapObjC.TMBOperator
  @objc public static let indexOf: MapboxMapObjC.TMBOperator
  @objc public static let interpolate: MapboxMapObjC.TMBOperator
  @objc public static let isSupportedScript: MapboxMapObjC.TMBOperator
  @objc public static let length: MapboxMapObjC.TMBOperator
  @objc public static let letExpression: MapboxMapObjC.TMBOperator
  @objc public static let lineProgress: MapboxMapObjC.TMBOperator
  @objc public static let literal: MapboxMapObjC.TMBOperator
  @objc public static let ln: MapboxMapObjC.TMBOperator
  @objc public static let ln2: MapboxMapObjC.TMBOperator
  @objc public static let log10: MapboxMapObjC.TMBOperator
  @objc public static let log2: MapboxMapObjC.TMBOperator
  @objc public static let match: MapboxMapObjC.TMBOperator
  @objc public static let max: MapboxMapObjC.TMBOperator
  @objc public static let min: MapboxMapObjC.TMBOperator
  @objc public static let number: MapboxMapObjC.TMBOperator
  @objc public static let numberFormat: MapboxMapObjC.TMBOperator
  @objc public static let objectExpression: MapboxMapObjC.TMBOperator
  @objc public static let pi: MapboxMapObjC.TMBOperator
  @objc public static let pitch: MapboxMapObjC.TMBOperator
  @objc public static let properties: MapboxMapObjC.TMBOperator
  @objc public static let resolvedLocale: MapboxMapObjC.TMBOperator
  @objc public static let rgb: MapboxMapObjC.TMBOperator
  @objc public static let rgba: MapboxMapObjC.TMBOperator
  @objc public static let round: MapboxMapObjC.TMBOperator
  @objc public static let sin: MapboxMapObjC.TMBOperator
  @objc public static let skyRadialProgress: MapboxMapObjC.TMBOperator
  @objc public static let slice: MapboxMapObjC.TMBOperator
  @objc public static let sqrt: MapboxMapObjC.TMBOperator
  @objc public static let step: MapboxMapObjC.TMBOperator
  @objc public static let string: MapboxMapObjC.TMBOperator
  @objc public static let tan: MapboxMapObjC.TMBOperator
  @objc public static let toBoolean: MapboxMapObjC.TMBOperator
  @objc public static let toColor: MapboxMapObjC.TMBOperator
  @objc public static let toNumber: MapboxMapObjC.TMBOperator
  @objc public static let toRgba: MapboxMapObjC.TMBOperator
  @objc public static let toString: MapboxMapObjC.TMBOperator
  @objc public static let typeofExpression: MapboxMapObjC.TMBOperator
  @objc public static let upcase: MapboxMapObjC.TMBOperator
  @objc public static let varExpression: MapboxMapObjC.TMBOperator
  @objc public static let within: MapboxMapObjC.TMBOperator
  @objc public static let zoom: MapboxMapObjC.TMBOperator
  @objc public static let linear: MapboxMapObjC.TMBOperator
  @objc public static let exponential: MapboxMapObjC.TMBOperator
  @objc public static let cubicBezier: MapboxMapObjC.TMBOperator
  @objc deinit
}
@objc public enum TMBPuckBearingSource : Swift.Int {
  case heading
  case course
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class MapInitOptionsBuilder : ObjectiveC.NSObject {
  @objc public class var defaultResourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
  }
  @objc public class func create() -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func build() -> MapboxMaps.MapInitOptions
  @objc public func resourceOptions(_ value: MapboxCoreMaps.ResourceOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func accessToken(_ value: Swift.String) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func mapOptions(_ value: MapboxCoreMaps.MapOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func cameraOptions(_ value: MapboxCoreMaps.CameraOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func styleUriString(_ value: Swift.String) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func styleUri(_ value: Foundation.URL) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MapboxMaps.MapInitOptions {
  @objc final public func resourceOptions() -> MapboxCoreMaps.ResourceOptions
}
@_inheritsConvenienceInitializers @objc open class Puck2DConfigurationBuilder : ObjectiveC.NSObject {
  public static let defaultAccuracyRingColor: UIKit.UIColor
  public static let defaultOpacity: Foundation.NSNumber
  public func build() -> MapboxMaps.Puck2DConfiguration
  @objc public func setPulsingBuilder(_ builder: MapboxMapObjC.Puck2DConfigurationPulsingBuilder?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setPulsing(_ build: (_ builder: MapboxMapObjC.Puck2DConfigurationPulsingBuilder) -> Swift.Void) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setOpacity(_ value: Foundation.NSNumber) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setTopImage(_ value: UIKit.UIImage?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setBearingImage(_ value: UIKit.UIImage?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setShadowImage(_ value: UIKit.UIImage?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setScale(_ value: Foundation.NSNumber?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setShowsAccuracyRing(_ value: Swift.Bool) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setAccuracyRingColor(_ value: UIKit.UIColor?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc public func setAccuracyRingBorderColor(_ value: UIKit.UIColor?) -> MapboxMapObjC.Puck2DConfigurationBuilder
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class Puck2DConfigurationPulsingBuilder : ObjectiveC.NSObject {
  public func build() -> MapboxMaps.Puck2DConfiguration.Pulsing
  public static let defaultColor: UIKit.UIColor
  public static let defaultRadius: Foundation.NSNumber
  @objc public func setColor(_ color: UIKit.UIColor?) -> MapboxMapObjC.Puck2DConfigurationPulsingBuilder
  @objc public func setRadius(value: Foundation.NSNumber? = Puck2DConfigurationPulsingBuilder.defaultRadius) -> MapboxMapObjC.Puck2DConfigurationPulsingBuilder
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class FillExtrusionLayerBuilder : ObjectiveC.NSObject, MapboxMapObjC.LayerBuilder {
  public typealias T = MapboxMaps.FillExtrusionLayer
  final public let id: Swift.String
  @objc public class func withId(_ id: Swift.String) -> MapboxMapObjC.FillExtrusionLayerBuilder
  public func create() -> MapboxMaps.FillExtrusionLayer
  public func update(_ layer: inout MapboxMaps.FillExtrusionLayer)
  @objc public func filter(_ value: MapboxMapObjC.TMBExpression?)
  @objc public func source(_ value: Swift.String?)
  @objc public func sourceLayer(_ value: Swift.String?)
  @objc public func minZoom(_ value: Foundation.NSNumber?)
  @objc public func maxZoom(_ value: Foundation.NSNumber?)
  @objc public func visibility(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionAmbientOcclusionIntensity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionAmbientOcclusionIntensityTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionAmbientOcclusionRadius(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionAmbientOcclusionRadiusTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionBase(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionBaseTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionColor(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionColorTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionHeight(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionHeightTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionOpacity(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionOpacityTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionPattern(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionPatternTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionTranslate(_ value: MapboxMapObjC.TMBValue?)
  @objc public func fillExtrusionTranslateTransition(_ value: MapboxMapObjC.TMBStyleTransition?)
  @objc public func fillExtrusionTranslateAnchor(_ value: MapboxMapObjC.TMBValue)
  @objc public func fillExtrusionVerticalGradient(_ value: MapboxMapObjC.TMBValue?)
  @objc deinit
}
@objc open class TMBValue : ObjectiveC.NSObject {
  @objc public init(constant: ObjectiveC.NSObject)
  @objc public init(expression: MapboxMapObjC.TMBExpression)
  @objc public class func constant(_ constant: ObjectiveC.NSObject) -> MapboxMapObjC.TMBValue
  @objc public class func intValue(_ value: Swift.Int) -> MapboxMapObjC.TMBValue
  @objc public class func doubleValue(_ value: Swift.Double) -> MapboxMapObjC.TMBValue
  @objc public class func expression(_ expression: MapboxMapObjC.TMBExpression) -> MapboxMapObjC.TMBValue
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class BuiltInStyles : ObjectiveC.NSObject {
  @objc public class var streets: Swift.String {
    @objc get
  }
  @objc public class var outdoors: Swift.String {
    @objc get
  }
  @objc public class var light: Swift.String {
    @objc get
  }
  @objc public class var dark: Swift.String {
    @objc get
  }
  @objc public class var satellite: Swift.String {
    @objc get
  }
  @objc public class var satelliteStreets: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Equatable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Hashable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLayerPosition : Swift.Equatable {}
extension MapboxMapObjC.TMBLayerPosition : Swift.Hashable {}
extension MapboxMapObjC.TMBLayerPosition : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Equatable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Hashable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.RawRepresentable {}
