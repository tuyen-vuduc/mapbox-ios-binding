// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapboxMapObjC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import MapboxCommon
import MapboxCoreMaps
@_exported import MapboxMapObjC
import MapboxMaps
import MapboxMobileEvents
import Swift
import Turf
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class TMBAtmosphere : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Atmosphere {
    get
  }
  @objc public var color: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var colorTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var highColor: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var highColorTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var horizonBlend: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var horizonBlendTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var range: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var rangeTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var spaceColor: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var spaceColorTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var starIntensity: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var starIntensityTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TMBAnnotation {
  @objc var id: Swift.String { get }
  @objc var geometryInJSON: Swift.String { get }
  @objc var userInfo: [Swift.String : Any]? { get }
}
@objc extension MapboxCoreMaps.OfflineManager {
  @objc dynamic public func loadStyle(styleUriString: Swift.String, styleLoadOptions: MapboxCoreMaps.StylePackLoadOptions, progress: @escaping MapboxCoreMaps.StylePackLoadProgressCallback, completion: @escaping (MapboxCoreMaps.StylePack?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allStylePacks(_ completion: @escaping ([MapboxCoreMaps.StylePack]?, (any Swift.Error)?) -> Swift.Void)
}
@objc extension MapboxCommon.TileStore {
  @objc dynamic public class func getDefault() -> MapboxCommon.TileStore
  @discardableResult
  @objc dynamic public func loadTileRegion(forId id: Swift.String, loadOptions: MapboxCommon.TileRegionLoadOptions, progress: MapboxCommon.TileRegionLoadProgressCallback? = nil, completion: @escaping (MapboxCommon.TileRegion?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allTileRegions(_ completion: @escaping ([MapboxCommon.TileRegion]?, (any Swift.Error)?) -> Swift.Void)
}
@objc public protocol TMBLocationPermissionsDelegate {
  @objc optional func locationManager(_ locationManager: MapboxMapObjC.TMBLocationManager, didFailToLocateUserWithError error: any Swift.Error)
  @objc optional func locationManager(_ locationManager: MapboxMapObjC.TMBLocationManager, didChangeAccuracyAuthorization accuracyAuthorization: CoreLocation.CLAccuracyAuthorization)
  @objc optional func locationManagerShouldDisplayHeadingCalibration(_ locationManager: MapboxMapObjC.TMBLocationManager) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc open class TMBLocationManager : ObjectiveC.NSObject {
  @objc public var latestLocation: MapboxMaps.Location? {
    @objc get
  }
  @objc weak public var delegate: (any MapboxMapObjC.TMBLocationPermissionsDelegate)? {
    @objc get
    @objc set
  }
  @objc public var locationProvider: (any MapboxMapObjC.TMBLocationProvider)! {
    @objc get
  }
  @objc public var consumers: Foundation.NSHashTable<any MapboxMaps.LocationConsumer> {
    @objc get
  }
  @objc public var options: MapboxMapObjC.TMBLocationOptions {
    @objc get
    @objc set
  }
  @objc public func overrideLocationProvider(with customLocationProvider: any MapboxMapObjC.TMBLocationProvider)
  @objc public func addLocationConsumer(_ consumer: any MapboxMaps.LocationConsumer)
  @objc public func removeLocationConsumer(_ consumer: any MapboxMaps.LocationConsumer)
  @objc public func addPuckLocationConsumer(_ consumer: any MapboxMaps.PuckLocationConsumer)
  @objc public func removePuckLocationConsumer(_ consumer: any MapboxMaps.PuckLocationConsumer)
  @available(iOS 14.0, *)
  @objc public func requestTemporaryFullAccuracyPermissions(withPurposeKey purposeKey: Swift.String)
  @objc deinit
}
extension MapboxMapObjC.TMBLocationManager : MapboxMaps.LocationPermissionsDelegate {
  @objc dynamic public func locationManagerShouldDisplayHeadingCalibration(_ locationManager: MapboxMaps.LocationManager) -> Swift.Bool
  @objc dynamic public func locationManager(_ locationManager: MapboxMaps.LocationManager, didChangeAccuracyAuthorization accuracyAuthorization: CoreLocation.CLAccuracyAuthorization)
  @objc dynamic public func locationManager(_ locationManager: MapboxMaps.LocationManager, didFailToLocateUserWithError error: any Swift.Error)
}
@objc public protocol TMBLocationProvider {
  @objc var locationProviderOptions: MapboxMapObjC.TMBLocationOptions { get set }
  @objc var authorizationStatus: CoreLocation.CLAuthorizationStatus { get }
  @objc var accuracyAuthorization: CoreLocation.CLAccuracyAuthorization { get }
  @objc var heading: CoreLocation.CLHeading? { get }
  @objc func setDelegate(_ delegate: any MapboxMapObjC.TMBLocationProviderDelegate)
  @objc func requestAlwaysAuthorization()
  @objc func requestWhenInUseAuthorization()
  @objc @available(iOS 14.0, *)
  func requestTemporaryFullAccuracyAuthorization(withPurposeKey purposeKey: Swift.String)
  @objc func startUpdatingLocation()
  @objc func stopUpdatingLocation()
  @objc var headingOrientation: CoreLocation.CLDeviceOrientation { get set }
  @objc func startUpdatingHeading()
  @objc func stopUpdatingHeading()
  @objc func dismissHeadingCalibrationDisplay()
}
@objc public protocol TMBLocationProviderDelegate {
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didFailWithError error: any Swift.Error)
  @objc func locationProviderDidChangeAuthorization(_ provider: any MapboxMapObjC.TMBLocationProvider)
}
@_hasMissingDesignatedInitializers @objc open class TMBLocationOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.LocationOptions {
    get
  }
  @objc public var distanceFilter: CoreLocation.CLLocationDistance {
    @objc get
    @objc set
  }
  @objc public var desiredAccuracy: CoreLocation.CLLocationAccuracy {
    @objc get
    @objc set
  }
  @objc public var activityType: CoreLocation.CLActivityType {
    @objc get
    @objc set
  }
  @objc public var puckType: MapboxMapObjC.TMBPuckType {
    @objc get
  }
  @objc public var puck2DConfiguration: MapboxMapObjC.TMBPuck2DConfiguration? {
    @objc get
    @objc set
  }
  @objc public var puck3DConfiguration: MapboxMapObjC.TMBPuck3DConfiguration? {
    @objc get
    @objc set
  }
  @objc public var puckBearingSource: MapboxMapObjC.TMBPuckBearingSource {
    @objc get
    @objc set
  }
  @objc public var puckBearingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(distanceFilter: CoreLocation.CLLocationDistance = kCLDistanceFilterNone, desiredAccuracy: CoreLocation.CLLocationAccuracy = kCLLocationAccuracyBest, activityType: CoreLocation.CLActivityType = .other, puck2DConfiguration: MapboxMapObjC.TMBPuck2DConfiguration? = nil, puck3DConfiguration: MapboxMapObjC.TMBPuck3DConfiguration? = nil, puckBearingSource: MapboxMapObjC.TMBPuckBearingSource = .heading, puckBearingEnabled: Swift.Bool = true)
  @objc deinit
}
@objc public enum TMBPuckBearingSource : Swift.Int {
  case heading
  case course
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TMBPuckType : Swift.Int {
  case puck2D
  case puck3D
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck2DConfiguration : ObjectiveC.NSObject {
  @objc public var opacity: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var topImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var bearingImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var shadowImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var scale: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var pulsing: MapboxMapObjC.TMBPuck2DConfigurationPulsing? {
    @objc get
    @objc set
  }
  @objc public var showsAccuracyRing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var accuracyRingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var accuracyRingBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  public var rawValue: MapboxMaps.Puck2DConfiguration {
    get
  }
  @objc public init(topImage: UIKit.UIImage? = nil, bearingImage: UIKit.UIImage? = nil, shadowImage: UIKit.UIImage? = nil, scale: MapboxMapObjC.TMBValue? = nil, showsAccuracyRing: Swift.Bool = false, accuracyRingColor: UIKit.UIColor = UIColor(red: 0.537, green: 0.812, blue: 0.941, alpha: 0.3), accuracyRingBorderColor: UIKit.UIColor = UIColor(red: 0.537, green: 0.812, blue: 0.941, alpha: 0.3), opacity: Swift.Double = 1)
  @objc public init(topImage: UIKit.UIImage? = nil, bearingImage: UIKit.UIImage? = nil, shadowImage: UIKit.UIImage? = nil, scale: MapboxMapObjC.TMBValue? = nil, pulsing: MapboxMapObjC.TMBPuck2DConfigurationPulsing? = nil, showsAccuracyRing: Swift.Bool = false, opacity: Swift.Double = 1)
  @objc public static func makeDefault(showBearing: Swift.Bool = false) -> MapboxMapObjC.TMBPuck2DConfiguration
  @objc deinit
}
@objc public enum TMBPuck2DConfigurationPulsingRadius : Swift.Int {
  case constant
  case accuracy
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck2DConfigurationPulsing : ObjectiveC.NSObject {
  public static var `default`: MapboxMapObjC.TMBPuck2DConfigurationPulsing {
    get
  }
  @objc public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var radius: MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius {
    @objc get
    @objc set
  }
  @objc public var radiusValue: Swift.Double {
    @objc get
    @objc set
  }
  public var rawValue: MapboxMaps.Puck2DConfiguration.Pulsing {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck3DConfiguration : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Puck3DConfiguration {
    get
  }
  @objc public var model: MapboxMapObjC.TMBModel {
    @objc get
    @objc set
  }
  @objc public var modelScale: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var modelRotation: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var modelOpacity: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public init(model: MapboxMapObjC.TMBModel, modelScale: MapboxMapObjC.TMBValue? = nil, modelRotation: MapboxMapObjC.TMBValue? = nil, modelOpacity: MapboxMapObjC.TMBValue? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBModel : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Model {
    get
  }
  @objc public var uri: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc public var position: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var orientation: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public init(uri: Foundation.URL? = nil, position: [Swift.Double]? = nil, orientation: [Swift.Double]? = nil)
  @objc deinit
}
@objc public protocol NamedString {
  @objc func stringValue() -> Swift.String
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func gestures() -> MapboxMapObjC.TMBGestureManager
}
@objc public enum TMBPanMode : Swift.Int {
  case horizontal
  case vertical
  case horizontalAndVertical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class TMBGestureOptions : ObjectiveC.NSObject {
  @objc public var panEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var rotateEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var simultaneousRotateAndPinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchPanEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pitchEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var doubleTapToZoomInEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var doubleTouchToZoomOutEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var quickZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var panMode: MapboxMapObjC.TMBPanMode {
    @objc get
    @objc set
  }
  @objc public var panDecelerationFactor: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var focalPoint: Foundation.NSValue? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.GestureOptions)
  @objc deinit
}
@objc public enum TMBGestureType : Swift.Int {
  case pan
  case pinch
  case pitch
  case doubleTapToZoomIn
  case doubleTouchToZoomOut
  case quickZoom
  case singleTap
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TMBGestureManagerDelegate {
  @objc func gestureManager(didBegin gestureType: MapboxMapObjC.TMBGestureType)
  @objc func gestureManager(didEnd gestureType: MapboxMapObjC.TMBGestureType, willAnimate: Swift.Bool)
  @objc func gestureManager(didEndAnimatingFor gestureType: MapboxMapObjC.TMBGestureType)
}
@_hasMissingDesignatedInitializers @objc open class TMBGestureManager : ObjectiveC.NSObject, MapboxMaps.GestureManagerDelegate {
  @objc weak public var delegate: (any MapboxMapObjC.TMBGestureManagerDelegate)?
  @objc public func gestureOptions() -> MapboxMapObjC.TMBGestureOptions
  @objc public var panGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var pinchGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var rotateGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var pitchGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var doubleTapToZoomInGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var doubleTouchToZoomOutGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var quickZoomGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var singleTapGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didBegin gestureType: MapboxMaps.GestureType)
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didEnd gestureType: MapboxMaps.GestureType, willAnimate: Swift.Bool)
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didEndAnimatingFor gestureType: MapboxMaps.GestureType)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTerrain : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Terrain {
    get
  }
  @objc public var sourceId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var exaggeration: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public init(sourceId: Swift.String)
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func preferredFrameRateRange(_ value: QuartzCore.CAFrameRateRange)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions() -> [Foundation.NSNumber]
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions(_ value: [Foundation.NSNumber])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPresentsWithTransaction() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPresentsWithTransaction(_ value: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPreferredFramesPerSecond() -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPreferredFramesPerSecond(_ value: Swift.Int)
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPreferredFrameRateRange() -> QuartzCore.CAFrameRateRange
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPreferredFrameRateRange(_ value: QuartzCore.CAFrameRateRange)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getCameraState() -> MapboxCoreMaps.CameraState
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getAnchor() -> CoreFoundation.CGPoint
}
@objc public protocol TMBAttributionURLOpener {
  @objc func openAttributionURL(_ url: Foundation.URL)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class MapViewFactory : ObjectiveC.NSObject {
  @objc public static func create(frame: CoreFoundation.CGRect, options: MapboxMaps.MapInitOptions?) -> MapboxMaps.MapView
  @objc public static func create(frame: CoreFoundation.CGRect, mapInitOptions: MapboxMaps.MapInitOptions = MapInitOptions(), urlOpener: any MapboxMapObjC.TMBAttributionURLOpener) -> MapboxMaps.MapView
  @objc deinit
}
extension MapboxMaps.ResourceOptions {
  public init(_ objcValue: MapboxCoreMaps.ResourceOptions)
  public func objcValue() -> MapboxCoreMaps.ResourceOptions
}
extension MapboxCoreMaps.ResourceOptions {
  public func swiftValue() -> MapboxMaps.ResourceOptions
}
@_hasMissingDesignatedInitializers @objc open class TMBCancelable : ObjectiveC.NSObject {
  final public let cancelable: any MapboxMaps.Cancelable
  @objc public func cancel()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyle : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Style {
    get
  }
  @objc weak public var styleManager: MapboxCoreMaps.StyleManager! {
    @objc get
  }
  @objc public func addLayer(_ layer: MapboxMapObjC.TMBLayer, layerPosition: MapboxMapObjC.TMBLayerPosition? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentLayer(_ layer: MapboxMapObjC.TMBLayer, layerPosition: MapboxMapObjC.TMBLayerPosition? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func moveLayer(withId id: Swift.String, to position: MapboxMapObjC.TMBLayerPosition, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layer(withId id: Swift.String, type: MapboxMapObjC.TMBLayerType, completion: ((MapboxMapObjC.TMBLayer?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layer(withId id: Swift.String, completion: ((MapboxMapObjC.TMBLayer?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateLayer(withId id: Swift.String, type: MapboxMapObjC.TMBLayerType, update: (MapboxMapObjC.TMBLayer) -> Swift.Void, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addSource(_ source: MapboxMapObjC.TMBSource, id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func source(withId id: Swift.String, type: MapboxMapObjC.TMBSourceType, completion: ((MapboxMapObjC.TMBSource?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func source(withId id: Swift.String, completion: ((MapboxMapObjC.TMBSource?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateGeoJSONSource(withId id: Swift.String, geometry: MapboxCommon.Geometry, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateGeoJSONSource(withId id: Swift.String, feature: MapboxCommon.Feature, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public var uri: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var JSON: Swift.String {
    @objc get
    @objc set
  }
  @objc public var defaultCamera: MapboxCoreMaps.CameraOptions {
    @objc get
  }
  @objc public var transition: MapboxCoreMaps.TransitionOptions {
    @objc get
    @objc set
  }
  @objc public func addLayer(with properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentLayer(with properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func isPersistentLayer(id: Swift.String, completion: ((Foundation.NSNumber?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentCustomLayer(withId id: Swift.String, layerHost: any MapboxCoreMaps.CustomLayerHost, layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addCustomLayer(withId id: Swift.String, layerHost: any MapboxCoreMaps.CustomLayerHost, layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeLayer(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layerExists(withId id: Swift.String) -> Swift.Bool
  @objc public var allLayerIdentifiers: [MapboxMapObjC.TMBLayerInfo] {
    @objc get
  }
  @objc public func layerPropertyValue(for layerId: Swift.String, property: Swift.String) -> Any
  @objc public func layerProperty(for layerId: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setLayerProperty(for layerId: Swift.String, property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func layerPropertyDefaultValue(for layerType: MapboxMapObjC.TMBLayerType, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func layerProperties(for layerId: Swift.String, completion: (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLayerProperties(for layerId: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addSource(withId id: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeSource(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func sourceExists(withId id: Swift.String) -> Swift.Bool
  @objc public var allSourceIdentifiers: [MapboxMapObjC.TMBSourceInfo] {
    @objc get
  }
  @objc public func sourceProperty(for sourceId: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setSourceProperty(for sourceId: Swift.String, property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func sourceProperties(for sourceId: Swift.String, completion: (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setSourceProperties(for sourceId: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func sourcePropertyDefaultValue(for sourceType: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func updateImageSource(withId id: Swift.String, image: UIKit.UIImage, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addImage(_ image: UIKit.UIImage, id: Swift.String, sdf: Swift.Bool = false, stretchX: [MapboxCoreMaps.ImageStretches], stretchY: [MapboxCoreMaps.ImageStretches], content: MapboxCoreMaps.ImageContent? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addImage(_ image: UIKit.UIImage, id: Swift.String, sdf: Swift.Bool = false, contentInsets: UIKit.UIEdgeInsets = .zero, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeImage(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func imageExists(withId id: Swift.String) -> Swift.Bool
  @objc public func image(withId id: Swift.String) -> UIKit.UIImage?
  @objc public func setLight(_ light: MapboxMapObjC.TMBLight, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLight(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLightProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func lightProperty(_ property: Swift.String) -> Any
  @objc public func lightStylePropertyValue(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setTerrain(_ terrain: MapboxMapObjC.TMBTerrain, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeTerrain()
  @objc public func setTerrain(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setTerrainProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func terrainProperty(_ property: Swift.String) -> Any
  @objc public func terrainStylePropertyValue(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setAtmosphere(_ atmosphere: MapboxMapObjC.TMBAtmosphere, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeAtmosphere(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setAtmosphere(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setAtmosphereProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func atmosphereProperty(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func addCustomGeometrySource(withId id: Swift.String, options: MapboxCoreMaps.CustomGeometrySourceOptions, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setCustomGeometrySourceTileData(forSourceId sourceId: Swift.String, tileId: MapboxCoreMaps.CanonicalTileID, features: [MapboxCommon.Feature], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func invalidateCustomGeometrySourceTile(forSourceId sourceId: Swift.String, tileId: MapboxCoreMaps.CanonicalTileID, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func invalidateCustomGeometrySourceRegion(forSourceId sourceId: Swift.String, bounds: MapboxCoreMaps.CoordinateBounds, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc deinit
}
extension MapboxMapObjC.TMBStyle {
  @objc dynamic public func setProjection(_ projection: MapboxMapObjC.TMBStyleProjection, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc dynamic public var projection: MapboxMapObjC.TMBStyleProjection {
    @objc get
  }
}
@objc extension MapboxMapObjC.TMBStyle {
  @objc dynamic public func addGeoJSONSource(id: Swift.String, properties: [Swift.String : Any], geojson: Swift.String, onComplete: (((any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func updateGeoJSONSource(id: Swift.String, geojson: Swift.String, onComplete: (((any Swift.Error)?) -> Swift.Void)?)
}
@objc open class TMBClusterOptions : ObjectiveC.NSObject {
  @objc public var circleRadius: MapboxMapObjC.TMBValue?
  @objc public var circleColor: MapboxMapObjC.TMBValue?
  @objc public var textColor: MapboxMapObjC.TMBValue?
  @objc public var textSize: MapboxMapObjC.TMBValue?
  @objc public var textField: MapboxMapObjC.TMBValue?
  @objc public var clusterRadius: Swift.Double
  @objc public var clusterMaxZoom: Swift.Double
  @objc public var clusterProperties: [Swift.String : MapboxMapObjC.TMBExpression]?
  @objc public init(circleRadius: MapboxMapObjC.TMBValue?, circleColor: MapboxMapObjC.TMBValue?, textColor: MapboxMapObjC.TMBValue?, textSize: MapboxMapObjC.TMBValue?, textField: MapboxMapObjC.TMBValue?, clusterRadius: Swift.Double = 50, clusterMaxZoom: Swift.Double = 14, clusterProperties: [Swift.String : MapboxMapObjC.TMBExpression]? = nil)
  @objc deinit
}
@objc public protocol TMBAnnotationManager {
  @objc var id: Swift.String { get }
  @objc var sourceId: Swift.String { get }
  @objc var layerId: Swift.String { get }
}
@objc public protocol TMBAnnotationInteractionDelegate {
  @objc func annotationManager(_ manager: any MapboxMapObjC.TMBAnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMapObjC.TMBAnnotation])
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMap() -> MapboxMapObjC.TMBMapboxMap
}
@_hasMissingDesignatedInitializers @objc open class TMBMapboxMap : ObjectiveC.NSObject {
  @objc final public let style: MapboxMapObjC.TMBStyle
  @objc public func triggerRepaint()
  @objc public func loadStyleURI(_ styleUri: Swift.String, completion: ((MapboxMapObjC.TMBStyle?, (any Swift.Error)?) -> Swift.Void)?)
  @objc public func loadStyleJSON(_ JSON: Swift.String, completion: ((MapboxMapObjC.TMBStyle?, (any Swift.Error)?) -> Swift.Void)?)
  @objc public var prefetchZoomDelta: Swift.UInt8 {
    @objc get
    @objc set
  }
  @objc public var shouldRenderWorldCopies: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var resourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
  }
  @objc public static func clearData(for resourceOptions: MapboxCoreMaps.ResourceOptions, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func elevation(at coordinate: CoreLocation.CLLocationCoordinate2D) -> Foundation.NSNumber?
  @objc public func coordinateBounds(for rect: CoreFoundation.CGRect) -> MapboxCoreMaps.CoordinateBounds
  @objc public func rect(for coordinateBounds: MapboxCoreMaps.CoordinateBounds) -> CoreFoundation.CGRect
  @objc public var debugOptions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc public var options: MapboxCoreMaps.MapOptions {
    @objc get
  }
  @objc public func camera(forCoordinateBounds coordinateBounds: MapboxCoreMaps.CoordinateBounds, padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(forCoordinates coordinates: [Foundation.NSValue], padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(for coordinates: [Foundation.NSValue], camera: MapboxCoreMaps.CameraOptions, rect: CoreFoundation.CGRect) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(for geometry: MapboxCommon.Geometry, padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func coordinateBounds(forCameraBounds camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBounds
  @objc public func coordinateBoundsUnwrapped(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBounds
  @objc public func coordinateBoundsZoom(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBoundsZoom
  @objc public func coordinateBoundsZoomUnwrapped(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBoundsZoom
  @objc public func coordinate(for point: CoreFoundation.CGPoint) -> CoreLocation.CLLocationCoordinate2D
  @objc public func point(for coordinate: CoreLocation.CLLocationCoordinate2D) -> CoreFoundation.CGPoint
  @objc public func points(for coordinates: [CoreLocation.CLLocationCoordinate2D]) -> [Foundation.NSValue]
  @objc public func coordinates(for points: [Foundation.NSValue]) -> [Foundation.NSValue]
  @objc public func setCamera(to cameraOptions: MapboxCoreMaps.CameraOptions)
  @objc public var cameraState: MapboxCoreMaps.CameraState {
    @objc get
  }
  @objc public var freeCameraOptions: MapboxCoreMaps.FreeCameraOptions {
    @objc get
    @objc set
  }
  @objc public var cameraBounds: MapboxCoreMaps.CameraBounds {
    @objc get
  }
  @objc public func setCameraBounds(with options: MapboxCoreMaps.CameraBoundsOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func dragStart(for point: CoreFoundation.CGPoint)
  @objc public func dragCameraOptions(from: CoreFoundation.CGPoint, to: CoreFoundation.CGPoint) -> MapboxCoreMaps.CameraOptions
  @objc public func dragEnd()
  @objc public func beginAnimation()
  @objc public func endAnimation()
  @objc public func beginGesture()
  @objc public func endGesture()
  @objc deinit
}
extension MapboxMapObjC.TMBMapboxMap {
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withShape shape: [CoreFoundation.CGPoint], options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withRect rect: CoreFoundation.CGRect, options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withPoint point: CoreFoundation.CGPoint, options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func querySourceFeatures(for sourceId: Swift.String, options: MapboxCoreMaps.SourceQueryOptions, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func queryFeatureExtension(for sourceId: Swift.String, feature: MapboxCommon.Feature, extension: Swift.String, extensionField: Swift.String, args: [Swift.String : Any]? = nil, completion: ((MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func getGeoJsonClusterLeaves(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, limit: Swift.UInt64 = 10, offset: Swift.UInt64 = 0, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func getGeoJsonClusterChildren(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func getGeoJsonClusterExpansionZoom(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func subscribe(_ observer: any MapboxCoreMaps.Observer, events: [Swift.String])
  @objc dynamic public func unsubscribe(_ observer: any MapboxCoreMaps.Observer, events: [Swift.String] = [])
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func clearData(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func setFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, state: [Swift.String : Any])
  @objc dynamic public func getFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, callback: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func removeFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, stateKey: Swift.String? = nil)
}
extension MapboxMapObjC.TMBMapboxMap {
  @discardableResult
  @objc dynamic public func onMapLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onMapLoadingError(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onMapIdle(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleImageMissing(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleImageRemoveUnused(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceAdded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceRemoved(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onRenderFrameStarted(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onRenderFrameFinished(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onEvenCameraChanged(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onResourceRequest(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBVisibility : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let visible: MapboxMapObjC.TMBVisibility
  @objc public static let none: MapboxMapObjC.TMBVisibility
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineCap : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let butt: MapboxMapObjC.TMBLineCap
  @objc public static let round: MapboxMapObjC.TMBLineCap
  @objc public static let square: MapboxMapObjC.TMBLineCap
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineJoin : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let bevel: MapboxMapObjC.TMBLineJoin
  @objc public static let round: MapboxMapObjC.TMBLineJoin
  @objc public static let miter: MapboxMapObjC.TMBLineJoin
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let center: MapboxMapObjC.TMBIconAnchor
  @objc public static let left: MapboxMapObjC.TMBIconAnchor
  @objc public static let right: MapboxMapObjC.TMBIconAnchor
  @objc public static let top: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottom: MapboxMapObjC.TMBIconAnchor
  @objc public static let topLeft: MapboxMapObjC.TMBIconAnchor
  @objc public static let topRight: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottomLeft: MapboxMapObjC.TMBIconAnchor
  @objc public static let bottomRight: MapboxMapObjC.TMBIconAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconPitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconPitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBIconPitchAlignment
  @objc public static let auto: MapboxMapObjC.TMBIconPitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconRotationAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconRotationAlignment
  @objc public static let viewport: MapboxMapObjC.TMBIconRotationAlignment
  @objc public static let auto: MapboxMapObjC.TMBIconRotationAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconTextFit : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let none: MapboxMapObjC.TMBIconTextFit
  @objc public static let width: MapboxMapObjC.TMBIconTextFit
  @objc public static let height: MapboxMapObjC.TMBIconTextFit
  @objc public static let both: MapboxMapObjC.TMBIconTextFit
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSymbolPlacement : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let point: MapboxMapObjC.TMBSymbolPlacement
  @objc public static let line: MapboxMapObjC.TMBSymbolPlacement
  @objc public static let lineCenter: MapboxMapObjC.TMBSymbolPlacement
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSymbolZOrder : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let auto: MapboxMapObjC.TMBSymbolZOrder
  @objc public static let viewportY: MapboxMapObjC.TMBSymbolZOrder
  @objc public static let source: MapboxMapObjC.TMBSymbolZOrder
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let center: MapboxMapObjC.TMBTextAnchor
  @objc public static let left: MapboxMapObjC.TMBTextAnchor
  @objc public static let right: MapboxMapObjC.TMBTextAnchor
  @objc public static let top: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottom: MapboxMapObjC.TMBTextAnchor
  @objc public static let topLeft: MapboxMapObjC.TMBTextAnchor
  @objc public static let topRight: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottomLeft: MapboxMapObjC.TMBTextAnchor
  @objc public static let bottomRight: MapboxMapObjC.TMBTextAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextJustify : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let auto: MapboxMapObjC.TMBTextJustify
  @objc public static let left: MapboxMapObjC.TMBTextJustify
  @objc public static let center: MapboxMapObjC.TMBTextJustify
  @objc public static let right: MapboxMapObjC.TMBTextJustify
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextPitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextPitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBTextPitchAlignment
  @objc public static let auto: MapboxMapObjC.TMBTextPitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextRotationAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextRotationAlignment
  @objc public static let viewport: MapboxMapObjC.TMBTextRotationAlignment
  @objc public static let auto: MapboxMapObjC.TMBTextRotationAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextTransform : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let none: MapboxMapObjC.TMBTextTransform
  @objc public static let uppercase: MapboxMapObjC.TMBTextTransform
  @objc public static let lowercase: MapboxMapObjC.TMBTextTransform
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFillTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLineTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBIconTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBIconTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBIconTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBTextTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBTextTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCirclePitchAlignment : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCirclePitchAlignment
  @objc public static let viewport: MapboxMapObjC.TMBCirclePitchAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCirclePitchScale : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCirclePitchScale
  @objc public static let viewport: MapboxMapObjC.TMBCirclePitchScale
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCircleTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBCircleTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBCircleTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFillExtrusionTranslateAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBFillExtrusionTranslateAnchor
  @objc public static let viewport: MapboxMapObjC.TMBFillExtrusionTranslateAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBRasterResampling : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let linear: MapboxMapObjC.TMBRasterResampling
  @objc public static let nearest: MapboxMapObjC.TMBRasterResampling
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBHillshadeIlluminationAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBHillshadeIlluminationAnchor
  @objc public static let viewport: MapboxMapObjC.TMBHillshadeIlluminationAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSkyType : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let gradient: MapboxMapObjC.TMBSkyType
  @objc public static let atmosphere: MapboxMapObjC.TMBSkyType
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBAnchor : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let map: MapboxMapObjC.TMBAnchor
  @objc public static let viewport: MapboxMapObjC.TMBAnchor
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleProjectionName : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let mercator: MapboxMapObjC.TMBStyleProjectionName
  @objc public static let globe: MapboxMapObjC.TMBStyleProjectionName
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBTextWritingMode : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let horizontal: MapboxMapObjC.TMBTextWritingMode
  @objc public static let vertical: MapboxMapObjC.TMBTextWritingMode
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBExpressionOptions : ObjectiveC.NSObject {
  @objc final public let type: MapboxMapObjC.TMBExpressionOptionsType
  @objc final public let options: Any
  final public let arguments: [MapboxMaps.Expression.Argument]
  @objc public static func format(options: MapboxMapObjC.TMBFormatOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc public static func numberFormat(options: MapboxMapObjC.TMBNumberFormatOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc public static func collator(options: MapboxMapObjC.TMBCollatorOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc deinit
}
@objc public enum TMBExpressionOptionsType : Swift.Int {
  case format
  case numberFormat
  case collator
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBFormatOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.FormatOptions {
    get
  }
  @objc public var fontScaleValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var fontScale: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textFontValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var textFont: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var textColorValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  public init(fontScale: MapboxMapObjC.TMBValue? = nil, textFont: MapboxMapObjC.TMBValue? = nil, textColor: MapboxMapObjC.TMBValue? = nil)
  public init(fontScale: Swift.Double? = nil, textFont: [Swift.String]? = nil, textColor: UIKit.UIColor? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBNumberFormatOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.NumberFormatOptions {
    get
  }
  public var locale: Swift.String? {
    get
    set
  }
  public var currency: Swift.String? {
    get
    set
  }
  public var minFractionDigits: Foundation.NSNumber? {
    get
    set
  }
  public var maxFractionDigits: Foundation.NSNumber? {
    get
    set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  public init(locale: Swift.String?, currency: Swift.String?, minFractionDigits: Swift.Int?, maxFractionDigits: Swift.Int?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCollatorOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.CollatorOptions {
    get
  }
  @objc public var caseSensitive: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var diacriticSensitive: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var locale: Swift.String? {
    @objc get
    @objc set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  @objc public init(caseSensitive: Foundation.NSNumber?, diacriticSensitive: Foundation.NSNumber?, locale: Swift.String?)
  @objc deinit
}
@objc open class TMBCircleAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.CircleAnnotation
  public init(swiftValue: MapboxMaps.CircleAnnotation)
  @objc public class func from(center coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBCircleAnnotation
  @objc public var circleSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleRadius: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBCircleAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBCircleAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.CircleAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.CircleAnnotationManager)
  @objc public var circlePitchAlignment: MapboxMapObjC.TMBCirclePitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var circlePitchScale: MapboxMapObjC.TMBCirclePitchScale? {
    @objc get
    @objc set
  }
  @objc public var circleTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var circleTranslateAnchor: MapboxMapObjC.TMBCircleTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class TMBLight : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Light {
    get
  }
  @objc public var anchor: MapboxMapObjC.TMBAnchor? {
    @objc get
    @objc set
  }
  @objc public var color: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var colorTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var intensity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var intensityTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc public var position: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var positionTransition: MapboxMapObjC.TMBStyleTransition? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func camera() -> MapboxMapObjC.TMBCameraAnimationsManager
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraAnimationsManager : ObjectiveC.NSObject {
  @objc public var cameraAnimators: [MapboxMapObjC.TMBCameraAnimator] {
    @objc get
  }
  @objc public func cancelAnimations()
  @discardableResult
  @objc public func fly(to: MapboxCoreMaps.CameraOptions, duration: Foundation.NSNumber?, completion: MapboxMaps.AnimationCompletion? = nil) -> MapboxMapObjC.TMBCancelable?
  @discardableResult
  @objc public func ease(to: MapboxCoreMaps.CameraOptions, duration: Foundation.TimeInterval, curve: UIKit.UIView.AnimationCurve = .easeOut, completion: MapboxMaps.AnimationCompletion? = nil) -> MapboxMapObjC.TMBCancelable?
  @objc public func makeAnimator(duration: Foundation.TimeInterval, timingParameters: any UIKit.UITimingCurveProvider, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, curve: UIKit.UIView.AnimationCurve, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, dampingRatio: CoreFoundation.CGFloat, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraAnimator : ObjectiveC.NSObject {
  @objc public var state: UIKit.UIViewAnimatingState {
    @objc get
  }
  @objc public func cancel()
  @objc deinit
}
@objc open class TMBAnimationOwner : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public func stringValue() -> Swift.String
  @objc public init(rawValue: Swift.String)
  @objc public static let gestures: MapboxMapObjC.TMBAnimationOwner
  @objc public static let unspecified: MapboxMapObjC.TMBAnimationOwner
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraTransition : ObjectiveC.NSObject {
  @objc public var center: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var zoom: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var padding: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var anchor: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var bearing: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var shouldOptimizeBearingPath: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pitch: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraTransitionChange : ObjectiveC.NSObject {
  @objc public var fromValue: Foundation.NSValue
  @objc public var toValue: Foundation.NSValue?
  public static func fromChange(_ change: MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromCoordinate(_ change: MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromEdgeInsets(_ change: MapboxMaps.CameraTransition.Change<UIKit.UIEdgeInsets>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromCGFloat(_ change: MapboxMaps.CameraTransition.Change<CoreFoundation.CGFloat>) -> MapboxMapObjC.TMBCameraTransitionChange
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>)
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<UIKit.UIEdgeInsets>)
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<CoreFoundation.CGFloat>)
  @objc deinit
}
@objc open class TMBPointAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func image(_ image: UIKit.UIImage, name: Swift.String)
  public var swiftValue: MapboxMaps.PointAnnotation
  public init(swiftValue: MapboxMaps.PointAnnotation)
  @objc public class func from(coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBPointAnnotation
  @objc public var iconAnchor: MapboxMapObjC.TMBIconAnchor? {
    @objc get
    @objc set
  }
  @objc public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var iconOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textAnchor: MapboxMapObjC.TMBTextAnchor? {
    @objc get
    @objc set
  }
  @objc public var textField: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var textJustify: MapboxMapObjC.TMBTextJustify? {
    @objc get
    @objc set
  }
  @objc public var textLetterSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textRadialOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textTransform: MapboxMapObjC.TMBTextTransform? {
    @objc get
    @objc set
  }
  @objc public var iconColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPointAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPointAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PointAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PointAnnotationManager)
  @objc public var iconAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPitchAlignment: MapboxMapObjC.TMBIconPitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var iconRotationAlignment: MapboxMapObjC.TMBIconRotationAlignment? {
    @objc get
    @objc set
  }
  @objc public var iconTextFit: MapboxMapObjC.TMBIconTextFit? {
    @objc get
    @objc set
  }
  @objc public var iconTextFitPadding: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var symbolAvoidEdges: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolPlacement: MapboxMapObjC.TMBSymbolPlacement? {
    @objc get
    @objc set
  }
  @objc public var symbolSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolZOrder: MapboxMapObjC.TMBSymbolZOrder? {
    @objc get
    @objc set
  }
  @objc public var textAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textFont: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var textIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxAngle: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPitchAlignment: MapboxMapObjC.TMBTextPitchAlignment? {
    @objc get
    @objc set
  }
  @objc public var textRotationAlignment: MapboxMapObjC.TMBTextRotationAlignment? {
    @objc get
    @objc set
  }
  @objc public var textVariableAnchor: [MapboxMapObjC.TMBTextAnchor]? {
    @objc get
    @objc set
  }
  @objc public var textWritingMode: [MapboxMapObjC.TMBTextWritingMode]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslateAnchor: MapboxMapObjC.TMBIconTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc public var textTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textTranslateAnchor: MapboxMapObjC.TMBTextTranslateAnchor? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.")
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBLayerPosition : ObjectiveC.NSObject {
  @objc final public let arg: Swift.AnyObject
  @objc final public let type: MapboxMapObjC.TMBLayerPositionType
  @objc public init(_ type: MapboxMapObjC.TMBLayerPositionType, arg: Swift.AnyObject)
  public static func at(index: Swift.Int) -> MapboxMapObjC.TMBLayerPosition
  public static func below(layerId: Swift.String) -> MapboxMapObjC.TMBLayerPosition
  public static func above(layerId: Swift.String) -> MapboxMapObjC.TMBLayerPosition
  @objc deinit
}
@objc public enum TMBLayerPositionType : Swift.Int {
  case at
  case above
  case below
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMapObjC.TMBLayerPosition {
  public func swiftValue() -> MapboxMaps.LayerPosition
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImageData : ObjectiveC.NSObject {
  final public let available: Swift.Bool
  final public let name: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImage : ObjectiveC.NSObject, Swift.Codable {
  final public let available: Swift.Bool?
  final public let name: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MapboxMapObjC.TMBResolvedImage {
  @objc dynamic public class func from(name: Swift.String) -> MapboxMapObjC.TMBResolvedImage
  @objc dynamic public class func from(name: Swift.String, available: Swift.Bool) -> MapboxMapObjC.TMBResolvedImage
}
@objc open class TMBPolygonAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  public var swiftValue: MapboxMaps.PolygonAnnotation
  public init(swiftValue: MapboxMaps.PolygonAnnotation)
  @objc public class func polygon(_ polygon: MapboxMapObjC.TMBPolygon) -> MapboxMapObjC.TMBPolygonAnnotation
  @objc public var fillSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillOutlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillPattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolygon : ObjectiveC.NSObject {
  final public let swiftValue: Turf.Polygon
  @objc public init(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]])
  @objc public init(_ coordinates: [[Turf.LocationCoordinate2D]])
  @objc public class func create(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc public class func from(coordinates: [[Turf.LocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc deinit
}
@objc open class TMBPolygonAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolygonAnnotation] {
    @objc get
    @objc set
  }
  @objc public var fillAntialias: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var fillTranslateAnchor: MapboxMapObjC.TMBFillTranslateAnchor? {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PolygonAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PolygonAnnotationManager)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class GeometryHelper : ObjectiveC.NSObject {
  @objc public class func createPoint(_ location: Foundation.NSValue) -> MapboxCommon.Geometry
  @objc public class func createLine(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiLine(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func createMultiPoint(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiPolygon(_ locations: [[[Foundation.NSValue]]]) -> MapboxCommon.Geometry
  @objc public class func createPolygon(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func create(_ items: [MapboxCommon.Geometry]) -> MapboxCommon.Geometry
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func annotations() -> MapboxMapObjC.TMBAnnotationOrchestrator
}
@_hasMissingDesignatedInitializers @objc open class TMBAnnotationOrchestrator : ObjectiveC.NSObject {
  @objc public var annotationManagersById: [Swift.String : any MapboxMapObjC.TMBAnnotationManager] {
    @objc get
  }
  @objc public func makePointAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?, clusterOptions: MapboxMapObjC.TMBClusterOptions?) -> MapboxMapObjC.TMBPointAnnotationManager
  @objc public func makePolygonAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBPolygonAnnotationManager
  @objc public func makePolylineAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBPolylineAnnotationManager
  @objc public func makeCircleAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBCircleAnnotationManager
  @objc public func removeAnnotationManager(withId id: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSourceType : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  public var rawValue: MapboxMaps.SourceType {
    get
  }
  @objc public func stringValue() -> Swift.String
  @objc public static let vector: MapboxMapObjC.TMBSourceType
  @objc public static let raster: MapboxMapObjC.TMBSourceType
  @objc public static let rasterDem: MapboxMapObjC.TMBSourceType
  @objc public static let geoJson: MapboxMapObjC.TMBSourceType
  @objc public static let image: MapboxMapObjC.TMBSourceType
  @objc public static let model: MapboxMapObjC.TMBSourceType
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleTransition : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.StyleTransition {
    get
  }
  @objc public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var delay: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(duration: Swift.Double, delay: Swift.Double)
  @objc public class var zero: MapboxMapObjC.TMBStyleTransition {
    @objc get
  }
  @objc deinit
}
@objc extension MapboxMaps.MapInitOptions {
  @objc final public func getResourceOptions() -> MapboxCoreMaps.ResourceOptions
  @objc final public func getMapOptions() -> MapboxCoreMaps.MapOptions
  @objc final public func getStyleURI() -> Swift.String?
  @objc final public func getStyleJSON() -> Swift.String?
  @objc final public func getCameraOptions() -> MapboxCoreMaps.CameraOptions?
}
@_inheritsConvenienceInitializers @objc open class MapInitOptionsFactory : ObjectiveC.NSObject {
  @objc public static func create(resourceOptions: MapboxCoreMaps.ResourceOptions? = nil, mapOptions: MapboxCoreMaps.MapOptions? = nil, cameraOptions: MapboxCoreMaps.CameraOptions? = nil, styleURI: Swift.String?, styleJSON: Swift.String? = nil) -> MapboxMaps.MapInitOptions
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBResourceOptionsManager : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ResourceOptionsManager {
    get
  }
  @objc public static var `default`: MapboxMapObjC.TMBResourceOptionsManager {
    @objc get
  }
  @objc public static func destroyDefault()
  @objc public var resourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
    @objc set
  }
  @objc convenience public init(accessToken: Swift.String? = nil)
  @objc convenience public init(resourceOptions: MapboxCoreMaps.ResourceOptions)
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewAnnotations() -> MapboxMapObjC.TMBViewAnnotationManager
}
@_hasMissingDesignatedInitializers @objc open class TMBViewAnnotationManager : ObjectiveC.NSObject {
  @objc public func options(forAnnotationId id: Swift.String) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func options(forAnnotationView view: UIKit.UIView) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func view(forAnnotationId id: Swift.String) -> UIKit.UIView?
  @objc public func view(forAnnotationFeatureId id: Swift.String) -> UIKit.UIView?
  @objc public func options(forAnnotationFeatureId id: Swift.String) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func add(viewAnnotation: UIKit.UIView, id: Swift.String?, options: MapboxCoreMaps.ViewAnnotationOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func update(viewAnnotation: UIKit.UIView, options: MapboxCoreMaps.ViewAnnotationOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func remove(viewAnnotation: UIKit.UIView)
  @objc public func removeAllViewAnnotations()
  @objc public func addViewAnnotationUpdateObserver(_ observer: any MapboxMapObjC.TMBViewAnnotationUpdateObserver)
  @objc public func removeViewAnnotationUpdateObserver(_ observer: any MapboxMapObjC.TMBViewAnnotationUpdateObserver)
  @objc public func camera(forAnnotations identifiers: [Swift.String], padding: UIKit.UIEdgeInsets = .zero, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions?
  @objc deinit
}
@objc public enum TMBViewAnnotationManagerError : Swift.Int {
  case viewIsAlreadyAdded
  case associatedFeatureIdIsAlreadyInUse
  case annotationNotFound
  case geometryFieldMissing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TMBViewAnnotationUpdateObserver {
  @objc func framesDidChange(for annotationViews: [UIKit.UIView])
  @objc func visibilityDidChange(for annotationViews: [UIKit.UIView])
}
@_hasMissingDesignatedInitializers @objc open class TMBSource : ObjectiveC.NSObject {
  public var rawValue: any MapboxMaps.Source {
    get
  }
  @objc public var type: MapboxMapObjC.TMBSourceType {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBSourceInfo : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.SourceInfo {
    get
  }
  @objc public var id: Swift.String {
    @objc get
    @objc set
  }
  @objc public var type: MapboxMapObjC.TMBSourceType {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBScheme : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let xyz: MapboxMapObjC.TMBScheme
  @objc public static let tms: MapboxMapObjC.TMBScheme
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBEncoding : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let terrarium: MapboxMapObjC.TMBEncoding
  @objc public static let mapbox: MapboxMapObjC.TMBEncoding
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleProjection : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.StyleProjection {
    get
  }
  @objc public var name: MapboxMapObjC.TMBStyleProjectionName {
    @objc get
    @objc set
  }
  @objc public init(name: MapboxMapObjC.TMBStyleProjectionName)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBExpression : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Expression {
    get
  }
  public var `operator`: MapboxMapObjC.TMBOperator? {
    get
  }
  public var arguments: [Any] {
    get
  }
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBOperator) -> MapboxMapObjC.TMBExpression
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBOperator, arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc public class func create(arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc deinit
}
@objc open class TMBPolylineAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.PolylineAnnotation
  public init(swiftValue: MapboxMaps.PolylineAnnotation)
  @objc public class func from(id: Swift.String = UUID().uuidString, coordinates: [Turf.LocationCoordinate2D], isSelected: Swift.Bool = false, isDraggable: Swift.Bool = false) -> MapboxMapObjC.TMBPolylineAnnotation
  @objc public var lineJoin: MapboxMapObjC.TMBLineJoin? {
    @objc get
    @objc set
  }
  @objc public var lineSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var lineGapWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var linePattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lineWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolylineAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolylineAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PolylineAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PolylineAnnotationManager)
  @objc public var lineCap: MapboxMapObjC.TMBLineCap? {
    @objc get
    @objc set
  }
  @objc public var lineMiterLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineRoundLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineDasharray: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslateAnchor: MapboxMapObjC.TMBLineTranslateAnchor? {
    @objc get
    @objc set
  }
  @objc public var lineTrimOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOperator : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public init(value: Swift.String)
  @objc public func stringValue() -> Swift.String
  @objc public static let subtract: MapboxMapObjC.TMBOperator
  @objc public static let not: MapboxMapObjC.TMBOperator
  @objc public static let neq: MapboxMapObjC.TMBOperator
  @objc public static let product: MapboxMapObjC.TMBOperator
  @objc public static let division: MapboxMapObjC.TMBOperator
  @objc public static let mod: MapboxMapObjC.TMBOperator
  @objc public static let pow: MapboxMapObjC.TMBOperator
  @objc public static let sum: MapboxMapObjC.TMBOperator
  @objc public static let lt: MapboxMapObjC.TMBOperator
  @objc public static let lte: MapboxMapObjC.TMBOperator
  @objc public static let eq: MapboxMapObjC.TMBOperator
  @objc public static let gt: MapboxMapObjC.TMBOperator
  @objc public static let gte: MapboxMapObjC.TMBOperator
  @objc public static let abs: MapboxMapObjC.TMBOperator
  @objc public static let accumulated: MapboxMapObjC.TMBOperator
  @objc public static let acos: MapboxMapObjC.TMBOperator
  @objc public static let all: MapboxMapObjC.TMBOperator
  @objc public static let any: MapboxMapObjC.TMBOperator
  @objc public static let array: MapboxMapObjC.TMBOperator
  @objc public static let asin: MapboxMapObjC.TMBOperator
  @objc public static let at: MapboxMapObjC.TMBOperator
  @objc public static let atan: MapboxMapObjC.TMBOperator
  @objc public static let boolean: MapboxMapObjC.TMBOperator
  @objc public static let switchCase: MapboxMapObjC.TMBOperator
  @objc public static let ceil: MapboxMapObjC.TMBOperator
  @objc public static let coalesce: MapboxMapObjC.TMBOperator
  @objc public static let collator: MapboxMapObjC.TMBOperator
  @objc public static let concat: MapboxMapObjC.TMBOperator
  @objc public static let cos: MapboxMapObjC.TMBOperator
  @objc public static let distance: MapboxMapObjC.TMBOperator
  @objc public static let distanceFromCenter: MapboxMapObjC.TMBOperator
  @objc public static let downcase: MapboxMapObjC.TMBOperator
  @objc public static let e: MapboxMapObjC.TMBOperator
  @objc public static let featureState: MapboxMapObjC.TMBOperator
  @objc public static let floor: MapboxMapObjC.TMBOperator
  @objc public static let format: MapboxMapObjC.TMBOperator
  @objc public static let geometryType: MapboxMapObjC.TMBOperator
  @objc public static let get: MapboxMapObjC.TMBOperator
  @objc public static let has: MapboxMapObjC.TMBOperator
  @objc public static let heatmapDensity: MapboxMapObjC.TMBOperator
  @objc public static let id: MapboxMapObjC.TMBOperator
  @objc public static let image: MapboxMapObjC.TMBOperator
  @objc public static let inExpression: MapboxMapObjC.TMBOperator
  @objc public static let indexOf: MapboxMapObjC.TMBOperator
  @objc public static let interpolate: MapboxMapObjC.TMBOperator
  @objc public static let isSupportedScript: MapboxMapObjC.TMBOperator
  @objc public static let length: MapboxMapObjC.TMBOperator
  @objc public static let letExpression: MapboxMapObjC.TMBOperator
  @objc public static let lineProgress: MapboxMapObjC.TMBOperator
  @objc public static let literal: MapboxMapObjC.TMBOperator
  @objc public static let ln: MapboxMapObjC.TMBOperator
  @objc public static let ln2: MapboxMapObjC.TMBOperator
  @objc public static let log10: MapboxMapObjC.TMBOperator
  @objc public static let log2: MapboxMapObjC.TMBOperator
  @objc public static let match: MapboxMapObjC.TMBOperator
  @objc public static let max: MapboxMapObjC.TMBOperator
  @objc public static let min: MapboxMapObjC.TMBOperator
  @objc public static let number: MapboxMapObjC.TMBOperator
  @objc public static let numberFormat: MapboxMapObjC.TMBOperator
  @objc public static let objectExpression: MapboxMapObjC.TMBOperator
  @objc public static let pi: MapboxMapObjC.TMBOperator
  @objc public static let pitch: MapboxMapObjC.TMBOperator
  @objc public static let properties: MapboxMapObjC.TMBOperator
  @objc public static let resolvedLocale: MapboxMapObjC.TMBOperator
  @objc public static let rgb: MapboxMapObjC.TMBOperator
  @objc public static let rgba: MapboxMapObjC.TMBOperator
  @objc public static let round: MapboxMapObjC.TMBOperator
  @objc public static let sin: MapboxMapObjC.TMBOperator
  @objc public static let skyRadialProgress: MapboxMapObjC.TMBOperator
  @objc public static let slice: MapboxMapObjC.TMBOperator
  @objc public static let sqrt: MapboxMapObjC.TMBOperator
  @objc public static let step: MapboxMapObjC.TMBOperator
  @objc public static let string: MapboxMapObjC.TMBOperator
  @objc public static let tan: MapboxMapObjC.TMBOperator
  @objc public static let toBoolean: MapboxMapObjC.TMBOperator
  @objc public static let toColor: MapboxMapObjC.TMBOperator
  @objc public static let toNumber: MapboxMapObjC.TMBOperator
  @objc public static let toRgba: MapboxMapObjC.TMBOperator
  @objc public static let toString: MapboxMapObjC.TMBOperator
  @objc public static let typeofExpression: MapboxMapObjC.TMBOperator
  @objc public static let upcase: MapboxMapObjC.TMBOperator
  @objc public static let varExpression: MapboxMapObjC.TMBOperator
  @objc public static let within: MapboxMapObjC.TMBOperator
  @objc public static let zoom: MapboxMapObjC.TMBOperator
  @objc public static let linear: MapboxMapObjC.TMBOperator
  @objc public static let exponential: MapboxMapObjC.TMBOperator
  @objc public static let cubicBezier: MapboxMapObjC.TMBOperator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class MapInitOptionsBuilder : ObjectiveC.NSObject {
  @objc public class var defaultResourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
  }
  @objc public class func create() -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func build() -> MapboxMaps.MapInitOptions
  @objc public func resourceOptions(_ value: MapboxCoreMaps.ResourceOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func accessToken(_ value: Swift.String) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func mapOptions(_ value: MapboxCoreMaps.MapOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func cameraOptions(_ value: MapboxCoreMaps.CameraOptions?) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func styleUriString(_ value: Swift.String) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc public func styleUri(_ value: Foundation.URL) -> MapboxMapObjC.MapInitOptionsBuilder
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func ornaments() -> MapboxMapObjC.TMBOrnamentsManager
}
@_hasMissingDesignatedInitializers @objc open class TMBOrnamentsManager : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBOrnamentOptions {
    @objc get
    @objc set
  }
  @objc public var logoView: UIKit.UIView {
    @objc get
  }
  @objc public var scaleBarView: UIKit.UIView {
    @objc get
  }
  @objc public var compassView: UIKit.UIView {
    @objc get
  }
  @objc public var attributionButton: UIKit.UIView {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOrnamentOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.OrnamentOptions {
    get
  }
  @objc public var scaleBar: MapboxMapObjC.TMBScaleBarViewOptions {
    @objc get
    @objc set
  }
  @objc public var compass: MapboxMapObjC.TMBCompassViewOptions {
    @objc get
    @objc set
  }
  @objc public var logo: MapboxMapObjC.TMBLogoViewOptions {
    @objc get
    @objc set
  }
  @objc public var attributionButton: MapboxMapObjC.TMBAttributionButtonOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBScaleBarViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.ScaleBarViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc public var visibility: MapboxMapObjC.TMBOrnamentVisibility {
    @objc get
    @objc set
  }
  public var useMetricUnits: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@objc public enum TMBOrnamentVisibility : Swift.Int {
  case adaptive
  case hidden
  case visible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TMBOrnamentPosition : Swift.Int {
  case topLeft
  case topRight
  case bottomRight
  case bottomLeft
  case topLeading
  case topTrailing
  case bottomLeading
  case bottomTrailing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBCompassViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.CompassViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var visibility: MapboxMapObjC.TMBOrnamentVisibility {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLogoViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.LogoViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBAttributionButtonOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.AttributionButtonOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBValue : ObjectiveC.NSObject {
  @objc public init(constant: ObjectiveC.NSObject)
  @objc public init(expression: MapboxMapObjC.TMBExpression)
  @objc public class func constant(_ constant: ObjectiveC.NSObject) -> MapboxMapObjC.TMBValue
  @objc public class func intValue(_ value: Swift.Int) -> MapboxMapObjC.TMBValue
  @objc public class func doubleValue(_ value: Swift.Double) -> MapboxMapObjC.TMBValue
  @objc public class func expression(_ expression: MapboxMapObjC.TMBExpression) -> MapboxMapObjC.TMBValue
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class BuiltInStyles : ObjectiveC.NSObject {
  @objc public class var streets: Swift.String {
    @objc get
  }
  @objc public class var outdoors: Swift.String {
    @objc get
  }
  @objc public class var light: Swift.String {
    @objc get
  }
  @objc public class var dark: Swift.String {
    @objc get
  }
  @objc public class var satellite: Swift.String {
    @objc get
  }
  @objc public class var satelliteStreets: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLayer : ObjectiveC.NSObject {
  public var rawValue: any MapboxMaps.Layer {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLayerInfo : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.LayerInfo {
    get
  }
  public var id: Swift.String {
    get
    set
  }
  public var type: MapboxMapObjC.TMBLayerType {
    get
    set
  }
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewport() -> MapboxMapObjC.TMBViewport
}
@_hasMissingDesignatedInitializers @objc open class TMBViewport : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBViewportOptions {
    @objc get
    @objc set
  }
  @objc public var status: MapboxMapObjC.TMBViewportStatus {
    @objc get
  }
  @objc public func addStatusObserver(_ observer: any MapboxMapObjC.TMBViewportStatusObserver)
  @objc public func removeStatusObserver(_ observer: any MapboxMapObjC.TMBViewportStatusObserver)
  @objc public func idle()
  @objc public func transition(to toState: any MapboxMapObjC.TMBViewportState, transition: (any MapboxMapObjC.TMBViewportTransition)? = nil, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
  @objc public var defaultTransition: any MapboxMapObjC.TMBViewportTransition {
    @objc get
    @objc set
  }
  @objc public func makeFollowPuckViewportState(options: MapboxMapObjC.TMBFollowPuckViewportStateOptions? = nil) -> MapboxMapObjC.TMBFollowPuckViewportState
  @objc public func makeOverviewViewportState(options: MapboxMapObjC.TMBOverviewViewportStateOptions) -> MapboxMapObjC.TMBOverviewViewportState
  @objc public func makeDefaultViewportTransition(options: MapboxMapObjC.TMBDefaultViewportTransitionOptions? = nil) -> MapboxMapObjC.TMBDefaultViewportTransition
  @objc public func makeImmediateViewportTransition() -> MapboxMapObjC.TMBImmediateViewportTransition
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportStatus : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ViewportStatus {
    get
  }
  @objc public static var idle: MapboxMapObjC.TMBViewportStatus {
    @objc get
  }
  @objc public static func state(_ state: any MapboxMapObjC.TMBViewportState) -> MapboxMapObjC.TMBViewportStatus
  @objc public static func transition(_ transition: any MapboxMapObjC.TMBViewportTransition, toState: any MapboxMapObjC.TMBViewportState) -> MapboxMapObjC.TMBViewportStatus
  @objc deinit
}
@objc public protocol TMBViewportTransition {
  @objc func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (_ success: Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ViewportOptions {
    get
  }
  @objc public var transitionsToIdleUponUserInteraction: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(transitionsToIdleUponUserInteraction: Swift.Bool = true)
  @objc deinit
}
@objc public protocol TMBViewportState {
  @objc func observeDataSource(with handler: @escaping (_ camera: MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc func startUpdatingCamera()
  @objc func stopUpdatingCamera()
}
@objc public protocol TMBViewportStatusObserver {
  @objc func viewportStatusDidChange(from fromStatus: MapboxMapObjC.TMBViewportStatus, to toStatus: MapboxMapObjC.TMBViewportStatus, reason: MapboxMapObjC.TMBViewportStatusChangeReason)
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportStatusChangeReason : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public func stringValue() -> Swift.String
  public static let idleRequested: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionStarted: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionSucceeded: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionFailed: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let userInteraction: MapboxMapObjC.TMBViewportStatusChangeReason
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportStateOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.FollowPuckViewportStateOptions {
    get
  }
  @objc public var padding: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc public var zoom: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var bearing: MapboxMapObjC.TMBFollowPuckViewportStateBearing? {
    @objc get
    @objc set
  }
  @objc public var pitch: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public init(padding: Foundation.NSValue?, zoom: Foundation.NSNumber? = 16.35, bearing: MapboxMapObjC.TMBFollowPuckViewportStateBearing? = nil, pitch: Foundation.NSNumber? = 45)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportStateBearing : ObjectiveC.NSObject {
  @objc public var bearing: Foundation.NSNumber? {
    @objc get
  }
  @objc public static func constant(_ bearing: CoreLocation.CLLocationDirection) -> MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc public static let heading: MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc public static let course: MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportState : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBFollowPuckViewportStateOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
extension MapboxMapObjC.TMBFollowPuckViewportState : MapboxMapObjC.TMBViewportState {
  @objc dynamic public func observeDataSource(with handler: @escaping (MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func startUpdatingCamera()
  @objc dynamic public func stopUpdatingCamera()
}
@_hasMissingDesignatedInitializers @objc open class TMBOverviewViewportStateOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.OverviewViewportStateOptions {
    get
  }
  @objc public var geometry: MapboxCommon.Geometry {
    @objc get
    @objc set
  }
  @objc public var padding: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc public var bearing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var pitch: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var animationDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public init(geometry: MapboxCommon.Geometry, padding: UIKit.UIEdgeInsets = .zero, bearing: Foundation.NSNumber? = 0, pitch: Foundation.NSNumber? = 0, animationDuration: Foundation.TimeInterval = 1)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOverviewViewportState : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.OverviewViewportState {
    get
  }
  @objc public var options: MapboxMapObjC.TMBOverviewViewportStateOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
extension MapboxMapObjC.TMBOverviewViewportState : MapboxMapObjC.TMBViewportState {
  @objc dynamic public func observeDataSource(with handler: @escaping (MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func startUpdatingCamera()
  @objc dynamic public func stopUpdatingCamera()
}
@_hasMissingDesignatedInitializers @objc open class TMBDefaultViewportTransitionOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.DefaultViewportTransitionOptions {
    get
  }
  @objc public var maxDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public init(maxDuration: Foundation.TimeInterval = 3.5)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBDefaultViewportTransition : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.DefaultViewportTransition {
    get
  }
  @objc public var options: MapboxMapObjC.TMBDefaultViewportTransitionOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc extension MapboxMapObjC.TMBDefaultViewportTransition : MapboxMapObjC.TMBViewportTransition {
  @objc dynamic public func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBImmediateViewportTransition : ObjectiveC.NSObject, MapboxMapObjC.TMBViewportTransition {
  @objc public func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc deinit
}
@objc public enum TMBLayerType : Swift.Int {
  case fill
  case line
  case symbol
  case circle
  case heatmap
  case fillExtrusion
  case raster
  case hillshade
  case background
  case locationIndicator
  case sky
  public init?(rawValue: Swift.String)
  public static let supportedTypes: [MapboxMapObjC.TMBLayerType : Swift.String]
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMapObjC.TMBLayerType {
  public static let layerTypeMapping: [MapboxMapObjC.TMBLayerType : MapboxMaps.LayerType]
  public func swiftValue() -> MapboxMaps.LayerType?
}
extension MapboxMaps.LayerType {
  public static let layerTypeMapping: [MapboxMaps.LayerType : MapboxMapObjC.TMBLayerType]
  public func objcValue() -> MapboxMapObjC.TMBLayerType?
}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Equatable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Hashable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPuckType : Swift.Equatable {}
extension MapboxMapObjC.TMBPuckType : Swift.Hashable {}
extension MapboxMapObjC.TMBPuckType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.Equatable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.Hashable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPanMode : Swift.Equatable {}
extension MapboxMapObjC.TMBPanMode : Swift.Hashable {}
extension MapboxMapObjC.TMBPanMode : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBGestureType : Swift.Equatable {}
extension MapboxMapObjC.TMBGestureType : Swift.Hashable {}
extension MapboxMapObjC.TMBGestureType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.Equatable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.Hashable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.Equatable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.Hashable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.Equatable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.Hashable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Equatable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Hashable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.Equatable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.Hashable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLayerType : Swift.Equatable {}
extension MapboxMapObjC.TMBLayerType : Swift.Hashable {}
extension MapboxMapObjC.TMBLayerType : Swift.RawRepresentable {}
