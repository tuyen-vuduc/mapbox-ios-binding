// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapboxMapObjC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import MapboxCommon
import MapboxCoreMaps
@_exported import MapboxMapObjC
import MapboxMaps
import MapboxMobileEvents
import Swift
import Turf
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc open class TMBAtmosphere : ObjectiveC.NSObject {
  @objc public var color: MapboxMapObjC.TMBValue?
  @objc public var colorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var highColor: MapboxMapObjC.TMBValue?
  @objc public var highColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var horizonBlend: MapboxMapObjC.TMBValue?
  @objc public var horizonBlendTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var range: MapboxMapObjC.TMBValue?
  @objc public var rangeTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var spaceColor: MapboxMapObjC.TMBValue?
  @objc public var spaceColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var starIntensity: MapboxMapObjC.TMBValue?
  @objc public var starIntensityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc override dynamic public init()
  @objc deinit
}
extension MapboxMapObjC.TMBAtmosphere {
  public func mapTo(_ source: inout MapboxMaps.Atmosphere)
}
extension MapboxMaps.Atmosphere {
  public func mapTo(_ source: inout MapboxMapObjC.TMBAtmosphere)
}
extension MapboxMapObjC.TMBAtmosphere : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Atmosphere
  public typealias T = MapboxMaps.Atmosphere
}
extension MapboxMaps.Atmosphere {
  public func objcValue() -> MapboxMapObjC.TMBAtmosphere
}
@objc public protocol TMBAnnotation {
  @objc var id: Swift.String { get }
  @objc var geometryInJSON: Swift.String { get }
  @objc var userInfo: [Swift.String : Any]? { get }
}
@_hasMissingDesignatedInitializers @objc open class TMBFillLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var fillSortKey: MapboxMapObjC.TMBValue?
  @objc public var fillAntialias: MapboxMapObjC.TMBValue?
  @objc public var fillColor: MapboxMapObjC.TMBValue?
  @objc public var fillColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillOpacity: MapboxMapObjC.TMBValue?
  @objc public var fillOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillOutlineColor: MapboxMapObjC.TMBValue?
  @objc public var fillOutlineColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillPattern: MapboxMapObjC.TMBValue?
  @available(*, deprecated, message: "This property is deprecated and will be removed in the future. Setting this will have no effect.")
  @objc public var fillPatternTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillTranslate: MapboxMapObjC.TMBValue?
  @objc public var fillTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBFillLayer {
  public func mapTo(_ layer: inout MapboxMaps.FillLayer)
}
extension MapboxMaps.FillLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBFillLayer)
}
extension MapboxMapObjC.TMBFillLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.FillLayer
  public typealias T = MapboxMaps.FillLayer
}
extension MapboxMaps.FillLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBFillLayer
  public typealias T = MapboxMapObjC.TMBFillLayer
}
@objc extension MapboxCoreMaps.OfflineManager {
  @objc dynamic public func loadStyle(styleUriString: Swift.String, styleLoadOptions: MapboxCoreMaps.StylePackLoadOptions, progress: @escaping MapboxCoreMaps.StylePackLoadProgressCallback, completion: @escaping (MapboxCoreMaps.StylePack?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allStylePacks(_ completion: @escaping ([MapboxCoreMaps.StylePack]?, (any Swift.Error)?) -> Swift.Void)
}
@objc extension MapboxCommon.TileStore {
  @objc dynamic public class func getDefault() -> MapboxCommon.TileStore
  @discardableResult
  @objc dynamic public func loadTileRegion(forId id: Swift.String, loadOptions: MapboxCommon.TileRegionLoadOptions, progress: MapboxCommon.TileRegionLoadProgressCallback? = nil, completion: @escaping (MapboxCommon.TileRegion?, (any Swift.Error)?) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func allTileRegions(_ completion: @escaping ([MapboxCommon.TileRegion]?, (any Swift.Error)?) -> Swift.Void)
}
@objc public protocol TMBLocationPermissionsDelegate {
  @objc optional func locationManager(_ locationManager: MapboxMapObjC.TMBLocationManager, didFailToLocateUserWithError error: any Swift.Error)
  @objc optional func locationManager(_ locationManager: MapboxMapObjC.TMBLocationManager, didChangeAccuracyAuthorization accuracyAuthorization: CoreLocation.CLAccuracyAuthorization)
  @objc optional func locationManagerShouldDisplayHeadingCalibration(_ locationManager: MapboxMapObjC.TMBLocationManager) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc open class TMBLocationManager : ObjectiveC.NSObject {
  @objc public var latestLocation: MapboxMaps.Location? {
    @objc get
  }
  @objc weak public var delegate: (any MapboxMapObjC.TMBLocationPermissionsDelegate)? {
    @objc get
    @objc set
  }
  @objc public var locationProvider: (any MapboxMapObjC.TMBLocationProvider)! {
    @objc get
  }
  @objc public var consumers: Foundation.NSHashTable<any MapboxMaps.LocationConsumer> {
    @objc get
  }
  @objc public var options: MapboxMapObjC.TMBLocationOptions {
    @objc get
    @objc set
  }
  @objc public func overrideLocationProvider(with customLocationProvider: any MapboxMapObjC.TMBLocationProvider)
  @objc public func addLocationConsumer(_ consumer: any MapboxMaps.LocationConsumer)
  @objc public func removeLocationConsumer(_ consumer: any MapboxMaps.LocationConsumer)
  @objc public func addPuckLocationConsumer(_ consumer: any MapboxMaps.PuckLocationConsumer)
  @objc public func removePuckLocationConsumer(_ consumer: any MapboxMaps.PuckLocationConsumer)
  @available(iOS 14.0, *)
  @objc public func requestTemporaryFullAccuracyPermissions(withPurposeKey purposeKey: Swift.String)
  @objc deinit
}
extension MapboxMapObjC.TMBLocationManager : MapboxMaps.LocationPermissionsDelegate {
  @objc dynamic public func locationManagerShouldDisplayHeadingCalibration(_ locationManager: MapboxMaps.LocationManager) -> Swift.Bool
  @objc dynamic public func locationManager(_ locationManager: MapboxMaps.LocationManager, didChangeAccuracyAuthorization accuracyAuthorization: CoreLocation.CLAccuracyAuthorization)
  @objc dynamic public func locationManager(_ locationManager: MapboxMaps.LocationManager, didFailToLocateUserWithError error: any Swift.Error)
}
@objc public protocol TMBLocationProvider {
  @objc var locationProviderOptions: MapboxMapObjC.TMBLocationOptions { get set }
  @objc var authorizationStatus: CoreLocation.CLAuthorizationStatus { get }
  @objc var accuracyAuthorization: CoreLocation.CLAccuracyAuthorization { get }
  @objc var heading: CoreLocation.CLHeading? { get }
  @objc func setDelegate(_ delegate: any MapboxMapObjC.TMBLocationProviderDelegate)
  @objc func requestAlwaysAuthorization()
  @objc func requestWhenInUseAuthorization()
  @objc @available(iOS 14.0, *)
  func requestTemporaryFullAccuracyAuthorization(withPurposeKey purposeKey: Swift.String)
  @objc func startUpdatingLocation()
  @objc func stopUpdatingLocation()
  @objc var headingOrientation: CoreLocation.CLDeviceOrientation { get set }
  @objc func startUpdatingHeading()
  @objc func stopUpdatingHeading()
  @objc func dismissHeadingCalibrationDisplay()
}
@objc public protocol TMBLocationProviderDelegate {
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc func locationProvider(_ provider: any MapboxMapObjC.TMBLocationProvider, didFailWithError error: any Swift.Error)
  @objc func locationProviderDidChangeAuthorization(_ provider: any MapboxMapObjC.TMBLocationProvider)
}
@_hasMissingDesignatedInitializers @objc open class TMBLocationOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.LocationOptions {
    get
  }
  @objc public var distanceFilter: CoreLocation.CLLocationDistance {
    @objc get
    @objc set
  }
  @objc public var desiredAccuracy: CoreLocation.CLLocationAccuracy {
    @objc get
    @objc set
  }
  @objc public var activityType: CoreLocation.CLActivityType {
    @objc get
    @objc set
  }
  @objc public var puckType: MapboxMapObjC.TMBPuckType {
    @objc get
  }
  @objc public var puck2DConfiguration: MapboxMapObjC.TMBPuck2DConfiguration? {
    @objc get
    @objc set
  }
  @objc public var puck3DConfiguration: MapboxMapObjC.TMBPuck3DConfiguration? {
    @objc get
    @objc set
  }
  @objc public var puckBearingSource: MapboxMapObjC.TMBPuckBearingSource {
    @objc get
    @objc set
  }
  @objc public var puckBearingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(distanceFilter: CoreLocation.CLLocationDistance = kCLDistanceFilterNone, desiredAccuracy: CoreLocation.CLLocationAccuracy = kCLLocationAccuracyBest, activityType: CoreLocation.CLActivityType = .other, puck2DConfiguration: MapboxMapObjC.TMBPuck2DConfiguration? = nil, puck3DConfiguration: MapboxMapObjC.TMBPuck3DConfiguration? = nil, puckBearingSource: MapboxMapObjC.TMBPuckBearingSource = .heading, puckBearingEnabled: Swift.Bool = true)
  @objc deinit
}
@objc public enum TMBPuckBearingSource : Swift.Int {
  case heading
  case course
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.PuckBearingSource : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBPuckBearingSource
  public typealias T = MapboxMapObjC.TMBPuckBearingSource
}
@objc public enum TMBPuckType : Swift.Int {
  case puck2D
  case puck3D
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck2DConfiguration : ObjectiveC.NSObject {
  @objc public var opacity: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var topImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var bearingImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var shadowImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var scale: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var pulsing: MapboxMapObjC.TMBPuck2DConfigurationPulsing? {
    @objc get
    @objc set
  }
  @objc public var showsAccuracyRing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var accuracyRingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var accuracyRingBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  public var rawValue: MapboxMaps.Puck2DConfiguration {
    get
  }
  @objc public init(topImage: UIKit.UIImage? = nil, bearingImage: UIKit.UIImage? = nil, shadowImage: UIKit.UIImage? = nil, scale: MapboxMapObjC.TMBValue? = nil, showsAccuracyRing: Swift.Bool = false, accuracyRingColor: UIKit.UIColor = UIColor(red: 0.537, green: 0.812, blue: 0.941, alpha: 0.3), accuracyRingBorderColor: UIKit.UIColor = UIColor(red: 0.537, green: 0.812, blue: 0.941, alpha: 0.3), opacity: Swift.Double = 1)
  @objc public init(topImage: UIKit.UIImage? = nil, bearingImage: UIKit.UIImage? = nil, shadowImage: UIKit.UIImage? = nil, scale: MapboxMapObjC.TMBValue? = nil, pulsing: MapboxMapObjC.TMBPuck2DConfigurationPulsing? = nil, showsAccuracyRing: Swift.Bool = false, opacity: Swift.Double = 1)
  @objc public static func makeDefault(showBearing: Swift.Bool = false) -> MapboxMapObjC.TMBPuck2DConfiguration
  @objc deinit
}
@objc public enum TMBPuck2DConfigurationPulsingRadius : Swift.Int {
  case constant
  case accuracy
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck2DConfigurationPulsing : ObjectiveC.NSObject {
  public static var `default`: MapboxMapObjC.TMBPuck2DConfigurationPulsing {
    get
  }
  @objc public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var radius: MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius {
    @objc get
    @objc set
  }
  @objc public var radiusValue: Swift.Double {
    @objc get
    @objc set
  }
  public var rawValue: MapboxMaps.Puck2DConfiguration.Pulsing {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBPuck3DConfiguration : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Puck3DConfiguration {
    get
  }
  @objc public var model: MapboxMapObjC.TMBModel {
    @objc get
    @objc set
  }
  @objc public var modelScale: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var modelRotation: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var modelOpacity: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public init(model: MapboxMapObjC.TMBModel, modelScale: MapboxMapObjC.TMBValue? = nil, modelRotation: MapboxMapObjC.TMBValue? = nil, modelOpacity: MapboxMapObjC.TMBValue? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBModel : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Model {
    get
  }
  @objc public var uri: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc public var position: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var orientation: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public init(uri: Foundation.URL? = nil, position: [Swift.Double]? = nil, orientation: [Swift.Double]? = nil)
  @objc deinit
}
@objc public protocol NamedString {
  @objc func stringValue() -> Swift.String
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func gestures() -> MapboxMapObjC.TMBGestureManager
}
@objc public enum TMBPanMode : Swift.Int {
  case horizontal
  case vertical
  case horizontalAndVertical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.PanMode : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBPanMode
  public typealias T = MapboxMapObjC.TMBPanMode
}
@objc open class TMBGestureOptions : ObjectiveC.NSObject {
  @objc public var panEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var rotateEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var simultaneousRotateAndPinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pinchPanEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pitchEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var doubleTapToZoomInEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var doubleTouchToZoomOutEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var quickZoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var panMode: MapboxMapObjC.TMBPanMode {
    @objc get
    @objc set
  }
  @objc public var panDecelerationFactor: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var focalPoint: Foundation.NSValue? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.GestureOptions)
  @objc deinit
}
@objc public enum TMBGestureType : Swift.Int {
  case pan
  case pinch
  case pitch
  case doubleTapToZoomIn
  case doubleTouchToZoomOut
  case quickZoom
  case singleTap
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TMBGestureManagerDelegate {
  @objc func gestureManager(didBegin gestureType: MapboxMapObjC.TMBGestureType)
  @objc func gestureManager(didEnd gestureType: MapboxMapObjC.TMBGestureType, willAnimate: Swift.Bool)
  @objc func gestureManager(didEndAnimatingFor gestureType: MapboxMapObjC.TMBGestureType)
}
@_hasMissingDesignatedInitializers @objc open class TMBGestureManager : ObjectiveC.NSObject, MapboxMaps.GestureManagerDelegate {
  @objc weak public var delegate: (any MapboxMapObjC.TMBGestureManagerDelegate)?
  @objc public func gestureOptions() -> MapboxMapObjC.TMBGestureOptions
  @objc public var panGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var pinchGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var rotateGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var pitchGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var doubleTapToZoomInGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var doubleTouchToZoomOutGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var quickZoomGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  @objc public var singleTapGestureRecognizer: UIKit.UIGestureRecognizer {
    @objc get
  }
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didBegin gestureType: MapboxMaps.GestureType)
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didEnd gestureType: MapboxMaps.GestureType, willAnimate: Swift.Bool)
  public func gestureManager(_ gestureManager: MapboxMaps.GestureManager, didEndAnimatingFor gestureType: MapboxMaps.GestureType)
  @objc deinit
}
extension MapboxMaps.GestureType : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBGestureType
  public typealias T = MapboxMapObjC.TMBGestureType
}
@_hasMissingDesignatedInitializers @objc open class TMBRasterLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var rasterBrightnessMax: MapboxMapObjC.TMBValue?
  @objc public var rasterBrightnessMaxTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var rasterBrightnessMin: MapboxMapObjC.TMBValue?
  @objc public var rasterBrightnessMinTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var rasterContrast: MapboxMapObjC.TMBValue?
  @objc public var rasterContrastTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var rasterFadeDuration: MapboxMapObjC.TMBValue?
  @objc public var rasterHueRotate: MapboxMapObjC.TMBValue?
  @objc public var rasterHueRotateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var rasterOpacity: MapboxMapObjC.TMBValue?
  @objc public var rasterOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var rasterResampling: MapboxMapObjC.TMBValue?
  @objc public var rasterSaturation: MapboxMapObjC.TMBValue?
  @objc public var rasterSaturationTransition: MapboxMapObjC.TMBStyleTransition?
  @objc deinit
}
extension MapboxMapObjC.TMBRasterLayer {
  public func mapTo(_ layer: inout MapboxMaps.RasterLayer)
}
extension MapboxMaps.RasterLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBRasterLayer)
}
extension MapboxMapObjC.TMBRasterLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.RasterLayer
  public typealias T = MapboxMaps.RasterLayer
}
extension MapboxMaps.RasterLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBRasterLayer
  public typealias T = MapboxMapObjC.TMBRasterLayer
}
@objc open class TMBTerrain : ObjectiveC.NSObject {
  @objc public init(sourceId: Swift.String)
  @objc public var source: Swift.String
  @objc public var exaggeration: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBTerrain {
  public func mapTo(_ source: inout MapboxMaps.Terrain)
}
extension MapboxMaps.Terrain {
  public func mapTo(_ source: inout MapboxMapObjC.TMBTerrain)
}
extension MapboxMapObjC.TMBTerrain : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Terrain
  public typealias T = MapboxMaps.Terrain
}
extension MapboxMaps.Terrain {
  public func objcValue() -> MapboxMapObjC.TMBTerrain
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func preferredFrameRateRange(_ value: QuartzCore.CAFrameRateRange)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions() -> [Foundation.NSNumber]
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMapDebugOptions(_ value: [Foundation.NSNumber])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPresentsWithTransaction() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPresentsWithTransaction(_ value: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPreferredFramesPerSecond() -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPreferredFramesPerSecond(_ value: Swift.Int)
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getPreferredFrameRateRange() -> QuartzCore.CAFrameRateRange
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPreferredFrameRateRange(_ value: QuartzCore.CAFrameRateRange)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getCameraState() -> MapboxCoreMaps.CameraState
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getAnchor() -> CoreFoundation.CGPoint
}
@objc public protocol TMBAttributionURLOpener {
  @objc func openAttributionURL(_ url: Foundation.URL)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class MapViewFactory : ObjectiveC.NSObject {
  @objc public static func create(frame: CoreFoundation.CGRect, options: MapboxMaps.MapInitOptions?) -> MapboxMaps.MapView
  @objc public static func create(frame: CoreFoundation.CGRect, mapInitOptions: MapboxMaps.MapInitOptions = MapInitOptions(), urlOpener: any MapboxMapObjC.TMBAttributionURLOpener) -> MapboxMaps.MapView
  @objc deinit
}
extension MapboxMaps.ResourceOptions : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxCoreMaps.ResourceOptions
  public init(_ objcValue: MapboxCoreMaps.ResourceOptions)
  public typealias T = MapboxCoreMaps.ResourceOptions
}
extension MapboxCoreMaps.ResourceOptions {
  public func swiftValue() -> MapboxMaps.ResourceOptions
}
@_hasMissingDesignatedInitializers @objc open class TMBCancelable : ObjectiveC.NSObject {
  final public let cancelable: any MapboxMaps.Cancelable
  @objc public func cancel()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBStyle : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Style {
    get
  }
  @objc weak public var styleManager: MapboxCoreMaps.StyleManager! {
    @objc get
  }
  @objc public func addLayer(_ layer: any MapboxMapObjC.TMBLayer, layerPosition: MapboxMapObjC.TMBLayerPosition? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentLayer(_ layer: any MapboxMapObjC.TMBLayer, layerPosition: MapboxMapObjC.TMBLayerPosition? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func moveLayer(withId id: Swift.String, to position: MapboxMapObjC.TMBLayerPosition, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layer(withId id: Swift.String, type: MapboxMapObjC.TMBLayerType, completion: (((any MapboxMapObjC.TMBLayer)?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layer(withId id: Swift.String, completion: (((any MapboxMapObjC.TMBLayer)?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateLayer(withId id: Swift.String, type: MapboxMapObjC.TMBLayerType, update: (any MapboxMapObjC.TMBLayer) -> any MapboxMapObjC.TMBLayer, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addSource(_ source: any MapboxMapObjC.TMBSource, id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addSource(id: Swift.String, geometry: MapboxCommon.Geometry, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func source(withId id: Swift.String, type: MapboxMapObjC.TMBSourceType, completion: (((any MapboxMapObjC.TMBSource)?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func source(withId id: Swift.String, completion: (((any MapboxMapObjC.TMBSource)?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateGeoJSONSource(withId id: Swift.String, geometry: MapboxCommon.Geometry, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateGeoJSONSource(withId id: Swift.String, feature: MapboxCommon.Feature, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public var uri: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var JSON: Swift.String {
    @objc get
    @objc set
  }
  @objc public var defaultCamera: MapboxCoreMaps.CameraOptions {
    @objc get
  }
  @objc public var transition: MapboxCoreMaps.TransitionOptions {
    @objc get
    @objc set
  }
  @objc public func addLayer(withProperties properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentLayer(with properties: [Swift.String : Any], layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func isPersistentLayer(id: Swift.String, completion: ((Foundation.NSNumber?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addPersistentCustomLayer(withId id: Swift.String, layerHost: any MapboxCoreMaps.CustomLayerHost, layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addCustomLayer(withId id: Swift.String, layerHost: any MapboxCoreMaps.CustomLayerHost, layerPosition: MapboxMapObjC.TMBLayerPosition?, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeLayer(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func layerExists(withId id: Swift.String) -> Swift.Bool
  @objc public var allLayerIdentifiers: [MapboxMapObjC.TMBLayerInfo] {
    @objc get
  }
  @objc public func layerPropertyValue(for layerId: Swift.String, property: Swift.String) -> Any
  @objc public func layerProperty(for layerId: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setLayerProperty(for layerId: Swift.String, property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func layerPropertyDefaultValue(for layerType: MapboxMapObjC.TMBLayerType, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func layerProperties(for layerId: Swift.String, completion: (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLayerProperties(for layerId: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addSource(withId id: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeSource(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func sourceExists(withId id: Swift.String) -> Swift.Bool
  @objc public var allSourceIdentifiers: [MapboxMapObjC.TMBSourceInfo] {
    @objc get
  }
  @objc public func sourceProperty(for sourceId: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setSourceProperty(for sourceId: Swift.String, property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func sourceProperties(for sourceId: Swift.String, completion: (([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setSourceProperties(for sourceId: Swift.String, properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func sourcePropertyDefaultValue(for sourceType: Swift.String, property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func updateImageSource(withId id: Swift.String, image: UIKit.UIImage, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addImage(_ image: UIKit.UIImage, id: Swift.String, sdf: Swift.Bool = false, stretchX: [MapboxCoreMaps.ImageStretches], stretchY: [MapboxCoreMaps.ImageStretches], content: MapboxCoreMaps.ImageContent? = nil, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func addImage(_ image: UIKit.UIImage, id: Swift.String, sdf: Swift.Bool = false, contentInsets: UIKit.UIEdgeInsets = .zero, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeImage(withId id: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func imageExists(withId id: Swift.String) -> Swift.Bool
  @objc public func image(withId id: Swift.String) -> UIKit.UIImage?
  @objc public func setLight(_ light: MapboxMapObjC.TMBLight, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLight(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setLightProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func lightProperty(_ property: Swift.String) -> Any
  @objc public func lightStylePropertyValue(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setTerrain(_ terrain: MapboxMapObjC.TMBTerrain, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeTerrain()
  @objc public func setTerrain(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setTerrainProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func terrainProperty(_ property: Swift.String) -> Any
  @objc public func terrainStylePropertyValue(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func setAtmosphere(_ atmosphere: MapboxMapObjC.TMBAtmosphere, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func removeAtmosphere(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setAtmosphere(properties: [Swift.String : Any], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setAtmosphereProperty(_ property: Swift.String, value: Any, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func atmosphereProperty(_ property: Swift.String) -> MapboxCoreMaps.StylePropertyValue
  @objc public func addCustomGeometrySource(withId id: Swift.String, options: MapboxCoreMaps.CustomGeometrySourceOptions, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func setCustomGeometrySourceTileData(forSourceId sourceId: Swift.String, tileId: MapboxCoreMaps.CanonicalTileID, features: [MapboxCommon.Feature], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func invalidateCustomGeometrySourceTile(forSourceId sourceId: Swift.String, tileId: MapboxCoreMaps.CanonicalTileID, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func invalidateCustomGeometrySourceRegion(forSourceId sourceId: Swift.String, bounds: MapboxCoreMaps.CoordinateBounds, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc deinit
}
extension MapboxMapObjC.TMBStyle {
  @objc dynamic public func setProjection(_ projection: MapboxMapObjC.TMBStyleProjection, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc dynamic public var projection: MapboxMapObjC.TMBStyleProjection {
    @objc get
  }
}
@objc extension MapboxMapObjC.TMBStyle {
  @objc dynamic public func addGeoJSONSource(id: Swift.String, properties: [Swift.String : Any], geojson: Swift.String, onComplete: (((any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func updateGeoJSONSource(id: Swift.String, geojson: Swift.String, onComplete: (((any Swift.Error)?) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc open class TMBVectorSource : ObjectiveC.NSObject, MapboxMapObjC.TMBSource {
  @objc convenience public init(id: Swift.String)
  @objc final public let type: MapboxMapObjC.TMBSourceType
  @objc public var url: Swift.String?
  @objc public var tiles: [Swift.String]?
  @objc public var bounds: [Swift.Double]?
  @objc public var scheme: Foundation.NSNumber?
  @objc public var minzoom: Foundation.NSNumber?
  @objc public var maxzoom: Foundation.NSNumber?
  @objc public var attribution: Swift.String?
  @objc public var promoteId: MapboxMapObjC.TMBPromoteId?
  @objc public var volatile: Foundation.NSNumber?
  @objc public var prefetchZoomDelta: Foundation.NSNumber?
  @objc public var minimumTileUpdateInterval: Foundation.NSNumber?
  @objc public var maxOverscaleFactorForParentTiles: Foundation.NSNumber?
  @objc public var tileRequestsDelay: Foundation.NSNumber?
  @objc public var tileNetworkRequestsDelay: Foundation.NSNumber?
  @objc deinit
}
extension MapboxMapObjC.TMBVectorSource {
  public func mapTo(_ source: inout MapboxMaps.VectorSource)
}
extension MapboxMaps.VectorSource {
  public func mapTo(_ source: inout MapboxMapObjC.TMBVectorSource)
}
extension MapboxMapObjC.TMBVectorSource : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.VectorSource
  public typealias T = MapboxMaps.VectorSource
}
extension MapboxMaps.VectorSource {
  public func objcValue(_ id: Swift.String) -> MapboxMapObjC.TMBVectorSource
}
@_hasMissingDesignatedInitializers @objc open class TMBSymbolLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var iconAllowOverlap: MapboxMapObjC.TMBValue?
  @objc public var iconAnchor: MapboxMapObjC.TMBValue?
  @objc public var iconIgnorePlacement: MapboxMapObjC.TMBValue?
  @objc public var iconImage: MapboxMapObjC.TMBValue?
  @objc public var iconKeepUpright: MapboxMapObjC.TMBValue?
  @objc public var iconOffset: MapboxMapObjC.TMBValue?
  @objc public var iconOptional: MapboxMapObjC.TMBValue?
  @objc public var iconPadding: MapboxMapObjC.TMBValue?
  @objc public var iconPitchAlignment: MapboxMapObjC.TMBValue?
  @objc public var iconRotate: MapboxMapObjC.TMBValue?
  @objc public var iconRotationAlignment: MapboxMapObjC.TMBValue?
  @objc public var iconSize: MapboxMapObjC.TMBValue?
  @objc public var iconTextFit: MapboxMapObjC.TMBValue?
  @objc public var iconTextFitPadding: MapboxMapObjC.TMBValue?
  @objc public var symbolAvoidEdges: MapboxMapObjC.TMBValue?
  @objc public var symbolPlacement: MapboxMapObjC.TMBValue?
  @objc public var symbolSortKey: MapboxMapObjC.TMBValue?
  @objc public var symbolSpacing: MapboxMapObjC.TMBValue?
  @objc public var symbolZOrder: MapboxMapObjC.TMBValue?
  @objc public var textAllowOverlap: MapboxMapObjC.TMBValue?
  @objc public var textAnchor: MapboxMapObjC.TMBValue?
  @objc public var textField: MapboxMapObjC.TMBValue?
  @objc public var textFont: MapboxMapObjC.TMBValue?
  @objc public var textIgnorePlacement: MapboxMapObjC.TMBValue?
  @objc public var textJustify: MapboxMapObjC.TMBValue?
  @objc public var textKeepUpright: MapboxMapObjC.TMBValue?
  @objc public var textLetterSpacing: MapboxMapObjC.TMBValue?
  @objc public var textLineHeight: MapboxMapObjC.TMBValue?
  @objc public var textMaxAngle: MapboxMapObjC.TMBValue?
  @objc public var textMaxWidth: MapboxMapObjC.TMBValue?
  @objc public var textOffset: MapboxMapObjC.TMBValue?
  @objc public var textOptional: MapboxMapObjC.TMBValue?
  @objc public var textPadding: MapboxMapObjC.TMBValue?
  @objc public var textPitchAlignment: MapboxMapObjC.TMBValue?
  @objc public var textRadialOffset: MapboxMapObjC.TMBValue?
  @objc public var textRotate: MapboxMapObjC.TMBValue?
  @objc public var textRotationAlignment: MapboxMapObjC.TMBValue?
  @objc public var textSize: MapboxMapObjC.TMBValue?
  @objc public var textTransform: MapboxMapObjC.TMBValue?
  @objc public var textVariableAnchor: MapboxMapObjC.TMBValue?
  @objc public var textWritingMode: MapboxMapObjC.TMBValue?
  @objc public var iconColor: MapboxMapObjC.TMBValue?
  @objc public var iconColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconHaloBlur: MapboxMapObjC.TMBValue?
  @objc public var iconHaloBlurTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconHaloColor: MapboxMapObjC.TMBValue?
  @objc public var iconHaloColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconHaloWidth: MapboxMapObjC.TMBValue?
  @objc public var iconHaloWidthTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconOpacity: MapboxMapObjC.TMBValue?
  @objc public var iconOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconTranslate: MapboxMapObjC.TMBValue?
  @objc public var iconTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var iconTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc public var textColor: MapboxMapObjC.TMBValue?
  @objc public var textColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textHaloBlur: MapboxMapObjC.TMBValue?
  @objc public var textHaloBlurTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textHaloColor: MapboxMapObjC.TMBValue?
  @objc public var textHaloColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textHaloWidth: MapboxMapObjC.TMBValue?
  @objc public var textHaloWidthTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textOpacity: MapboxMapObjC.TMBValue?
  @objc public var textOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textTranslate: MapboxMapObjC.TMBValue?
  @objc public var textTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var textTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBSymbolLayer {
  public func mapTo(_ layer: inout MapboxMaps.SymbolLayer)
}
extension MapboxMaps.SymbolLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBSymbolLayer)
}
extension MapboxMapObjC.TMBSymbolLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SymbolLayer
  public typealias T = MapboxMaps.SymbolLayer
}
extension MapboxMaps.SymbolLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSymbolLayer
  public typealias T = MapboxMapObjC.TMBSymbolLayer
}
@objc public enum TMBScheme : Swift.Int {
  case xyz
  case tms
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func scheme(_ scheme: MapboxMapObjC.TMBScheme) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withScheme scheme: MapboxMapObjC.TMBScheme) -> Foundation.NSNumber
  @objc dynamic public func scheme() -> MapboxMapObjC.TMBScheme
}
extension Foundation.NSNumber {
  public var Scheme: MapboxMaps.Scheme {
    get
  }
}
extension MapboxMapObjC.TMBScheme : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Scheme
  public typealias T = MapboxMaps.Scheme
}
extension MapboxMaps.Scheme : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBScheme
  public typealias T = MapboxMapObjC.TMBScheme
}
@objc public enum TMBEncoding : Swift.Int {
  case terrarium
  case mapbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func encoding(_ encoding: MapboxMapObjC.TMBEncoding) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withEncoding encoding: MapboxMapObjC.TMBEncoding) -> Foundation.NSNumber
  @objc dynamic public func encoding() -> MapboxMapObjC.TMBEncoding
}
extension Foundation.NSNumber {
  public var Encoding: MapboxMaps.Encoding {
    get
  }
}
extension MapboxMapObjC.TMBEncoding : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Encoding
  public typealias T = MapboxMaps.Encoding
}
extension MapboxMaps.Encoding : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBEncoding
  public typealias T = MapboxMapObjC.TMBEncoding
}
@objc open class TMBClusterOptions : ObjectiveC.NSObject {
  @objc public var circleRadius: MapboxMapObjC.TMBValue?
  @objc public var circleColor: MapboxMapObjC.TMBValue?
  @objc public var textColor: MapboxMapObjC.TMBValue?
  @objc public var textSize: MapboxMapObjC.TMBValue?
  @objc public var textField: MapboxMapObjC.TMBValue?
  @objc public var clusterRadius: Swift.Double
  @objc public var clusterMaxZoom: Swift.Double
  @objc public var clusterProperties: [Swift.String : MapboxMapObjC.TMBExpression]?
  @objc public init(circleRadius: MapboxMapObjC.TMBValue?, circleColor: MapboxMapObjC.TMBValue?, textColor: MapboxMapObjC.TMBValue?, textSize: MapboxMapObjC.TMBValue?, textField: MapboxMapObjC.TMBValue?, clusterRadius: Swift.Double = 50, clusterMaxZoom: Swift.Double = 14, clusterProperties: [Swift.String : MapboxMapObjC.TMBExpression]? = nil)
  @objc deinit
}
@objc public protocol TMBAnnotationManager {
  @objc var id: Swift.String { get }
  @objc var sourceId: Swift.String { get }
  @objc var layerId: Swift.String { get }
}
@objc public protocol TMBAnnotationInteractionDelegate {
  @objc func annotationManager(_ manager: any MapboxMapObjC.TMBAnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMapObjC.TMBAnnotation])
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func mapboxMap() -> MapboxMapObjC.TMBMapboxMap
}
@_hasMissingDesignatedInitializers @objc open class TMBMapboxMap : ObjectiveC.NSObject {
  @objc final public let style: MapboxMapObjC.TMBStyle
  @objc public func triggerRepaint()
  @objc public func loadStyleURI(_ styleUri: Swift.String, completion: ((MapboxMapObjC.TMBStyle?, (any Swift.Error)?) -> Swift.Void)?)
  @objc public func loadStyleJSON(_ JSON: Swift.String, completion: ((MapboxMapObjC.TMBStyle?, (any Swift.Error)?) -> Swift.Void)?)
  @objc public var prefetchZoomDelta: Swift.UInt8 {
    @objc get
    @objc set
  }
  @objc public var shouldRenderWorldCopies: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var resourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
  }
  @objc public static func clearData(for resourceOptions: MapboxCoreMaps.ResourceOptions, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func elevation(at coordinate: CoreLocation.CLLocationCoordinate2D) -> Foundation.NSNumber?
  @objc public func coordinateBounds(for rect: CoreFoundation.CGRect) -> MapboxCoreMaps.CoordinateBounds
  @objc public func rect(for coordinateBounds: MapboxCoreMaps.CoordinateBounds) -> CoreFoundation.CGRect
  @objc public var debugOptions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc public var options: MapboxCoreMaps.MapOptions {
    @objc get
  }
  @objc public func camera(forCoordinateBounds coordinateBounds: MapboxCoreMaps.CoordinateBounds, padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(forCoordinates coordinates: [Foundation.NSValue], padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(for coordinates: [Foundation.NSValue], camera: MapboxCoreMaps.CameraOptions, rect: CoreFoundation.CGRect) -> MapboxCoreMaps.CameraOptions
  @objc public func camera(for geometry: MapboxCommon.Geometry, padding: UIKit.UIEdgeInsets, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions
  @objc public func coordinateBounds(forCameraBounds camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBounds
  @objc public func coordinateBoundsUnwrapped(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBounds
  @objc public func coordinateBoundsZoom(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBoundsZoom
  @objc public func coordinateBoundsZoomUnwrapped(for camera: MapboxCoreMaps.CameraOptions) -> MapboxCoreMaps.CoordinateBoundsZoom
  @objc public func coordinate(for point: CoreFoundation.CGPoint) -> CoreLocation.CLLocationCoordinate2D
  @objc public func point(for coordinate: CoreLocation.CLLocationCoordinate2D) -> CoreFoundation.CGPoint
  @objc public func points(for coordinates: [CoreLocation.CLLocationCoordinate2D]) -> [Foundation.NSValue]
  @objc public func coordinates(for points: [Foundation.NSValue]) -> [Foundation.NSValue]
  @objc public func setCamera(to cameraOptions: MapboxCoreMaps.CameraOptions)
  @objc public var cameraState: MapboxCoreMaps.CameraState {
    @objc get
  }
  @objc public var freeCameraOptions: MapboxCoreMaps.FreeCameraOptions {
    @objc get
    @objc set
  }
  @objc public var cameraBounds: MapboxCoreMaps.CameraBounds {
    @objc get
  }
  @objc public func setCameraBounds(with options: MapboxCoreMaps.CameraBoundsOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func dragStart(for point: CoreFoundation.CGPoint)
  @objc public func dragCameraOptions(from: CoreFoundation.CGPoint, to: CoreFoundation.CGPoint) -> MapboxCoreMaps.CameraOptions
  @objc public func dragEnd()
  @objc public func beginAnimation()
  @objc public func endAnimation()
  @objc public func beginGesture()
  @objc public func endGesture()
  @objc deinit
}
extension MapboxMapObjC.TMBMapboxMap {
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withShape shape: [CoreFoundation.CGPoint], options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withRect rect: CoreFoundation.CGRect, options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func queryRenderedFeatures(withPoint point: CoreFoundation.CGPoint, options: MapboxCoreMaps.RenderedQueryOptions? = nil, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func querySourceFeatures(for sourceId: Swift.String, options: MapboxCoreMaps.SourceQueryOptions, completion: (([MapboxCoreMaps.QueriedFeature]?, (any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func queryFeatureExtension(for sourceId: Swift.String, feature: MapboxCommon.Feature, extension: Swift.String, extensionField: Swift.String, args: [Swift.String : Any]? = nil, completion: ((MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)?)
  @objc dynamic public func getGeoJsonClusterLeaves(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, limit: Swift.UInt64 = 10, offset: Swift.UInt64 = 0, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func getGeoJsonClusterChildren(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func getGeoJsonClusterExpansionZoom(forSourceId sourceId: Swift.String, feature: MapboxCommon.Feature, completion: @escaping (MapboxCoreMaps.FeatureExtensionValue?, (any Swift.Error)?) -> Swift.Void)
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func subscribe(_ observer: any MapboxCoreMaps.Observer, events: [Swift.String])
  @objc dynamic public func unsubscribe(_ observer: any MapboxCoreMaps.Observer, events: [Swift.String] = [])
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func clearData(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
extension MapboxMapObjC.TMBMapboxMap {
  @objc dynamic public func setFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, state: [Swift.String : Any])
  @objc dynamic public func getFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, callback: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func removeFeatureState(sourceId: Swift.String, sourceLayerId: Swift.String? = nil, featureId: Swift.String, stateKey: Swift.String? = nil)
}
extension MapboxMapObjC.TMBMapboxMap {
  @discardableResult
  @objc dynamic public func onMapLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onMapLoadingError(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onMapIdle(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleImageMissing(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onStyleImageRemoveUnused(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceDataLoaded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceAdded(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onSourceRemoved(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onRenderFrameStarted(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onRenderFrameFinished(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onEvenCameraChanged(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @discardableResult
  @objc dynamic public func onResourceRequest(_ handler: @escaping (Any) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBCircleLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var circleSortKey: MapboxMapObjC.TMBValue?
  @objc public var circleBlur: MapboxMapObjC.TMBValue?
  @objc public var circleBlurTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleColor: MapboxMapObjC.TMBValue?
  @objc public var circleColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleOpacity: MapboxMapObjC.TMBValue?
  @objc public var circleOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circlePitchAlignment: MapboxMapObjC.TMBValue?
  @objc public var circlePitchScale: MapboxMapObjC.TMBValue?
  @objc public var circleRadius: MapboxMapObjC.TMBValue?
  @objc public var circleRadiusTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleStrokeColor: MapboxMapObjC.TMBValue?
  @objc public var circleStrokeColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleStrokeOpacity: MapboxMapObjC.TMBValue?
  @objc public var circleStrokeOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleStrokeWidth: MapboxMapObjC.TMBValue?
  @objc public var circleStrokeWidthTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleTranslate: MapboxMapObjC.TMBValue?
  @objc public var circleTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var circleTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBCircleLayer {
  public func mapTo(_ layer: inout MapboxMaps.CircleLayer)
}
extension MapboxMaps.CircleLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBCircleLayer)
}
extension MapboxMapObjC.TMBCircleLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.CircleLayer
  public typealias T = MapboxMaps.CircleLayer
}
extension MapboxMaps.CircleLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBCircleLayer
  public typealias T = MapboxMapObjC.TMBCircleLayer
}
@_hasMissingDesignatedInitializers @objc open class TMBExpressionOptions : ObjectiveC.NSObject {
  @objc final public let type: MapboxMapObjC.TMBExpressionOptionsType
  @objc final public let options: Any
  final public let arguments: [MapboxMaps.Expression.Argument]
  @objc public static func format(options: MapboxMapObjC.TMBFormatOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc public static func numberFormat(options: MapboxMapObjC.TMBNumberFormatOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc public static func collator(options: MapboxMapObjC.TMBCollatorOptions) -> MapboxMapObjC.TMBExpressionOptions
  @objc deinit
}
@objc public enum TMBExpressionOptionsType : Swift.Int {
  case format
  case numberFormat
  case collator
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBFormatOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.FormatOptions {
    get
  }
  @objc public var fontScaleValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var fontScale: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textFontValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var textFont: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var textColorValue: MapboxMapObjC.TMBValue? {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  public init(fontScale: MapboxMapObjC.TMBValue? = nil, textFont: MapboxMapObjC.TMBValue? = nil, textColor: MapboxMapObjC.TMBValue? = nil)
  public init(fontScale: Swift.Double? = nil, textFont: [Swift.String]? = nil, textColor: UIKit.UIColor? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBNumberFormatOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.NumberFormatOptions {
    get
  }
  public var locale: Swift.String? {
    get
    set
  }
  public var currency: Swift.String? {
    get
    set
  }
  public var minFractionDigits: Foundation.NSNumber? {
    get
    set
  }
  public var maxFractionDigits: Foundation.NSNumber? {
    get
    set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  public init(locale: Swift.String?, currency: Swift.String?, minFractionDigits: Swift.Int?, maxFractionDigits: Swift.Int?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCollatorOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.CollatorOptions {
    get
  }
  @objc public var caseSensitive: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var diacriticSensitive: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var locale: Swift.String? {
    @objc get
    @objc set
  }
  public var expressionArguments: [MapboxMaps.Expression.Argument] {
    get
  }
  @objc public init(caseSensitive: Foundation.NSNumber?, diacriticSensitive: Foundation.NSNumber?, locale: Swift.String?)
  @objc deinit
}
@objc open class TMBCircleAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.CircleAnnotation
  public init(swiftValue: MapboxMaps.CircleAnnotation)
  @objc public class func from(center coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBCircleAnnotation
  @objc public var circleSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleRadius: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleStrokeWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBCircleAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBCircleAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.CircleAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.CircleAnnotationManager)
  @objc public var circlePitchAlignment: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circlePitchScale: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var circleTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var circleTranslateAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class TMBLight : ObjectiveC.NSObject {
  @objc public var anchor: Foundation.NSNumber?
  @objc public var color: UIKit.UIColor?
  @objc public var colorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var intensity: Foundation.NSNumber?
  @objc public var intensityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var position: [Swift.Double]?
  @objc public var positionTransition: MapboxMapObjC.TMBStyleTransition?
  @objc override dynamic public init()
  @objc deinit
}
extension MapboxMapObjC.TMBLight {
  public func mapTo(_ source: inout MapboxMaps.Light)
}
extension MapboxMaps.Light {
  public func mapTo(_ source: inout MapboxMapObjC.TMBLight)
}
extension MapboxMapObjC.TMBLight : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Light
  public typealias T = MapboxMaps.Light
}
extension MapboxMaps.Light {
  public func objcValue() -> MapboxMapObjC.TMBLight
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func camera() -> MapboxMapObjC.TMBCameraAnimationsManager
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraAnimationsManager : ObjectiveC.NSObject {
  @objc public var cameraAnimators: [MapboxMapObjC.TMBCameraAnimator] {
    @objc get
  }
  @objc public func cancelAnimations()
  @discardableResult
  @objc public func fly(to: MapboxCoreMaps.CameraOptions, duration: Foundation.NSNumber?, completion: MapboxMaps.AnimationCompletion? = nil) -> MapboxMapObjC.TMBCancelable?
  @discardableResult
  @objc public func ease(to: MapboxCoreMaps.CameraOptions, duration: Foundation.TimeInterval, curve: UIKit.UIView.AnimationCurve = .easeOut, completion: MapboxMaps.AnimationCompletion? = nil) -> MapboxMapObjC.TMBCancelable?
  @objc public func makeAnimator(duration: Foundation.TimeInterval, timingParameters: any UIKit.UITimingCurveProvider, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, curve: UIKit.UIView.AnimationCurve, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc public func makeAnimator(duration: Foundation.TimeInterval, dampingRatio: CoreFoundation.CGFloat, animationOwner: MapboxMapObjC.TMBAnimationOwner?, animations: @escaping (MapboxMapObjC.TMBCameraTransition) -> Swift.Void) -> MapboxMaps.BasicCameraAnimator
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraAnimator : ObjectiveC.NSObject {
  @objc public var state: UIKit.UIViewAnimatingState {
    @objc get
  }
  @objc public func cancel()
  @objc deinit
}
@objc open class TMBAnimationOwner : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public func stringValue() -> Swift.String
  @objc public init(rawValue: Swift.String)
  @objc public static let gestures: MapboxMapObjC.TMBAnimationOwner
  @objc public static let unspecified: MapboxMapObjC.TMBAnimationOwner
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraTransition : ObjectiveC.NSObject {
  @objc public var center: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var zoom: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var padding: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var anchor: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var bearing: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc public var shouldOptimizeBearingPath: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var pitch: MapboxMapObjC.TMBCameraTransitionChange {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBCameraTransitionChange : ObjectiveC.NSObject {
  @objc public var fromValue: Foundation.NSValue
  @objc public var toValue: Foundation.NSValue?
  public static func fromChange(_ change: MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromCoordinate(_ change: MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromEdgeInsets(_ change: MapboxMaps.CameraTransition.Change<UIKit.UIEdgeInsets>) -> MapboxMapObjC.TMBCameraTransitionChange
  public static func fromCGFloat(_ change: MapboxMaps.CameraTransition.Change<CoreFoundation.CGFloat>) -> MapboxMapObjC.TMBCameraTransitionChange
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<CoreLocation.CLLocationCoordinate2D>)
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<UIKit.UIEdgeInsets>)
  public func change(_ change: inout MapboxMaps.CameraTransition.Change<CoreFoundation.CGFloat>)
  @objc deinit
}
@objc open class TMBPointAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func image(_ image: UIKit.UIImage, name: Swift.String)
  public var swiftValue: MapboxMaps.PointAnnotation
  public init(swiftValue: MapboxMaps.PointAnnotation)
  @objc public class func from(coordinate: Turf.LocationCoordinate2D) -> MapboxMapObjC.TMBPointAnnotation
  @objc public var iconAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var iconOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textField: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var textJustify: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textLetterSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textRadialOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textRotate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textTransform: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var iconHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textHaloColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var textHaloWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPointAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPointAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PointAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PointAnnotationManager)
  @objc public var iconAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconPitchAlignment: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconRotationAlignment: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconTextFit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var iconTextFitPadding: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var symbolAvoidEdges: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolPlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolSpacing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var symbolZOrder: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textAllowOverlap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textFont: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var textIgnorePlacement: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textKeepUpright: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textMaxAngle: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textOptional: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPadding: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textPitchAlignment: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textRotationAlignment: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textVariableAnchor: [Foundation.NSNumber]? {
    @objc get
    @objc set
  }
  @objc public var textWritingMode: [Foundation.NSNumber]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var iconTranslateAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var textTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var textTranslateAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.")
  @objc public var textLineHeight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBLayerPosition : ObjectiveC.NSObject {
  @objc final public let arg: Swift.AnyObject
  @objc final public let type: MapboxMapObjC.TMBLayerPositionType
  @objc public init(_ type: MapboxMapObjC.TMBLayerPositionType, arg: Swift.AnyObject)
  @objc public static func at(index: Swift.Int) -> MapboxMapObjC.TMBLayerPosition
  @objc public static func below(layerId: Swift.String) -> MapboxMapObjC.TMBLayerPosition
  @objc public static func above(layerId: Swift.String) -> MapboxMapObjC.TMBLayerPosition
  @objc deinit
}
@objc public enum TMBLayerPositionType : Swift.Int {
  case at
  case above
  case below
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMapObjC.TMBLayerPosition {
  public func swiftValue() -> MapboxMaps.LayerPosition
}
@objc public enum TMBLayerType : Swift.Int {
  case fill
  case line
  case symbol
  case circle
  case heatmap
  case fillExtrusion
  case raster
  case hillshade
  case background
  case locationIndicator
  case sky
  @available(*, deprecated, message: "Unsupported layer type")
  case model
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func layerType(_ layerType: MapboxMapObjC.TMBLayerType) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withLayerType layerType: MapboxMapObjC.TMBLayerType) -> Foundation.NSNumber
  @objc dynamic public func layerType() -> MapboxMapObjC.TMBLayerType
}
extension Foundation.NSNumber {
  public var LayerType: MapboxMaps.LayerType {
    get
  }
}
extension MapboxMapObjC.TMBLayerType : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LayerType
  public typealias T = MapboxMaps.LayerType
}
extension MapboxMaps.LayerType : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLayerType
  public typealias T = MapboxMapObjC.TMBLayerType
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImageData : ObjectiveC.NSObject {
  final public let available: Swift.Bool
  final public let name: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBResolvedImage : ObjectiveC.NSObject, Swift.Codable {
  final public let available: Swift.Bool?
  final public let name: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MapboxMapObjC.TMBResolvedImage {
  @objc dynamic public class func from(name: Swift.String) -> MapboxMapObjC.TMBResolvedImage
  @objc dynamic public class func from(name: Swift.String, available: Swift.Bool) -> MapboxMapObjC.TMBResolvedImage
}
@objc open class TMBPolygonAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  public var swiftValue: MapboxMaps.PolygonAnnotation
  public init(swiftValue: MapboxMaps.PolygonAnnotation)
  @objc public class func polygon(_ polygon: MapboxMapObjC.TMBPolygon) -> MapboxMapObjC.TMBPolygonAnnotation
  @objc public var fillSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillOutlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var fillPattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolygon : ObjectiveC.NSObject {
  final public let swiftValue: Turf.Polygon
  @objc public init(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]])
  @objc public init(_ coordinates: [[Turf.LocationCoordinate2D]])
  @objc public class func create(outerRingCoordinates: [CoreLocation.CLLocationCoordinate2D], innerRingCoordinates: [[CoreLocation.CLLocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc public class func from(coordinates: [[Turf.LocationCoordinate2D]]) -> MapboxMapObjC.TMBPolygon
  @objc deinit
}
@objc open class TMBPolygonAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolygonAnnotation] {
    @objc get
    @objc set
  }
  @objc public var fillAntialias: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var fillTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var fillTranslateAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PolygonAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PolygonAnnotationManager)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class GeometryHelper : ObjectiveC.NSObject {
  @objc public class func createPoint(_ location: Foundation.NSValue) -> MapboxCommon.Geometry
  @objc public class func createLine(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiLine(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func createMultiPoint(_ locations: [Foundation.NSValue]) -> MapboxCommon.Geometry
  @objc public class func createMultiPolygon(_ locations: [[[Foundation.NSValue]]]) -> MapboxCommon.Geometry
  @objc public class func createPolygon(_ locations: [[Foundation.NSValue]]) -> MapboxCommon.Geometry
  @objc public class func create(_ items: [MapboxCommon.Geometry]) -> MapboxCommon.Geometry
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func annotations() -> MapboxMapObjC.TMBAnnotationOrchestrator
}
@_hasMissingDesignatedInitializers @objc open class TMBAnnotationOrchestrator : ObjectiveC.NSObject {
  @objc public var annotationManagersById: [Swift.String : any MapboxMapObjC.TMBAnnotationManager] {
    @objc get
  }
  @objc public func makePointAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?, clusterOptions: MapboxMapObjC.TMBClusterOptions?) -> MapboxMapObjC.TMBPointAnnotationManager
  @objc public func makePolygonAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBPolygonAnnotationManager
  @objc public func makePolylineAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBPolylineAnnotationManager
  @objc public func makeCircleAnnotationManager(id: Swift.String?, layerPosition: MapboxMapObjC.TMBLayerPosition?) -> MapboxMapObjC.TMBCircleAnnotationManager
  @objc public func removeAnnotationManager(withId id: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFillExtrusionLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionAmbientOcclusionIntensity: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionAmbientOcclusionIntensityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionAmbientOcclusionRadius: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionAmbientOcclusionRadiusTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionBase: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionBaseTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionColor: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionHeight: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionHeightTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionOpacity: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionPattern: MapboxMapObjC.TMBValue?
  @available(*, deprecated, message: "This property is deprecated and will be removed in the future. Setting this will have no effect.")
  @objc public var fillExtrusionPatternTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionTranslate: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var fillExtrusionTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc public var fillExtrusionVerticalGradient: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBFillExtrusionLayer {
  public func mapTo(_ layer: inout MapboxMaps.FillExtrusionLayer)
}
extension MapboxMaps.FillExtrusionLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBFillExtrusionLayer)
}
extension MapboxMapObjC.TMBFillExtrusionLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.FillExtrusionLayer
  public typealias T = MapboxMaps.FillExtrusionLayer
}
extension MapboxMaps.FillExtrusionLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBFillExtrusionLayer
  public typealias T = MapboxMapObjC.TMBFillExtrusionLayer
}
@_hasMissingDesignatedInitializers @objc open class TMBHeatmapLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var heatmapColor: MapboxMapObjC.TMBValue?
  @objc public var heatmapIntensity: MapboxMapObjC.TMBValue?
  @objc public var heatmapIntensityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var heatmapOpacity: MapboxMapObjC.TMBValue?
  @objc public var heatmapOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var heatmapRadius: MapboxMapObjC.TMBValue?
  @objc public var heatmapRadiusTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var heatmapWeight: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBHeatmapLayer {
  public func mapTo(_ layer: inout MapboxMaps.HeatmapLayer)
}
extension MapboxMaps.HeatmapLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBHeatmapLayer)
}
extension MapboxMapObjC.TMBHeatmapLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.HeatmapLayer
  public typealias T = MapboxMaps.HeatmapLayer
}
extension MapboxMaps.HeatmapLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBHeatmapLayer
  public typealias T = MapboxMapObjC.TMBHeatmapLayer
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleTransition : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.StyleTransition {
    get
  }
  @objc public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var delay: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(duration: Swift.Double, delay: Swift.Double)
  @objc public class var zero: MapboxMapObjC.TMBStyleTransition {
    @objc get
  }
  @objc deinit
}
extension MapboxMaps.StyleTransition : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBStyleTransition
  public typealias T = MapboxMapObjC.TMBStyleTransition
}
extension MapboxMapObjC.TMBStyleTransition {
  public func styleTransition() -> MapboxMaps.StyleTransition
}
@objc extension MapboxMaps.MapInitOptions {
  @objc final public func getResourceOptions() -> MapboxCoreMaps.ResourceOptions
  @objc final public func getMapOptions() -> MapboxCoreMaps.MapOptions
  @objc final public func getStyleURI() -> Swift.String?
  @objc final public func getStyleJSON() -> Swift.String?
  @objc final public func getCameraOptions() -> MapboxCoreMaps.CameraOptions?
}
@_inheritsConvenienceInitializers @objc open class MapInitOptionsFactory : ObjectiveC.NSObject {
  @objc public static func create(resourceOptions: MapboxCoreMaps.ResourceOptions? = nil, mapOptions: MapboxCoreMaps.MapOptions? = nil, cameraOptions: MapboxCoreMaps.CameraOptions? = nil, styleURI: Swift.String? = nil, styleJSON: Swift.String? = nil) -> MapboxMaps.MapInitOptions
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBResourceOptionsManager : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ResourceOptionsManager {
    get
  }
  @objc public static var `default`: MapboxMapObjC.TMBResourceOptionsManager {
    @objc get
  }
  @objc public static func destroyDefault()
  @objc public var resourceOptions: MapboxCoreMaps.ResourceOptions {
    @objc get
    @objc set
  }
  @objc convenience public init(accessToken: Swift.String? = nil)
  @objc convenience public init(resourceOptions: MapboxCoreMaps.ResourceOptions)
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewAnnotations() -> MapboxMapObjC.TMBViewAnnotationManager
}
@_hasMissingDesignatedInitializers @objc open class TMBViewAnnotationManager : ObjectiveC.NSObject {
  @objc public func options(forAnnotationId id: Swift.String) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func options(forAnnotationView view: UIKit.UIView) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func view(forAnnotationId id: Swift.String) -> UIKit.UIView?
  @objc public func view(forAnnotationFeatureId id: Swift.String) -> UIKit.UIView?
  @objc public func options(forAnnotationFeatureId id: Swift.String) -> MapboxCoreMaps.ViewAnnotationOptions?
  @objc public func add(viewAnnotation: UIKit.UIView, id: Swift.String?, options: MapboxCoreMaps.ViewAnnotationOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func update(viewAnnotation: UIKit.UIView, options: MapboxCoreMaps.ViewAnnotationOptions, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func remove(viewAnnotation: UIKit.UIView)
  @objc public func removeAllViewAnnotations()
  @objc public func addViewAnnotationUpdateObserver(_ observer: any MapboxMapObjC.TMBViewAnnotationUpdateObserver)
  @objc public func removeViewAnnotationUpdateObserver(_ observer: any MapboxMapObjC.TMBViewAnnotationUpdateObserver)
  @objc public func camera(forAnnotations identifiers: [Swift.String], padding: UIKit.UIEdgeInsets = .zero, bearing: Foundation.NSNumber?, pitch: Foundation.NSNumber?) -> MapboxCoreMaps.CameraOptions?
  @objc deinit
}
@objc public enum TMBViewAnnotationManagerError : Swift.Int {
  case viewIsAlreadyAdded
  case associatedFeatureIdIsAlreadyInUse
  case annotationNotFound
  case geometryFieldMissing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.ViewAnnotationManagerError : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBViewAnnotationManagerError
  public typealias T = MapboxMapObjC.TMBViewAnnotationManagerError
}
@objc public protocol TMBViewAnnotationUpdateObserver {
  @objc func framesDidChange(for annotationViews: [UIKit.UIView])
  @objc func visibilityDidChange(for annotationViews: [UIKit.UIView])
}
@_hasMissingDesignatedInitializers @objc open class TMBSkyLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var skyAtmosphereColor: MapboxMapObjC.TMBValue?
  @objc public var skyAtmosphereHaloColor: MapboxMapObjC.TMBValue?
  @objc public var skyAtmosphereSun: MapboxMapObjC.TMBValue?
  @objc public var skyAtmosphereSunIntensity: MapboxMapObjC.TMBValue?
  @objc public var skyGradient: MapboxMapObjC.TMBValue?
  @objc public var skyGradientCenter: MapboxMapObjC.TMBValue?
  @objc public var skyGradientRadius: MapboxMapObjC.TMBValue?
  @objc public var skyOpacity: MapboxMapObjC.TMBValue?
  @objc public var skyOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var skyType: MapboxMapObjC.TMBValue?
  @objc deinit
}
extension MapboxMapObjC.TMBSkyLayer {
  public func mapTo(_ layer: inout MapboxMaps.SkyLayer)
}
extension MapboxMaps.SkyLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBSkyLayer)
}
extension MapboxMapObjC.TMBSkyLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SkyLayer
  public typealias T = MapboxMaps.SkyLayer
}
extension MapboxMaps.SkyLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSkyLayer
  public typealias T = MapboxMapObjC.TMBSkyLayer
}
@objc public protocol TMBSource {
  @objc var type: MapboxMapObjC.TMBSourceType { get }
}
@_hasMissingDesignatedInitializers @objc open class TMBSourceInfo : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.SourceInfo {
    get
  }
  @objc public var id: Swift.String {
    @objc get
    @objc set
  }
  @objc public var type: MapboxMapObjC.TMBSourceType {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public enum TMBPromoteIdType : Swift.Int {
  case string
  case object
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBPromoteId : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.PromoteId {
    get
  }
  @objc public var type: MapboxMapObjC.TMBPromoteIdType {
    @objc get
  }
  @objc public class func string(value: Swift.String) -> MapboxMapObjC.TMBPromoteId
  @objc public class func object(value: [Swift.String : Swift.String]) -> MapboxMapObjC.TMBPromoteId
  @objc deinit
}
extension MapboxMaps.PromoteId : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBPromoteId
  public func promoteId() -> MapboxMapObjC.TMBPromoteId
  public typealias T = MapboxMapObjC.TMBPromoteId
}
extension MapboxMapObjC.TMBPromoteId : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.PromoteId
  public func promoteId() -> MapboxMaps.PromoteId
  public typealias T = MapboxMaps.PromoteId
}
@objc public enum TMBGeoJSONSourceType : Swift.Int {
  case url
  case feature
  case featureCollection
  case geometry
  case empty
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class TMBGeoJSONSourceData : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.GeoJSONSourceData {
    get
  }
  @objc public var type: MapboxMapObjC.TMBGeoJSONSourceType {
    @objc get
  }
  @objc public class func url(url: Foundation.URL) -> MapboxMapObjC.TMBGeoJSONSourceData
  @objc public class func feature(feature: MapboxCommon.Feature) -> MapboxMapObjC.TMBGeoJSONSourceData
  @objc public class func featureCollection(features: [MapboxCommon.Feature]) -> MapboxMapObjC.TMBGeoJSONSourceData
  @objc public class func geometry(geometry: MapboxCommon.Geometry) -> MapboxMapObjC.TMBGeoJSONSourceData
  @objc public class func empty() -> MapboxMapObjC.TMBGeoJSONSourceData
  @objc deinit
}
extension MapboxMaps.GeoJSONSourceData : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBGeoJSONSourceData
  public func geoJSONSourceData() -> MapboxMapObjC.TMBGeoJSONSourceData
  public typealias T = MapboxMapObjC.TMBGeoJSONSourceData
}
extension MapboxMapObjC.TMBGeoJSONSourceData : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.GeoJSONSourceData
  public func geoJSONSourceData() -> MapboxMaps.GeoJSONSourceData
  public typealias T = MapboxMaps.GeoJSONSourceData
}
@_hasMissingDesignatedInitializers @objc open class TMBHillshadeLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var hillshadeAccentColor: MapboxMapObjC.TMBValue?
  @objc public var hillshadeAccentColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var hillshadeExaggeration: MapboxMapObjC.TMBValue?
  @objc public var hillshadeExaggerationTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var hillshadeHighlightColor: MapboxMapObjC.TMBValue?
  @objc public var hillshadeHighlightColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var hillshadeIlluminationAnchor: MapboxMapObjC.TMBValue?
  @objc public var hillshadeIlluminationDirection: MapboxMapObjC.TMBValue?
  @objc public var hillshadeShadowColor: MapboxMapObjC.TMBValue?
  @objc public var hillshadeShadowColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc deinit
}
extension MapboxMapObjC.TMBHillshadeLayer {
  public func mapTo(_ layer: inout MapboxMaps.HillshadeLayer)
}
extension MapboxMaps.HillshadeLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBHillshadeLayer)
}
extension MapboxMapObjC.TMBHillshadeLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.HillshadeLayer
  public typealias T = MapboxMaps.HillshadeLayer
}
extension MapboxMaps.HillshadeLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBHillshadeLayer
  public typealias T = MapboxMapObjC.TMBHillshadeLayer
}
@objc public enum TMBExpressionOperator : Swift.Int {
  case subtract
  case not
  case neq
  case product
  case division
  case mod
  case pow
  case sum
  case lt
  case lte
  case eq
  case gt
  case gte
  case abs
  case accumulated
  case acos
  case all
  case any
  case array
  case asin
  case at
  case atan
  case boolean
  case switchCase
  case ceil
  case coalesce
  case collator
  case concat
  case cos
  case distance
  case distanceFromCenter
  case downcase
  case e
  case featureState
  case floor
  case format
  case geometryType
  case get
  case has
  case heatmapDensity
  case id
  case image
  case inExpression
  case indexOf
  case interpolate
  case isSupportedScript
  case length
  case letExpression
  case lineProgress
  case literal
  case ln
  case ln2
  case log10
  case log2
  case match
  case max
  case min
  case number
  case numberFormat
  case objectExpression
  case pi
  case pitch
  case properties
  case resolvedLocale
  case rgb
  case rgba
  case round
  case sin
  case skyRadialProgress
  case slice
  case sqrt
  case step
  case string
  case tan
  case toBoolean
  case toColor
  case toNumber
  case toRgba
  case toString
  case typeofExpression
  case upcase
  case varExpression
  case within
  case zoom
  case linear
  case exponential
  case cubicBezier
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func expressionOperator(_ expressionOperator: MapboxMapObjC.TMBExpressionOperator) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withExpressionOperator expressionOperator: MapboxMapObjC.TMBExpressionOperator) -> Foundation.NSNumber
  @objc dynamic public func expressionOperator() -> MapboxMapObjC.TMBExpressionOperator
}
extension Foundation.NSNumber {
  public var ExpressionOperator: MapboxMaps.Expression.Operator {
    get
  }
}
extension MapboxMapObjC.TMBExpressionOperator : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Expression.Operator
  public typealias T = MapboxMaps.Expression.Operator
}
extension MapboxMaps.Expression.Operator : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBExpressionOperator
  public typealias T = MapboxMapObjC.TMBExpressionOperator
}
@_hasMissingDesignatedInitializers @objc open class TMBStyleProjection : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.StyleProjection {
    get
  }
  @objc public var name: MapboxMapObjC.TMBStyleProjectionName {
    @objc get
    @objc set
  }
  @objc public init(name: MapboxMapObjC.TMBStyleProjectionName)
  @objc deinit
}
extension MapboxMaps.StyleProjection : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBStyleProjection
  public typealias T = MapboxMapObjC.TMBStyleProjection
}
@objc public enum TMBVisibility : Swift.Int {
  case visible
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func visibility(_ visibility: MapboxMapObjC.TMBVisibility) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withVisibility visibility: MapboxMapObjC.TMBVisibility) -> Foundation.NSNumber
  @objc dynamic public func visibility() -> MapboxMapObjC.TMBVisibility
}
extension Foundation.NSNumber {
  public var Visibility: MapboxMaps.Visibility {
    get
  }
}
extension MapboxMapObjC.TMBVisibility : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Visibility
  public typealias T = MapboxMaps.Visibility
}
extension MapboxMaps.Visibility : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBVisibility
  public typealias T = MapboxMapObjC.TMBVisibility
}
@objc public enum TMBLineCap : Swift.Int {
  case butt
  case round
  case square
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func lineCap(_ lineCap: MapboxMapObjC.TMBLineCap) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withLineCap lineCap: MapboxMapObjC.TMBLineCap) -> Foundation.NSNumber
  @objc dynamic public func lineCap() -> MapboxMapObjC.TMBLineCap
}
extension Foundation.NSNumber {
  public var LineCap: MapboxMaps.LineCap {
    get
  }
}
extension MapboxMapObjC.TMBLineCap : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LineCap
  public typealias T = MapboxMaps.LineCap
}
extension MapboxMaps.LineCap : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLineCap
  public typealias T = MapboxMapObjC.TMBLineCap
}
@objc public enum TMBLineJoin : Swift.Int {
  case bevel
  case round
  case miter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func lineJoin(_ lineJoin: MapboxMapObjC.TMBLineJoin) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withLineJoin lineJoin: MapboxMapObjC.TMBLineJoin) -> Foundation.NSNumber
  @objc dynamic public func lineJoin() -> MapboxMapObjC.TMBLineJoin
}
extension Foundation.NSNumber {
  public var LineJoin: MapboxMaps.LineJoin {
    get
  }
}
extension MapboxMapObjC.TMBLineJoin : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LineJoin
  public typealias T = MapboxMaps.LineJoin
}
extension MapboxMaps.LineJoin : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLineJoin
  public typealias T = MapboxMapObjC.TMBLineJoin
}
@objc public enum TMBIconAnchor : Swift.Int {
  case center
  case left
  case right
  case top
  case bottom
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func iconAnchor(_ iconAnchor: MapboxMapObjC.TMBIconAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withIconAnchor iconAnchor: MapboxMapObjC.TMBIconAnchor) -> Foundation.NSNumber
  @objc dynamic public func iconAnchor() -> MapboxMapObjC.TMBIconAnchor
}
extension Foundation.NSNumber {
  public var IconAnchor: MapboxMaps.IconAnchor {
    get
  }
}
extension MapboxMapObjC.TMBIconAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.IconAnchor
  public typealias T = MapboxMaps.IconAnchor
}
extension MapboxMaps.IconAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBIconAnchor
  public typealias T = MapboxMapObjC.TMBIconAnchor
}
@objc public enum TMBIconPitchAlignment : Swift.Int {
  case map
  case viewport
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func iconPitchAlignment(_ iconPitchAlignment: MapboxMapObjC.TMBIconPitchAlignment) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withIconPitchAlignment iconPitchAlignment: MapboxMapObjC.TMBIconPitchAlignment) -> Foundation.NSNumber
  @objc dynamic public func iconPitchAlignment() -> MapboxMapObjC.TMBIconPitchAlignment
}
extension Foundation.NSNumber {
  public var IconPitchAlignment: MapboxMaps.IconPitchAlignment {
    get
  }
}
extension MapboxMapObjC.TMBIconPitchAlignment : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.IconPitchAlignment
  public typealias T = MapboxMaps.IconPitchAlignment
}
extension MapboxMaps.IconPitchAlignment : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBIconPitchAlignment
  public typealias T = MapboxMapObjC.TMBIconPitchAlignment
}
@objc public enum TMBIconRotationAlignment : Swift.Int {
  case map
  case viewport
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func iconRotationAlignment(_ iconRotationAlignment: MapboxMapObjC.TMBIconRotationAlignment) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withIconRotationAlignment iconRotationAlignment: MapboxMapObjC.TMBIconRotationAlignment) -> Foundation.NSNumber
  @objc dynamic public func iconRotationAlignment() -> MapboxMapObjC.TMBIconRotationAlignment
}
extension Foundation.NSNumber {
  public var IconRotationAlignment: MapboxMaps.IconRotationAlignment {
    get
  }
}
extension MapboxMapObjC.TMBIconRotationAlignment : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.IconRotationAlignment
  public typealias T = MapboxMaps.IconRotationAlignment
}
extension MapboxMaps.IconRotationAlignment : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBIconRotationAlignment
  public typealias T = MapboxMapObjC.TMBIconRotationAlignment
}
@objc public enum TMBIconTextFit : Swift.Int {
  case none
  case width
  case height
  case both
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func iconTextFit(_ iconTextFit: MapboxMapObjC.TMBIconTextFit) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withIconTextFit iconTextFit: MapboxMapObjC.TMBIconTextFit) -> Foundation.NSNumber
  @objc dynamic public func iconTextFit() -> MapboxMapObjC.TMBIconTextFit
}
extension Foundation.NSNumber {
  public var IconTextFit: MapboxMaps.IconTextFit {
    get
  }
}
extension MapboxMapObjC.TMBIconTextFit : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.IconTextFit
  public typealias T = MapboxMaps.IconTextFit
}
extension MapboxMaps.IconTextFit : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBIconTextFit
  public typealias T = MapboxMapObjC.TMBIconTextFit
}
@objc public enum TMBSymbolPlacement : Swift.Int {
  case point
  case line
  case lineCenter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func symbolPlacement(_ symbolPlacement: MapboxMapObjC.TMBSymbolPlacement) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withSymbolPlacement symbolPlacement: MapboxMapObjC.TMBSymbolPlacement) -> Foundation.NSNumber
  @objc dynamic public func symbolPlacement() -> MapboxMapObjC.TMBSymbolPlacement
}
extension Foundation.NSNumber {
  public var SymbolPlacement: MapboxMaps.SymbolPlacement {
    get
  }
}
extension MapboxMapObjC.TMBSymbolPlacement : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SymbolPlacement
  public typealias T = MapboxMaps.SymbolPlacement
}
extension MapboxMaps.SymbolPlacement : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSymbolPlacement
  public typealias T = MapboxMapObjC.TMBSymbolPlacement
}
@objc public enum TMBSymbolZOrder : Swift.Int {
  case auto
  case viewportY
  case source
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func symbolZOrder(_ symbolZOrder: MapboxMapObjC.TMBSymbolZOrder) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withSymbolZOrder symbolZOrder: MapboxMapObjC.TMBSymbolZOrder) -> Foundation.NSNumber
  @objc dynamic public func symbolZOrder() -> MapboxMapObjC.TMBSymbolZOrder
}
extension Foundation.NSNumber {
  public var SymbolZOrder: MapboxMaps.SymbolZOrder {
    get
  }
}
extension MapboxMapObjC.TMBSymbolZOrder : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SymbolZOrder
  public typealias T = MapboxMaps.SymbolZOrder
}
extension MapboxMaps.SymbolZOrder : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSymbolZOrder
  public typealias T = MapboxMapObjC.TMBSymbolZOrder
}
@objc public enum TMBTextAnchor : Swift.Int {
  case center
  case left
  case right
  case top
  case bottom
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textAnchor(_ textAnchor: MapboxMapObjC.TMBTextAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextAnchor textAnchor: MapboxMapObjC.TMBTextAnchor) -> Foundation.NSNumber
  @objc dynamic public func textAnchor() -> MapboxMapObjC.TMBTextAnchor
}
extension Foundation.NSNumber {
  public var TextAnchor: MapboxMaps.TextAnchor {
    get
  }
}
extension MapboxMapObjC.TMBTextAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextAnchor
  public typealias T = MapboxMaps.TextAnchor
}
extension MapboxMaps.TextAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextAnchor
  public typealias T = MapboxMapObjC.TMBTextAnchor
}
@objc public enum TMBTextJustify : Swift.Int {
  case auto
  case left
  case center
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textJustify(_ textJustify: MapboxMapObjC.TMBTextJustify) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextJustify textJustify: MapboxMapObjC.TMBTextJustify) -> Foundation.NSNumber
  @objc dynamic public func textJustify() -> MapboxMapObjC.TMBTextJustify
}
extension Foundation.NSNumber {
  public var TextJustify: MapboxMaps.TextJustify {
    get
  }
}
extension MapboxMapObjC.TMBTextJustify : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextJustify
  public typealias T = MapboxMaps.TextJustify
}
extension MapboxMaps.TextJustify : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextJustify
  public typealias T = MapboxMapObjC.TMBTextJustify
}
@objc public enum TMBTextPitchAlignment : Swift.Int {
  case map
  case viewport
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textPitchAlignment(_ textPitchAlignment: MapboxMapObjC.TMBTextPitchAlignment) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextPitchAlignment textPitchAlignment: MapboxMapObjC.TMBTextPitchAlignment) -> Foundation.NSNumber
  @objc dynamic public func textPitchAlignment() -> MapboxMapObjC.TMBTextPitchAlignment
}
extension Foundation.NSNumber {
  public var TextPitchAlignment: MapboxMaps.TextPitchAlignment {
    get
  }
}
extension MapboxMapObjC.TMBTextPitchAlignment : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextPitchAlignment
  public typealias T = MapboxMaps.TextPitchAlignment
}
extension MapboxMaps.TextPitchAlignment : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextPitchAlignment
  public typealias T = MapboxMapObjC.TMBTextPitchAlignment
}
@objc public enum TMBTextRotationAlignment : Swift.Int {
  case map
  case viewport
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textRotationAlignment(_ textRotationAlignment: MapboxMapObjC.TMBTextRotationAlignment) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextRotationAlignment textRotationAlignment: MapboxMapObjC.TMBTextRotationAlignment) -> Foundation.NSNumber
  @objc dynamic public func textRotationAlignment() -> MapboxMapObjC.TMBTextRotationAlignment
}
extension Foundation.NSNumber {
  public var TextRotationAlignment: MapboxMaps.TextRotationAlignment {
    get
  }
}
extension MapboxMapObjC.TMBTextRotationAlignment : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextRotationAlignment
  public typealias T = MapboxMaps.TextRotationAlignment
}
extension MapboxMaps.TextRotationAlignment : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextRotationAlignment
  public typealias T = MapboxMapObjC.TMBTextRotationAlignment
}
@objc public enum TMBTextTransform : Swift.Int {
  case none
  case uppercase
  case lowercase
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textTransform(_ textTransform: MapboxMapObjC.TMBTextTransform) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextTransform textTransform: MapboxMapObjC.TMBTextTransform) -> Foundation.NSNumber
  @objc dynamic public func textTransform() -> MapboxMapObjC.TMBTextTransform
}
extension Foundation.NSNumber {
  public var TextTransform: MapboxMaps.TextTransform {
    get
  }
}
extension MapboxMapObjC.TMBTextTransform : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextTransform
  public typealias T = MapboxMaps.TextTransform
}
extension MapboxMaps.TextTransform : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextTransform
  public typealias T = MapboxMapObjC.TMBTextTransform
}
@objc public enum TMBFillTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func fillTranslateAnchor(_ fillTranslateAnchor: MapboxMapObjC.TMBFillTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withFillTranslateAnchor fillTranslateAnchor: MapboxMapObjC.TMBFillTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func fillTranslateAnchor() -> MapboxMapObjC.TMBFillTranslateAnchor
}
extension Foundation.NSNumber {
  public var FillTranslateAnchor: MapboxMaps.FillTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBFillTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.FillTranslateAnchor
  public typealias T = MapboxMaps.FillTranslateAnchor
}
extension MapboxMaps.FillTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBFillTranslateAnchor
  public typealias T = MapboxMapObjC.TMBFillTranslateAnchor
}
@objc public enum TMBLineTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func lineTranslateAnchor(_ lineTranslateAnchor: MapboxMapObjC.TMBLineTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withLineTranslateAnchor lineTranslateAnchor: MapboxMapObjC.TMBLineTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func lineTranslateAnchor() -> MapboxMapObjC.TMBLineTranslateAnchor
}
extension Foundation.NSNumber {
  public var LineTranslateAnchor: MapboxMaps.LineTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBLineTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LineTranslateAnchor
  public typealias T = MapboxMaps.LineTranslateAnchor
}
extension MapboxMaps.LineTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLineTranslateAnchor
  public typealias T = MapboxMapObjC.TMBLineTranslateAnchor
}
@objc public enum TMBIconTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func iconTranslateAnchor(_ iconTranslateAnchor: MapboxMapObjC.TMBIconTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withIconTranslateAnchor iconTranslateAnchor: MapboxMapObjC.TMBIconTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func iconTranslateAnchor() -> MapboxMapObjC.TMBIconTranslateAnchor
}
extension Foundation.NSNumber {
  public var IconTranslateAnchor: MapboxMaps.IconTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBIconTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.IconTranslateAnchor
  public typealias T = MapboxMaps.IconTranslateAnchor
}
extension MapboxMaps.IconTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBIconTranslateAnchor
  public typealias T = MapboxMapObjC.TMBIconTranslateAnchor
}
@objc public enum TMBTextTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textTranslateAnchor(_ textTranslateAnchor: MapboxMapObjC.TMBTextTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextTranslateAnchor textTranslateAnchor: MapboxMapObjC.TMBTextTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func textTranslateAnchor() -> MapboxMapObjC.TMBTextTranslateAnchor
}
extension Foundation.NSNumber {
  public var TextTranslateAnchor: MapboxMaps.TextTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBTextTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextTranslateAnchor
  public typealias T = MapboxMaps.TextTranslateAnchor
}
extension MapboxMaps.TextTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextTranslateAnchor
  public typealias T = MapboxMapObjC.TMBTextTranslateAnchor
}
@objc public enum TMBCirclePitchAlignment : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func circlePitchAlignment(_ circlePitchAlignment: MapboxMapObjC.TMBCirclePitchAlignment) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withCirclePitchAlignment circlePitchAlignment: MapboxMapObjC.TMBCirclePitchAlignment) -> Foundation.NSNumber
  @objc dynamic public func circlePitchAlignment() -> MapboxMapObjC.TMBCirclePitchAlignment
}
extension Foundation.NSNumber {
  public var CirclePitchAlignment: MapboxMaps.CirclePitchAlignment {
    get
  }
}
extension MapboxMapObjC.TMBCirclePitchAlignment : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.CirclePitchAlignment
  public typealias T = MapboxMaps.CirclePitchAlignment
}
extension MapboxMaps.CirclePitchAlignment : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBCirclePitchAlignment
  public typealias T = MapboxMapObjC.TMBCirclePitchAlignment
}
@objc public enum TMBCirclePitchScale : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func circlePitchScale(_ circlePitchScale: MapboxMapObjC.TMBCirclePitchScale) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withCirclePitchScale circlePitchScale: MapboxMapObjC.TMBCirclePitchScale) -> Foundation.NSNumber
  @objc dynamic public func circlePitchScale() -> MapboxMapObjC.TMBCirclePitchScale
}
extension Foundation.NSNumber {
  public var CirclePitchScale: MapboxMaps.CirclePitchScale {
    get
  }
}
extension MapboxMapObjC.TMBCirclePitchScale : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.CirclePitchScale
  public typealias T = MapboxMaps.CirclePitchScale
}
extension MapboxMaps.CirclePitchScale : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBCirclePitchScale
  public typealias T = MapboxMapObjC.TMBCirclePitchScale
}
@objc public enum TMBCircleTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func circleTranslateAnchor(_ circleTranslateAnchor: MapboxMapObjC.TMBCircleTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withCircleTranslateAnchor circleTranslateAnchor: MapboxMapObjC.TMBCircleTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func circleTranslateAnchor() -> MapboxMapObjC.TMBCircleTranslateAnchor
}
extension Foundation.NSNumber {
  public var CircleTranslateAnchor: MapboxMaps.CircleTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBCircleTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.CircleTranslateAnchor
  public typealias T = MapboxMaps.CircleTranslateAnchor
}
extension MapboxMaps.CircleTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBCircleTranslateAnchor
  public typealias T = MapboxMapObjC.TMBCircleTranslateAnchor
}
@objc public enum TMBFillExtrusionTranslateAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func fillExtrusionTranslateAnchor(_ fillExtrusionTranslateAnchor: MapboxMapObjC.TMBFillExtrusionTranslateAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withFillExtrusionTranslateAnchor fillExtrusionTranslateAnchor: MapboxMapObjC.TMBFillExtrusionTranslateAnchor) -> Foundation.NSNumber
  @objc dynamic public func fillExtrusionTranslateAnchor() -> MapboxMapObjC.TMBFillExtrusionTranslateAnchor
}
extension Foundation.NSNumber {
  public var FillExtrusionTranslateAnchor: MapboxMaps.FillExtrusionTranslateAnchor {
    get
  }
}
extension MapboxMapObjC.TMBFillExtrusionTranslateAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.FillExtrusionTranslateAnchor
  public typealias T = MapboxMaps.FillExtrusionTranslateAnchor
}
extension MapboxMaps.FillExtrusionTranslateAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBFillExtrusionTranslateAnchor
  public typealias T = MapboxMapObjC.TMBFillExtrusionTranslateAnchor
}
@objc public enum TMBRasterResampling : Swift.Int {
  case linear
  case nearest
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func rasterResampling(_ rasterResampling: MapboxMapObjC.TMBRasterResampling) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withRasterResampling rasterResampling: MapboxMapObjC.TMBRasterResampling) -> Foundation.NSNumber
  @objc dynamic public func rasterResampling() -> MapboxMapObjC.TMBRasterResampling
}
extension Foundation.NSNumber {
  public var RasterResampling: MapboxMaps.RasterResampling {
    get
  }
}
extension MapboxMapObjC.TMBRasterResampling : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.RasterResampling
  public typealias T = MapboxMaps.RasterResampling
}
extension MapboxMaps.RasterResampling : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBRasterResampling
  public typealias T = MapboxMapObjC.TMBRasterResampling
}
@objc public enum TMBHillshadeIlluminationAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func hillshadeIlluminationAnchor(_ hillshadeIlluminationAnchor: MapboxMapObjC.TMBHillshadeIlluminationAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withHillshadeIlluminationAnchor hillshadeIlluminationAnchor: MapboxMapObjC.TMBHillshadeIlluminationAnchor) -> Foundation.NSNumber
  @objc dynamic public func hillshadeIlluminationAnchor() -> MapboxMapObjC.TMBHillshadeIlluminationAnchor
}
extension Foundation.NSNumber {
  public var HillshadeIlluminationAnchor: MapboxMaps.HillshadeIlluminationAnchor {
    get
  }
}
extension MapboxMapObjC.TMBHillshadeIlluminationAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.HillshadeIlluminationAnchor
  public typealias T = MapboxMaps.HillshadeIlluminationAnchor
}
extension MapboxMaps.HillshadeIlluminationAnchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBHillshadeIlluminationAnchor
  public typealias T = MapboxMapObjC.TMBHillshadeIlluminationAnchor
}
@objc public enum TMBSkyType : Swift.Int {
  case gradient
  case atmosphere
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func skyType(_ skyType: MapboxMapObjC.TMBSkyType) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withSkyType skyType: MapboxMapObjC.TMBSkyType) -> Foundation.NSNumber
  @objc dynamic public func skyType() -> MapboxMapObjC.TMBSkyType
}
extension Foundation.NSNumber {
  public var SkyType: MapboxMaps.SkyType {
    get
  }
}
extension MapboxMapObjC.TMBSkyType : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SkyType
  public typealias T = MapboxMaps.SkyType
}
extension MapboxMaps.SkyType : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSkyType
  public typealias T = MapboxMapObjC.TMBSkyType
}
@objc public enum TMBAnchor : Swift.Int {
  case map
  case viewport
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func anchor(_ anchor: MapboxMapObjC.TMBAnchor) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withAnchor anchor: MapboxMapObjC.TMBAnchor) -> Foundation.NSNumber
  @objc dynamic public func anchor() -> MapboxMapObjC.TMBAnchor
}
extension Foundation.NSNumber {
  public var Anchor: MapboxMaps.Anchor {
    get
  }
}
extension MapboxMapObjC.TMBAnchor : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.Anchor
  public typealias T = MapboxMaps.Anchor
}
extension MapboxMaps.Anchor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBAnchor
  public typealias T = MapboxMapObjC.TMBAnchor
}
@objc public enum TMBStyleProjectionName : Swift.Int {
  case mercator
  case globe
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func styleProjectionName(_ styleProjectionName: MapboxMapObjC.TMBStyleProjectionName) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withStyleProjectionName styleProjectionName: MapboxMapObjC.TMBStyleProjectionName) -> Foundation.NSNumber
  @objc dynamic public func styleProjectionName() -> MapboxMapObjC.TMBStyleProjectionName
}
extension Foundation.NSNumber {
  public var StyleProjectionName: MapboxMaps.StyleProjectionName {
    get
  }
}
extension MapboxMapObjC.TMBStyleProjectionName : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.StyleProjectionName
  public typealias T = MapboxMaps.StyleProjectionName
}
extension MapboxMaps.StyleProjectionName : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBStyleProjectionName
  public typealias T = MapboxMapObjC.TMBStyleProjectionName
}
@objc public enum TMBTextWritingMode : Swift.Int {
  case horizontal
  case vertical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func textWritingMode(_ textWritingMode: MapboxMapObjC.TMBTextWritingMode) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withTextWritingMode textWritingMode: MapboxMapObjC.TMBTextWritingMode) -> Foundation.NSNumber
  @objc dynamic public func textWritingMode() -> MapboxMapObjC.TMBTextWritingMode
}
extension Foundation.NSNumber {
  public var TextWritingMode: MapboxMaps.TextWritingMode {
    get
  }
}
extension MapboxMapObjC.TMBTextWritingMode : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.TextWritingMode
  public typealias T = MapboxMaps.TextWritingMode
}
extension MapboxMaps.TextWritingMode : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBTextWritingMode
  public typealias T = MapboxMapObjC.TMBTextWritingMode
}
@_hasMissingDesignatedInitializers @objc open class TMBLineLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var lineCap: MapboxMapObjC.TMBValue?
  @objc public var lineJoin: MapboxMapObjC.TMBValue?
  @objc public var lineMiterLimit: MapboxMapObjC.TMBValue?
  @objc public var lineRoundLimit: MapboxMapObjC.TMBValue?
  @objc public var lineSortKey: MapboxMapObjC.TMBValue?
  @objc public var lineBlur: MapboxMapObjC.TMBValue?
  @objc public var lineBlurTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineColor: MapboxMapObjC.TMBValue?
  @objc public var lineColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineDasharray: MapboxMapObjC.TMBValue?
  @available(*, deprecated, message: "This property is deprecated and will be removed in the future. Setting this will have no effect.")
  @objc public var lineDasharrayTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineGapWidth: MapboxMapObjC.TMBValue?
  @objc public var lineGapWidthTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineGradient: MapboxMapObjC.TMBValue?
  @objc public var lineOffset: MapboxMapObjC.TMBValue?
  @objc public var lineOffsetTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineOpacity: MapboxMapObjC.TMBValue?
  @objc public var lineOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var linePattern: MapboxMapObjC.TMBValue?
  @available(*, deprecated, message: "This property is deprecated and will be removed in the future. Setting this will have no effect.")
  @objc public var linePatternTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineTranslate: MapboxMapObjC.TMBValue?
  @objc public var lineTranslateTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var lineTranslateAnchor: MapboxMapObjC.TMBValue?
  @objc public var lineTrimOffset: MapboxMapObjC.TMBValue?
  @objc public var lineWidth: MapboxMapObjC.TMBValue?
  @objc public var lineWidthTransition: MapboxMapObjC.TMBStyleTransition?
  @objc deinit
}
extension MapboxMapObjC.TMBLineLayer {
  public func mapTo(_ layer: inout MapboxMaps.LineLayer)
}
extension MapboxMaps.LineLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBLineLayer)
}
extension MapboxMapObjC.TMBLineLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LineLayer
  public typealias T = MapboxMaps.LineLayer
}
extension MapboxMaps.LineLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLineLayer
  public typealias T = MapboxMapObjC.TMBLineLayer
}
@_hasMissingDesignatedInitializers @objc open class TMBExpression : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.Expression {
    get
  }
  @objc public var expressionOperator: MapboxMapObjC.TMBExpressionOperator {
    @objc get
  }
  @objc public var arguments: [Any] {
    @objc get
  }
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBExpressionOperator) -> MapboxMapObjC.TMBExpression
  @objc public class func create(withOperator operator: MapboxMapObjC.TMBExpressionOperator, arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc public class func args(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc deinit
}
extension MapboxMaps.Expression : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBExpression
  public func expression() -> MapboxMapObjC.TMBExpression
  public typealias T = MapboxMapObjC.TMBExpression
}
extension MapboxMapObjC.TMBExpression {
  public func expression() -> MapboxMaps.Expression
}
@_hasMissingDesignatedInitializers @objc open class TMBLocationIndicatorLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var bearingImage: MapboxMapObjC.TMBValue?
  @objc public var shadowImage: MapboxMapObjC.TMBValue?
  @objc public var topImage: MapboxMapObjC.TMBValue?
  @objc public var accuracyRadius: MapboxMapObjC.TMBValue?
  @objc public var accuracyRadiusTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var accuracyRadiusBorderColor: MapboxMapObjC.TMBValue?
  @objc public var accuracyRadiusBorderColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var accuracyRadiusColor: MapboxMapObjC.TMBValue?
  @objc public var accuracyRadiusColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var bearing: MapboxMapObjC.TMBValue?
  @objc public var bearingTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var bearingImageSize: MapboxMapObjC.TMBValue?
  @objc public var bearingImageSizeTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var emphasisCircleColor: MapboxMapObjC.TMBValue?
  @objc public var emphasisCircleColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var emphasisCircleRadius: MapboxMapObjC.TMBValue?
  @objc public var emphasisCircleRadiusTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var imagePitchDisplacement: MapboxMapObjC.TMBValue?
  @objc public var location: MapboxMapObjC.TMBValue?
  @objc public var locationTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var locationIndicatorOpacity: MapboxMapObjC.TMBValue?
  @objc public var locationIndicatorOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var perspectiveCompensation: MapboxMapObjC.TMBValue?
  @objc public var shadowImageSize: MapboxMapObjC.TMBValue?
  @objc public var shadowImageSizeTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var topImageSize: MapboxMapObjC.TMBValue?
  @objc public var topImageSizeTransition: MapboxMapObjC.TMBStyleTransition?
  @objc deinit
}
extension MapboxMapObjC.TMBLocationIndicatorLayer {
  public func mapTo(_ layer: inout MapboxMaps.LocationIndicatorLayer)
}
extension MapboxMaps.LocationIndicatorLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBLocationIndicatorLayer)
}
extension MapboxMapObjC.TMBLocationIndicatorLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.LocationIndicatorLayer
  public typealias T = MapboxMaps.LocationIndicatorLayer
}
extension MapboxMaps.LocationIndicatorLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBLocationIndicatorLayer
  public typealias T = MapboxMapObjC.TMBLocationIndicatorLayer
}
@_hasMissingDesignatedInitializers @objc open class TMBRasterDemSource : ObjectiveC.NSObject, MapboxMapObjC.TMBSource {
  @objc convenience public init(id: Swift.String)
  @objc final public let type: MapboxMapObjC.TMBSourceType
  @objc public var url: Swift.String?
  @objc public var tiles: [Swift.String]?
  @objc public var bounds: [Swift.Double]?
  @objc public var minzoom: Foundation.NSNumber?
  @objc public var maxzoom: Foundation.NSNumber?
  @objc public var tileSize: Foundation.NSNumber?
  @objc public var attribution: Swift.String?
  @objc public var encoding: Foundation.NSNumber?
  @objc public var volatile: Foundation.NSNumber?
  @objc public var prefetchZoomDelta: Foundation.NSNumber?
  @objc public var minimumTileUpdateInterval: Foundation.NSNumber?
  @objc public var maxOverscaleFactorForParentTiles: Foundation.NSNumber?
  @objc public var tileRequestsDelay: Foundation.NSNumber?
  @objc public var tileNetworkRequestsDelay: Foundation.NSNumber?
  @objc deinit
}
extension MapboxMapObjC.TMBRasterDemSource {
  public func mapTo(_ source: inout MapboxMaps.RasterDemSource)
}
extension MapboxMaps.RasterDemSource {
  public func mapTo(_ source: inout MapboxMapObjC.TMBRasterDemSource)
}
extension MapboxMapObjC.TMBRasterDemSource : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.RasterDemSource
  public typealias T = MapboxMaps.RasterDemSource
}
extension MapboxMaps.RasterDemSource {
  public func objcValue(_ id: Swift.String) -> MapboxMapObjC.TMBRasterDemSource
}
@objc open class TMBPolylineAnnotation : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotation {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var geometryInJSON: Swift.String {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Any]? {
    @objc get
  }
  @objc public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  public var swiftValue: MapboxMaps.PolylineAnnotation
  public init(swiftValue: MapboxMaps.PolylineAnnotation)
  @objc public class func from(id: Swift.String = UUID().uuidString, coordinates: [Turf.LocationCoordinate2D], isSelected: Swift.Bool = false, isDraggable: Swift.Bool = false) -> MapboxMapObjC.TMBPolylineAnnotation
  @objc public var lineJoin: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineSortKey: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineBlur: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var lineGapWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOffset: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineOpacity: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var linePattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lineWidth: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBPolylineAnnotationManager : ObjectiveC.NSObject, MapboxMapObjC.TMBAnnotationManager, MapboxMaps.AnnotationInteractionDelegate {
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var sourceId: Swift.String {
    @objc get
  }
  @objc public var layerId: Swift.String {
    @objc get
  }
  public func annotationManager(_ manager: any MapboxMaps.AnnotationManager, didDetectTappedAnnotations annotations: [any MapboxMaps.Annotation])
  @objc public var annotations: [MapboxMapObjC.TMBPolylineAnnotation] {
    @objc get
    @objc set
  }
  final public let _self: MapboxMaps.PolylineAnnotationManager
  @objc weak public var delegate: (any MapboxMapObjC.TMBAnnotationInteractionDelegate)? {
    @objc get
    @objc set
  }
  public init(_ swiftValue: MapboxMaps.PolylineAnnotationManager)
  @objc public var lineCap: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineMiterLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineRoundLimit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineDasharray: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslate: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc public var lineTranslateAnchor: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var lineTrimOffset: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBGeoJSONSource : ObjectiveC.NSObject, MapboxMapObjC.TMBSource {
  @objc convenience public init(id: Swift.String)
  @objc final public let type: MapboxMapObjC.TMBSourceType
  @objc public var data: MapboxMapObjC.TMBGeoJSONSourceData?
  @objc public var maxzoom: Foundation.NSNumber?
  @objc public var attribution: Swift.String?
  @objc public var buffer: Foundation.NSNumber?
  @objc public var tolerance: Foundation.NSNumber?
  @objc public var cluster: Foundation.NSNumber?
  @objc public var clusterRadius: Foundation.NSNumber?
  @objc public var clusterMaxZoom: Foundation.NSNumber?
  @objc public var clusterProperties: [Swift.String : MapboxMapObjC.TMBExpression]?
  @objc public var lineMetrics: Foundation.NSNumber?
  @objc public var generateId: Foundation.NSNumber?
  @objc public var promoteId: MapboxMapObjC.TMBPromoteId?
  @objc public var prefetchZoomDelta: Foundation.NSNumber?
  @objc deinit
}
extension MapboxMapObjC.TMBGeoJSONSource {
  public func mapTo(_ source: inout MapboxMaps.GeoJSONSource)
}
extension MapboxMaps.GeoJSONSource {
  public func mapTo(_ source: inout MapboxMapObjC.TMBGeoJSONSource)
}
extension MapboxMapObjC.TMBGeoJSONSource : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.GeoJSONSource
  public typealias T = MapboxMaps.GeoJSONSource
}
extension MapboxMaps.GeoJSONSource {
  public func objcValue(_ id: Swift.String) -> MapboxMapObjC.TMBGeoJSONSource
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func ornaments() -> MapboxMapObjC.TMBOrnamentsManager
}
@_hasMissingDesignatedInitializers @objc open class TMBOrnamentsManager : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBOrnamentOptions {
    @objc get
    @objc set
  }
  @objc public var logoView: UIKit.UIView {
    @objc get
  }
  @objc public var scaleBarView: UIKit.UIView {
    @objc get
  }
  @objc public var compassView: UIKit.UIView {
    @objc get
  }
  @objc public var attributionButton: UIKit.UIView {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOrnamentOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.OrnamentOptions {
    get
  }
  @objc public var scaleBar: MapboxMapObjC.TMBScaleBarViewOptions {
    @objc get
    @objc set
  }
  @objc public var compass: MapboxMapObjC.TMBCompassViewOptions {
    @objc get
    @objc set
  }
  @objc public var logo: MapboxMapObjC.TMBLogoViewOptions {
    @objc get
    @objc set
  }
  @objc public var attributionButton: MapboxMapObjC.TMBAttributionButtonOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBScaleBarViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.ScaleBarViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc public var visibility: MapboxMapObjC.TMBOrnamentVisibility {
    @objc get
    @objc set
  }
  public var useMetricUnits: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@objc public enum TMBOrnamentVisibility : Swift.Int {
  case adaptive
  case hidden
  case visible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.OrnamentVisibility : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBOrnamentVisibility
  public typealias T = MapboxMapObjC.TMBOrnamentVisibility
}
@objc public enum TMBOrnamentPosition : Swift.Int {
  case topLeft
  case topRight
  case bottomRight
  case bottomLeft
  case topLeading
  case topTrailing
  case bottomLeading
  case bottomTrailing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MapboxMaps.OrnamentPosition : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBOrnamentPosition
  public typealias T = MapboxMapObjC.TMBOrnamentPosition
}
@_hasMissingDesignatedInitializers @objc open class TMBCompassViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.CompassViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var visibility: MapboxMapObjC.TMBOrnamentVisibility {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBLogoViewOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.LogoViewOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBAttributionButtonOptions : ObjectiveC.NSObject {
  public var swiftValue: MapboxMaps.AttributionButtonOptions {
    get
  }
  @objc public var position: MapboxMapObjC.TMBOrnamentPosition {
    @objc get
    @objc set
  }
  @objc public var margins: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc open class TMBValue : ObjectiveC.NSObject {
  @objc public init(constant: Any?)
  @objc public init(expression: MapboxMapObjC.TMBExpression)
  @objc public class func constant(_ constant: ObjectiveC.NSObject) -> MapboxMapObjC.TMBValue
  @objc public class func intValue(_ value: Swift.Int) -> MapboxMapObjC.TMBValue
  @objc public class func doubleValue(_ value: Swift.Double) -> MapboxMapObjC.TMBValue
  @objc public class func expression(_ expression: MapboxMapObjC.TMBExpression) -> MapboxMapObjC.TMBValue
  @objc deinit
}
extension MapboxMaps.StyleColor : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> UIKit.UIColor
  public typealias T = UIKit.UIColor
}
@_inheritsConvenienceInitializers @objc open class BuiltInStyles : ObjectiveC.NSObject {
  @objc public class var streets: Swift.String {
    @objc get
  }
  @objc public class var outdoors: Swift.String {
    @objc get
  }
  @objc public class var light: Swift.String {
    @objc get
  }
  @objc public class var dark: Swift.String {
    @objc get
  }
  @objc public class var satellite: Swift.String {
    @objc get
  }
  @objc public class var satelliteStreets: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TMBLayer {
  @objc var id: Swift.String { get }
  @objc var type: MapboxMapObjC.TMBLayerType { get }
  @objc var filter: MapboxMapObjC.TMBExpression? { get set }
  @objc var source: Swift.String? { get set }
  @objc var sourceLayer: Swift.String? { get set }
  @objc var minZoom: Foundation.NSNumber? { get set }
  @objc var maxZoom: Foundation.NSNumber? { get set }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SwiftValueConvertible<T> {
  associatedtype T
  func swiftValue() -> Self.T
}
#else
public protocol SwiftValueConvertible {
  associatedtype T
  func swiftValue() -> Self.T
}
#endif
@_hasMissingDesignatedInitializers @objc open class TMBLayerInfo : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.LayerInfo {
    get
  }
  @objc public var id: Swift.String {
    @objc get
    @objc set
  }
  @objc public var type: MapboxMapObjC.TMBLayerType {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc extension MapboxMaps.MapView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewport() -> MapboxMapObjC.TMBViewport
}
@_hasMissingDesignatedInitializers @objc open class TMBViewport : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBViewportOptions {
    @objc get
    @objc set
  }
  @objc public var status: MapboxMapObjC.TMBViewportStatus {
    @objc get
  }
  @objc public func addStatusObserver(_ observer: any MapboxMapObjC.TMBViewportStatusObserver)
  @objc public func removeStatusObserver(_ observer: any MapboxMapObjC.TMBViewportStatusObserver)
  @objc public func idle()
  @objc public func transition(to toState: any MapboxMapObjC.TMBViewportState, transition: (any MapboxMapObjC.TMBViewportTransition)? = nil, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
  @objc public var defaultTransition: any MapboxMapObjC.TMBViewportTransition {
    @objc get
    @objc set
  }
  @objc public func makeFollowPuckViewportState(options: MapboxMapObjC.TMBFollowPuckViewportStateOptions? = nil) -> MapboxMapObjC.TMBFollowPuckViewportState
  @objc public func makeOverviewViewportState(options: MapboxMapObjC.TMBOverviewViewportStateOptions) -> MapboxMapObjC.TMBOverviewViewportState
  @objc public func makeDefaultViewportTransition(options: MapboxMapObjC.TMBDefaultViewportTransitionOptions? = nil) -> MapboxMapObjC.TMBDefaultViewportTransition
  @objc public func makeImmediateViewportTransition() -> MapboxMapObjC.TMBImmediateViewportTransition
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportStatus : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ViewportStatus {
    get
  }
  @objc public static var idle: MapboxMapObjC.TMBViewportStatus {
    @objc get
  }
  @objc public static func state(_ state: any MapboxMapObjC.TMBViewportState) -> MapboxMapObjC.TMBViewportStatus
  @objc public static func transition(_ transition: any MapboxMapObjC.TMBViewportTransition, toState: any MapboxMapObjC.TMBViewportState) -> MapboxMapObjC.TMBViewportStatus
  @objc deinit
}
@objc public protocol TMBViewportTransition {
  @objc func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (_ success: Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.ViewportOptions {
    get
  }
  @objc public var transitionsToIdleUponUserInteraction: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(transitionsToIdleUponUserInteraction: Swift.Bool = true)
  @objc deinit
}
@objc public protocol TMBViewportState {
  @objc func observeDataSource(with handler: @escaping (_ camera: MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc func startUpdatingCamera()
  @objc func stopUpdatingCamera()
}
@objc public protocol TMBViewportStatusObserver {
  @objc func viewportStatusDidChange(from fromStatus: MapboxMapObjC.TMBViewportStatus, to toStatus: MapboxMapObjC.TMBViewportStatus, reason: MapboxMapObjC.TMBViewportStatusChangeReason)
}
@_hasMissingDesignatedInitializers @objc open class TMBViewportStatusChangeReason : ObjectiveC.NSObject, MapboxMapObjC.NamedString {
  @objc public func stringValue() -> Swift.String
  public static let idleRequested: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionStarted: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionSucceeded: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let transitionFailed: MapboxMapObjC.TMBViewportStatusChangeReason
  public static let userInteraction: MapboxMapObjC.TMBViewportStatusChangeReason
  @objc deinit
}
extension MapboxMaps.ViewportStatusChangeReason : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBViewportStatusChangeReason
  public typealias T = MapboxMapObjC.TMBViewportStatusChangeReason
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportStateOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.FollowPuckViewportStateOptions {
    get
  }
  @objc public var padding: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc public var zoom: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var bearing: MapboxMapObjC.TMBFollowPuckViewportStateBearing? {
    @objc get
    @objc set
  }
  @objc public var pitch: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public init(padding: Foundation.NSValue?, zoom: Foundation.NSNumber? = 16.35, bearing: MapboxMapObjC.TMBFollowPuckViewportStateBearing? = nil, pitch: Foundation.NSNumber? = 45)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportStateBearing : ObjectiveC.NSObject {
  @objc public var bearing: Foundation.NSNumber? {
    @objc get
  }
  @objc public static func constant(_ bearing: CoreLocation.CLLocationDirection) -> MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc public static let heading: MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc public static let course: MapboxMapObjC.TMBFollowPuckViewportStateBearing
  @objc deinit
}
extension MapboxMaps.FollowPuckViewportStateBearing : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBFollowPuckViewportStateBearing
  public typealias T = MapboxMapObjC.TMBFollowPuckViewportStateBearing
}
@_hasMissingDesignatedInitializers @objc open class TMBFollowPuckViewportState : ObjectiveC.NSObject {
  @objc public var options: MapboxMapObjC.TMBFollowPuckViewportStateOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
extension MapboxMapObjC.TMBFollowPuckViewportState : MapboxMapObjC.TMBViewportState {
  @objc dynamic public func observeDataSource(with handler: @escaping (MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func startUpdatingCamera()
  @objc dynamic public func stopUpdatingCamera()
}
@_hasMissingDesignatedInitializers @objc open class TMBOverviewViewportStateOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.OverviewViewportStateOptions {
    get
  }
  @objc public var geometry: MapboxCommon.Geometry {
    @objc get
    @objc set
  }
  @objc public var padding: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc public var bearing: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var pitch: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var animationDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public init(geometry: MapboxCommon.Geometry, padding: UIKit.UIEdgeInsets = .zero, bearing: Foundation.NSNumber? = 0, pitch: Foundation.NSNumber? = 0, animationDuration: Foundation.TimeInterval = 1)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBOverviewViewportState : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.OverviewViewportState {
    get
  }
  @objc public var options: MapboxMapObjC.TMBOverviewViewportStateOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
extension MapboxMapObjC.TMBOverviewViewportState : MapboxMapObjC.TMBViewportState {
  @objc dynamic public func observeDataSource(with handler: @escaping (MapboxCoreMaps.CameraOptions) -> Swift.Bool) -> MapboxMapObjC.TMBCancelable
  @objc dynamic public func startUpdatingCamera()
  @objc dynamic public func stopUpdatingCamera()
}
@_hasMissingDesignatedInitializers @objc open class TMBDefaultViewportTransitionOptions : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.DefaultViewportTransitionOptions {
    get
  }
  @objc public var maxDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public init(maxDuration: Foundation.TimeInterval = 3.5)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class TMBDefaultViewportTransition : ObjectiveC.NSObject {
  public var rawValue: MapboxMaps.DefaultViewportTransition {
    get
  }
  @objc public var options: MapboxMapObjC.TMBDefaultViewportTransitionOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc extension MapboxMapObjC.TMBDefaultViewportTransition : MapboxMapObjC.TMBViewportTransition {
  @objc dynamic public func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
}
@_hasMissingDesignatedInitializers @objc open class TMBImmediateViewportTransition : ObjectiveC.NSObject, MapboxMapObjC.TMBViewportTransition {
  @objc public func run(to toState: any MapboxMapObjC.TMBViewportState, completion: @escaping (Swift.Bool) -> Swift.Void) -> MapboxMapObjC.TMBCancelable
  @objc deinit
}
public protocol ObjcConvertible {
  associatedtype T
  func objcValue() -> Self.T
}
@objc extension MapboxMapObjC.TMBExpression {
  @objc dynamic public class func subtract() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func subtract(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func not() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func not(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func neq() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func neq(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func product() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func product(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func division() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func division(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func mod() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func mod(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pow() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pow(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sum() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sum(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lt() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lt(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lte() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lte(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func eq() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func eq(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func gt() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func gt(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func gte() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func gte(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func abs() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func abs(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func accumulated() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func accumulated(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func acos() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func acos(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func all() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func all(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func any() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func any(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func array() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func array(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func asin() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func asin(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func at() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func at(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func atan() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func atan(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func boolean() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func boolean(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func switchCase() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func switchCase(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ceil() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ceil(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func coalesce() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func coalesce(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func collator() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func collator(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func concat() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func concat(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func cos() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func cos(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func distance() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func distance(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func distanceFromCenter() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func distanceFromCenter(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func downcase() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func downcase(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func e() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func e(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func featureState() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func featureState(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func floor() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func floor(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func format() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func format(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func geometryType() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func geometryType(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func get() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func get(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func has() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func has(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func heatmapDensity() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func heatmapDensity(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func id() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func id(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func image() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func image(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func inExpression() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func inExpression(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func indexOf() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func indexOf(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func interpolate() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func interpolate(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func isSupportedScript() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func isSupportedScript(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func length() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func length(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func letExpression() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func letExpression(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lineProgress() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func lineProgress(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func literal() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func literal(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ln() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ln(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ln2() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func ln2(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func log10() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func log10(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func log2() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func log2(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func match() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func match(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func max() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func max(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func min() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func min(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func number() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func number(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func numberFormat() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func numberFormat(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func objectExpression() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func objectExpression(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pi() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pi(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pitch() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func pitch(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func properties() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func properties(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func resolvedLocale() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func resolvedLocale(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func rgb() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func rgb(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func rgba() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func rgba(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func round() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func round(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sin() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sin(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func skyRadialProgress() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func skyRadialProgress(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func slice() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func slice(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sqrt() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func sqrt(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func step() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func step(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func string() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func string(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func tan() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func tan(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toBoolean() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toBoolean(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toColor() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toColor(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toNumber() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toNumber(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toRgba() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toRgba(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toString() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func toString(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func typeofExpression() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func typeofExpression(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func upcase() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func upcase(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func varExpression() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func varExpression(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func within() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func within(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func zoom() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func zoom(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func linear() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func linear(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func exponential() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func exponential(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func cubicBezier() -> MapboxMapObjC.TMBExpression
  @objc dynamic public class func cubicBezier(_ arguments: [Any]) -> MapboxMapObjC.TMBExpression
}
@objc public enum TMBSourceType : Swift.Int {
  case vector
  case raster
  case rasterDem
  case geoJson
  case image
  case model
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension MapboxMapObjC.TMBValue {
  @objc dynamic public class func sourceType(_ sourceType: MapboxMapObjC.TMBSourceType) -> MapboxMapObjC.TMBValue
}
@objc extension Foundation.NSNumber {
  @objc dynamic public class func value(withSourceType sourceType: MapboxMapObjC.TMBSourceType) -> Foundation.NSNumber
  @objc dynamic public func sourceType() -> MapboxMapObjC.TMBSourceType
}
extension Foundation.NSNumber {
  public var SourceType: MapboxMaps.SourceType {
    get
  }
}
extension MapboxMapObjC.TMBSourceType : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.SourceType
  public typealias T = MapboxMaps.SourceType
}
extension MapboxMaps.SourceType : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBSourceType
  public typealias T = MapboxMapObjC.TMBSourceType
}
@_hasMissingDesignatedInitializers @objc open class TMBRasterSource : ObjectiveC.NSObject, MapboxMapObjC.TMBSource {
  @objc convenience public init(id: Swift.String)
  @objc final public let type: MapboxMapObjC.TMBSourceType
  @objc public var url: Swift.String?
  @objc public var tiles: [Swift.String]?
  @objc public var bounds: [Swift.Double]?
  @objc public var minzoom: Foundation.NSNumber?
  @objc public var maxzoom: Foundation.NSNumber?
  @objc public var tileSize: Foundation.NSNumber?
  @objc public var scheme: Foundation.NSNumber?
  @objc public var attribution: Swift.String?
  @objc public var volatile: Foundation.NSNumber?
  @objc public var prefetchZoomDelta: Foundation.NSNumber?
  @objc public var minimumTileUpdateInterval: Foundation.NSNumber?
  @objc public var maxOverscaleFactorForParentTiles: Foundation.NSNumber?
  @objc public var tileRequestsDelay: Foundation.NSNumber?
  @objc public var tileNetworkRequestsDelay: Foundation.NSNumber?
  @objc deinit
}
extension MapboxMapObjC.TMBRasterSource {
  public func mapTo(_ source: inout MapboxMaps.RasterSource)
}
extension MapboxMaps.RasterSource {
  public func mapTo(_ source: inout MapboxMapObjC.TMBRasterSource)
}
extension MapboxMapObjC.TMBRasterSource : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.RasterSource
  public typealias T = MapboxMaps.RasterSource
}
extension MapboxMaps.RasterSource {
  public func objcValue(_ id: Swift.String) -> MapboxMapObjC.TMBRasterSource
}
@_hasMissingDesignatedInitializers @objc open class TMBImageSource : ObjectiveC.NSObject, MapboxMapObjC.TMBSource {
  @objc convenience public init(id: Swift.String)
  @objc final public let type: MapboxMapObjC.TMBSourceType
  @objc public var url: Swift.String?
  @objc public var coordinates: [[Swift.Double]]?
  @objc public var prefetchZoomDelta: Foundation.NSNumber?
  @objc deinit
}
extension MapboxMapObjC.TMBImageSource {
  public func mapTo(_ source: inout MapboxMaps.ImageSource)
}
extension MapboxMaps.ImageSource {
  public func mapTo(_ source: inout MapboxMapObjC.TMBImageSource)
}
extension MapboxMapObjC.TMBImageSource : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.ImageSource
  public typealias T = MapboxMaps.ImageSource
}
extension MapboxMaps.ImageSource {
  public func objcValue(_ id: Swift.String) -> MapboxMapObjC.TMBImageSource
}
@_hasMissingDesignatedInitializers @objc open class TMBBackgroundLayer : ObjectiveC.NSObject, MapboxMapObjC.TMBLayer {
  @objc convenience public init(id: Swift.String = UUID().uuidString)
  @objc public var id: Swift.String
  @objc final public let type: MapboxMapObjC.TMBLayerType
  @objc public var filter: MapboxMapObjC.TMBExpression?
  @objc public var source: Swift.String?
  @objc public var sourceLayer: Swift.String?
  @objc public var minZoom: Foundation.NSNumber?
  @objc public var maxZoom: Foundation.NSNumber?
  @objc public var visibility: MapboxMapObjC.TMBValue?
  @objc public var backgroundColor: MapboxMapObjC.TMBValue?
  @objc public var backgroundColorTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var backgroundOpacity: MapboxMapObjC.TMBValue?
  @objc public var backgroundOpacityTransition: MapboxMapObjC.TMBStyleTransition?
  @objc public var backgroundPattern: MapboxMapObjC.TMBValue?
  @available(*, deprecated, message: "This property is deprecated and will be removed in the future. Setting this will have no effect.")
  @objc public var backgroundPatternTransition: MapboxMapObjC.TMBStyleTransition?
  @objc deinit
}
extension MapboxMapObjC.TMBBackgroundLayer {
  public func mapTo(_ layer: inout MapboxMaps.BackgroundLayer)
}
extension MapboxMaps.BackgroundLayer {
  public func mapTo(_ layer: inout MapboxMapObjC.TMBBackgroundLayer)
}
extension MapboxMapObjC.TMBBackgroundLayer : MapboxMapObjC.SwiftValueConvertible {
  public func swiftValue() -> MapboxMaps.BackgroundLayer
  public typealias T = MapboxMaps.BackgroundLayer
}
extension MapboxMaps.BackgroundLayer : MapboxMapObjC.ObjcConvertible {
  public func objcValue() -> MapboxMapObjC.TMBBackgroundLayer
  public typealias T = MapboxMapObjC.TMBBackgroundLayer
}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Equatable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.Hashable {}
extension MapboxMapObjC.TMBPuckBearingSource : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPuckType : Swift.Equatable {}
extension MapboxMapObjC.TMBPuckType : Swift.Hashable {}
extension MapboxMapObjC.TMBPuckType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.Equatable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.Hashable {}
extension MapboxMapObjC.TMBPuck2DConfigurationPulsingRadius : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPanMode : Swift.Equatable {}
extension MapboxMapObjC.TMBPanMode : Swift.Hashable {}
extension MapboxMapObjC.TMBPanMode : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBGestureType : Swift.Equatable {}
extension MapboxMapObjC.TMBGestureType : Swift.Hashable {}
extension MapboxMapObjC.TMBGestureType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBScheme : Swift.Equatable {}
extension MapboxMapObjC.TMBScheme : Swift.Hashable {}
extension MapboxMapObjC.TMBScheme : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBEncoding : Swift.Equatable {}
extension MapboxMapObjC.TMBEncoding : Swift.Hashable {}
extension MapboxMapObjC.TMBEncoding : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.Equatable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.Hashable {}
extension MapboxMapObjC.TMBExpressionOptionsType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.Equatable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.Hashable {}
extension MapboxMapObjC.TMBLayerPositionType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLayerType : Swift.Equatable {}
extension MapboxMapObjC.TMBLayerType : Swift.Hashable {}
extension MapboxMapObjC.TMBLayerType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.Equatable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.Hashable {}
extension MapboxMapObjC.TMBViewAnnotationManagerError : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBPromoteIdType : Swift.Equatable {}
extension MapboxMapObjC.TMBPromoteIdType : Swift.Hashable {}
extension MapboxMapObjC.TMBPromoteIdType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBGeoJSONSourceType : Swift.Equatable {}
extension MapboxMapObjC.TMBGeoJSONSourceType : Swift.Hashable {}
extension MapboxMapObjC.TMBGeoJSONSourceType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBExpressionOperator : Swift.Equatable {}
extension MapboxMapObjC.TMBExpressionOperator : Swift.Hashable {}
extension MapboxMapObjC.TMBExpressionOperator : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBVisibility : Swift.Equatable {}
extension MapboxMapObjC.TMBVisibility : Swift.Hashable {}
extension MapboxMapObjC.TMBVisibility : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLineCap : Swift.Equatable {}
extension MapboxMapObjC.TMBLineCap : Swift.Hashable {}
extension MapboxMapObjC.TMBLineCap : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLineJoin : Swift.Equatable {}
extension MapboxMapObjC.TMBLineJoin : Swift.Hashable {}
extension MapboxMapObjC.TMBLineJoin : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBIconAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBIconAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBIconAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBIconPitchAlignment : Swift.Equatable {}
extension MapboxMapObjC.TMBIconPitchAlignment : Swift.Hashable {}
extension MapboxMapObjC.TMBIconPitchAlignment : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBIconRotationAlignment : Swift.Equatable {}
extension MapboxMapObjC.TMBIconRotationAlignment : Swift.Hashable {}
extension MapboxMapObjC.TMBIconRotationAlignment : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBIconTextFit : Swift.Equatable {}
extension MapboxMapObjC.TMBIconTextFit : Swift.Hashable {}
extension MapboxMapObjC.TMBIconTextFit : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBSymbolPlacement : Swift.Equatable {}
extension MapboxMapObjC.TMBSymbolPlacement : Swift.Hashable {}
extension MapboxMapObjC.TMBSymbolPlacement : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBSymbolZOrder : Swift.Equatable {}
extension MapboxMapObjC.TMBSymbolZOrder : Swift.Hashable {}
extension MapboxMapObjC.TMBSymbolZOrder : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBTextAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBTextAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextJustify : Swift.Equatable {}
extension MapboxMapObjC.TMBTextJustify : Swift.Hashable {}
extension MapboxMapObjC.TMBTextJustify : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextPitchAlignment : Swift.Equatable {}
extension MapboxMapObjC.TMBTextPitchAlignment : Swift.Hashable {}
extension MapboxMapObjC.TMBTextPitchAlignment : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextRotationAlignment : Swift.Equatable {}
extension MapboxMapObjC.TMBTextRotationAlignment : Swift.Hashable {}
extension MapboxMapObjC.TMBTextRotationAlignment : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextTransform : Swift.Equatable {}
extension MapboxMapObjC.TMBTextTransform : Swift.Hashable {}
extension MapboxMapObjC.TMBTextTransform : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBFillTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBFillTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBFillTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBLineTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBLineTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBLineTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBIconTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBIconTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBIconTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBTextTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBTextTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBCirclePitchAlignment : Swift.Equatable {}
extension MapboxMapObjC.TMBCirclePitchAlignment : Swift.Hashable {}
extension MapboxMapObjC.TMBCirclePitchAlignment : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBCirclePitchScale : Swift.Equatable {}
extension MapboxMapObjC.TMBCirclePitchScale : Swift.Hashable {}
extension MapboxMapObjC.TMBCirclePitchScale : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBCircleTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBCircleTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBCircleTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBFillExtrusionTranslateAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBFillExtrusionTranslateAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBFillExtrusionTranslateAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBRasterResampling : Swift.Equatable {}
extension MapboxMapObjC.TMBRasterResampling : Swift.Hashable {}
extension MapboxMapObjC.TMBRasterResampling : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBHillshadeIlluminationAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBHillshadeIlluminationAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBHillshadeIlluminationAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBSkyType : Swift.Equatable {}
extension MapboxMapObjC.TMBSkyType : Swift.Hashable {}
extension MapboxMapObjC.TMBSkyType : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBAnchor : Swift.Equatable {}
extension MapboxMapObjC.TMBAnchor : Swift.Hashable {}
extension MapboxMapObjC.TMBAnchor : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBStyleProjectionName : Swift.Equatable {}
extension MapboxMapObjC.TMBStyleProjectionName : Swift.Hashable {}
extension MapboxMapObjC.TMBStyleProjectionName : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBTextWritingMode : Swift.Equatable {}
extension MapboxMapObjC.TMBTextWritingMode : Swift.Hashable {}
extension MapboxMapObjC.TMBTextWritingMode : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Equatable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.Hashable {}
extension MapboxMapObjC.TMBOrnamentVisibility : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.Equatable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.Hashable {}
extension MapboxMapObjC.TMBOrnamentPosition : Swift.RawRepresentable {}
extension MapboxMapObjC.TMBSourceType : Swift.Equatable {}
extension MapboxMapObjC.TMBSourceType : Swift.Hashable {}
extension MapboxMapObjC.TMBSourceType : Swift.RawRepresentable {}
