#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MAPBOXMAPOBJC_SWIFT_H
#define MAPBOXMAPOBJC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapboxCommon;
@import MapboxCoreMaps;
@import MapboxMaps;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxMapObjC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MapboxMapObjC13BuiltInStyles")
@interface BuiltInStyles : NSObject
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull streets;)
+ (NSString * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull outdoors;)
+ (NSString * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light;)
+ (NSString * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dark;)
+ (NSString * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satellite;)
+ (NSString * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satelliteStreets;)
+ (NSString * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










@class NSValue;
@class MBXGeometry;

SWIFT_CLASS("_TtC13MapboxMapObjC14GeometryHelper")
@interface GeometryHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MBXGeometry * _Nonnull)createPoint:(NSValue * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createLine:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiLine:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPoint:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPolygon:(NSArray<NSArray<NSArray<NSValue *> *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createPolygon:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)create:(NSArray<MBXGeometry *> * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMResourceOptions;
@class MBMMapOptions;
@class MBMCameraOptions;

@interface MapInitOptions (SWIFT_EXTENSION(MapboxMapObjC))
/// Associated <code>ResourceOptions</code>
- (MBMResourceOptions * _Nonnull)getResourceOptions SWIFT_WARN_UNUSED_RESULT;
/// Associated <code>MapOptions</code>
- (MBMMapOptions * _Nonnull)getMapOptions SWIFT_WARN_UNUSED_RESULT;
/// Style URI for initializing the map. Defaults to Mapbox Streets.
- (NSString * _Nullable)getStyleURI SWIFT_WARN_UNUSED_RESULT;
/// String representation of JSON style spec. Has precedence over <code>styleURI</code>.
- (NSString * _Nullable)getStyleJSON SWIFT_WARN_UNUSED_RESULT;
/// Camera options for initializing the map. CameraOptions default to 0.0 for each value.
- (MBMCameraOptions * _Nullable)getCameraOptions SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21MapInitOptionsFactory")
@interface MapInitOptionsFactory : NSObject
/// Initializer. The default initializer, i.e. <code>MapInitOptions()</code> will use
/// the default <code>ResourceOptionsManager</code> to use the current shared access token.
/// \param resourceOptions <code>ResourceOptions</code>; default creates an instance
/// using <code>ResourceOptionsManager.default</code>
///
/// \param mapOptions <code>MapOptions</code>; see <code>GlyphsRasterizationOptions</code> for the default
/// used for glyph rendering.
///
/// \param cameraOptions <code>CameraOptions</code> to be applied to the map, overriding
/// the default camera that has been specified in the style.
///
/// \param styleURI Style URI for the map to load. Defaults to <code>.streets</code>, but
/// can be <code>nil</code>.
///
/// \param styleJSON Style JSON in String representation. Has precedence over <code>styleURI</code>.
///
+ (MapInitOptions * _Nonnull)createWithResourceOptions:(MBMResourceOptions * _Nullable)resourceOptions mapOptions:(MBMMapOptions * _Nullable)mapOptions cameraOptions:(MBMCameraOptions * _Nullable)cameraOptions styleURI:(NSString * _Nullable)styleURI styleJSON:(NSString * _Nullable)styleJSON SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMBViewport;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBViewport * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBGestureManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBGestureManager * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBViewAnnotationManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBViewAnnotationManager * _Nonnull)viewAnnotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBAnnotationOrchestrator;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBAnnotationOrchestrator * _Nonnull)annotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBCameraAnimationsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCameraAnimationsManager * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBMapboxMap;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBMapboxMap * _Nonnull)mapboxMap SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBOrnamentsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBOrnamentsManager * _Nonnull)ornaments SWIFT_WARN_UNUSED_RESULT;
@end


@class NSNumber;
@class MBMCameraState;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)preferredFrameRateRange:(CAFrameRateRange)value;
- (NSArray<NSNumber *> * _Nonnull)mapboxMapDebugOptions SWIFT_WARN_UNUSED_RESULT;
- (void)mapboxMapDebugOptions:(NSArray<NSNumber *> * _Nonnull)value;
- (BOOL)getPresentsWithTransaction SWIFT_WARN_UNUSED_RESULT;
- (void)setPresentsWithTransaction:(BOOL)value;
- (NSInteger)getPreferredFramesPerSecond SWIFT_WARN_UNUSED_RESULT;
- (void)setPreferredFramesPerSecond:(NSInteger)value;
- (CAFrameRateRange)getPreferredFrameRateRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)setPreferredFrameRateRange:(CAFrameRateRange)value SWIFT_AVAILABILITY(ios,introduced=15.0);
- (MBMCameraState * _Nonnull)getCameraState SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)getAnchor SWIFT_WARN_UNUSED_RESULT;
@end

@protocol TMBAttributionURLOpener;

SWIFT_CLASS("_TtC13MapboxMapObjC14MapViewFactory")
@interface MapViewFactory : NSObject
/// :nodoc:
/// See https://developer.apple.com/forums/thread/650054 for context
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame options:(MapInitOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame mapInitOptions:(MapInitOptions * _Nonnull)mapInitOptions urlOpener:(id <TMBAttributionURLOpener> _Nonnull)urlOpener SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSourceType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSourceType:(enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBScheme : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithScheme:(enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
- (enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBEncoding : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithEncoding:(enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
- (enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
@end





enum TMBStyleProjectionName : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithStyleProjectionName:(enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
- (enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithAnchor:(enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSkyType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSkyType:(enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBHillshadeIlluminationAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithHillshadeIlluminationAnchor:(enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBRasterResampling : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithRasterResampling:(enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
- (enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBFillExtrusionTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithFillExtrusionTranslateAnchor:(enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBCircleTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCircleTranslateAnchor:(enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBCirclePitchScale : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCirclePitchScale:(enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBLayerType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLayerType:(enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBCirclePitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCirclePitchAlignment:(enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextTranslateAnchor:(enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconTranslateAnchor:(enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBLineTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineTranslateAnchor:(enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBFillTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithFillTranslateAnchor:(enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextTransform : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextTransform:(enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextRotationAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextRotationAlignment:(enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextPitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextPitchAlignment:(enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextJustify : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextJustify:(enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBExpressionOperator : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithExpressionOperator:(enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
- (enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBTextAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextAnchor:(enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBVisibility : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithVisibility:(enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
- (enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBSymbolZOrder : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSymbolZOrder:(enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBLineCap : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineCap:(enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBLineJoin : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineJoin:(enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSymbolPlacement : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSymbolPlacement:(enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconAnchor:(enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconTextFit : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconTextFit:(enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBIconRotationAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconRotationAlignment:(enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBIconPitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconPitchAlignment:(enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBTextWritingMode : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextWritingMode:(enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP13MapboxMapObjC11NamedString_")
@protocol NamedString
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMStylePackLoadOptions;
@class MBMStylePack;
@class TMBCancelable;

@interface MBMOfflineManager (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)loadStyleWithStyleUriString:(NSString * _Nonnull)styleUriString styleLoadOptions:(MBMStylePackLoadOptions * _Nonnull)styleLoadOptions progress:(MBMStylePackLoadProgressCallback _Nonnull)progress completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)allStylePacks:(void (^ _Nonnull)(NSArray<MBMStylePack *> * _Nullable, NSError * _Nullable))completion;
@end



/// Whether extruded geometries are lit relative to the map or viewport.
typedef SWIFT_ENUM(NSInteger, TMBAnchor, open) {
/// The position of the light source is aligned to the rotation of the map.
  TMBAnchorMap = 0,
/// The position of the light source is aligned to the rotation of the viewport.
  TMBAnchorViewport = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBAnimationOwner")
@interface TMBAnimationOwner : NSObject <NamedString>
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull gestures;)
+ (TMBAnimationOwner * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull unspecified;)
+ (TMBAnimationOwner * _Nonnull)unspecified SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC13TMBAnnotation_")
@protocol TMBAnnotation
/// The unique identifier of the annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The geometry that is backing this annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
/// Properties associated with the annotation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@end

@protocol TMBAnnotationManager;

/// A delegate that is called when a tap is detected on an annotation (or on several of them).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAnnotationInteractionDelegate_")
@protocol TMBAnnotationInteractionDelegate
/// This method is invoked when a tap gesture is detected on an annotation
/// \param manager The <code>AnnotationManager</code> that detected this tap gesture
///
/// \param annotations A list of <code>Annotations</code> that were tapped
///
- (void)annotationManager:(id <TMBAnnotationManager> _Nonnull)manager didDetectTappedAnnotations:(NSArray<id <TMBAnnotation>> * _Nonnull)annotations;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBAnnotationManager_")
@protocol TMBAnnotationManager
/// The id of this annotation manager.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the <code>GeoJSONSource</code> that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
/// The id of the layer that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@end

@class TMBLayerPosition;
@class TMBClusterOptions;
@class TMBPointAnnotationManager;
@class TMBPolygonAnnotationManager;
@class TMBPolylineAnnotationManager;
@class TMBCircleAnnotationManager;

/// <code>AnnotationOrchestrator</code> provides a way to create annotation managers of different types.
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBAnnotationOrchestrator")
@interface TMBAnnotationOrchestrator : NSObject
/// Dictionary of annotation managers keyed by their identifiers.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <TMBAnnotationManager>> * _Nonnull annotationManagersById;
/// Creates a <code>PointAnnotationManager</code> which is used to manage a collection of
/// <code>PointAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PointAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
/// \param clusterOptions Optionally set the <code>ClusterOptions</code> to cluster the Point Annotations
///
///
/// returns:
/// An instance of <code>PointAnnotationManager</code>
- (TMBPointAnnotationManager * _Nonnull)makePointAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition clusterOptions:(TMBClusterOptions * _Nullable)clusterOptions SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolygonAnnotationManager</code> which is used to manage a collection of
/// <code>PolygonAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolygonAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager..
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolygonAnnotationManager</code>
- (TMBPolygonAnnotationManager * _Nonnull)makePolygonAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolylineAnnotationManager</code> which is used to manage a collection of
/// <code>PolylineAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolylineAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolylineAnnotationManager</code>
- (TMBPolylineAnnotationManager * _Nonnull)makePolylineAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>CircleAnnotationManager</code> which is used to manage a collection of
/// <code>CircleAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>CircleAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>CircleAnnotationManager</code>
- (TMBCircleAnnotationManager * _Nonnull)makeCircleAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Removes an annotation manager, this will remove the underlying layer and source from the style.
/// A removed annotation manager will not be able to reuse anymore, you will need to create new annotation manger to add annotations.
/// \param id Identifer of annotation manager to remove
///
- (void)removeAnnotationManagerWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBValue;
@class TMBStyleTransition;

/// A style’s fog property is a global effect that improves depth perception by fading out distant objects.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBAtmosphere")
@interface TMBAtmosphere : NSObject
/// The color of the atmosphere region immediately below the horizon and within the <code>range</code> and above the horizon and within <code>horizon-blend</code>. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// The color of the atmosphere region above the horizon, <code>high-color</code> extends further above the horizon than the <code>color</code> property and its spread can be controlled with <code>horizon-blend</code>. The opacity can be set to <code>0</code> to remove the high atmosphere color contribution.
@property (nonatomic, strong) TMBValue * _Nullable highColor;
/// Transition property for <code>highColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable highColorTransition;
/// Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.
@property (nonatomic, strong) TMBValue * _Nullable horizonBlend;
/// Transition property for <code>horizonBlend</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable horizonBlendTransition;
/// The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.
@property (nonatomic, strong) TMBValue * _Nullable range;
/// Transition property for <code>range</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable rangeTransition;
/// The color of the region above the horizon and after the end of the <code>horizon-blend</code> contribution. The opacity can be set to <code>0</code> to have a transparent background.
@property (nonatomic, strong) TMBValue * _Nullable spaceColor;
/// Transition property for <code>spaceColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable spaceColorTransition;
/// A value controlling the star intensity where <code>0</code> will show no stars and <code>1</code> will show stars at their maximum intensity.
@property (nonatomic, strong) TMBValue * _Nullable starIntensity;
/// Transition property for <code>starIntensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable starIntensityTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum TMBOrnamentPosition : NSInteger;

/// Used to configure position, margin, and visibility for the map’s attribution button.
SWIFT_CLASS("_TtC13MapboxMapObjC27TMBAttributionButtonOptions")
@interface TMBAttributionButtonOptions : NSObject
/// The position of the attribution button.
/// The default value for this property is <code>.bottomTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the attribution button.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// A protocol to open attribution URLs.
/// Use this protocol when the map view is used in non-application target(e.g. application extension target).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC23TMBAttributionURLOpener_")
@protocol TMBAttributionURLOpener
/// Asks the opener to open the provided URL.
/// \param url The URL to be opened.
///
- (void)openAttributionURL:(NSURL * _Nonnull)url;
@end

@class TMBExpression;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC8TMBLayer_")
@protocol TMBLayer
/// Unique layer name
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly) enum TMBLayerType type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except background.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
@end


/// The background color or pattern of the map.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-background">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBBackgroundLayer")
@interface TMBBackgroundLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The color with which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundColor;
/// Transition options for <code>backgroundColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundColorTransition;
/// The opacity at which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundOpacity;
/// Transition options for <code>backgroundOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundOpacityTransition;
/// Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable backgroundPattern;
/// Transition options for <code>backgroundPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class TMBCameraAnimator;
@protocol UITimingCurveProvider;
@class TMBCameraTransition;
@class BasicCameraAnimator;

/// APIs for animating the camera.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCameraAnimationsManager")
@interface TMBCameraAnimationsManager : NSObject
/// List of animators currently alive
@property (nonatomic, readonly, copy) NSArray<TMBCameraAnimator *> * _Nonnull cameraAnimators;
/// Interrupts all <code>active</code> animation.
/// The camera remains at the last point before the cancel request was invoked, i.e.,
/// the camera is not reset or fast-forwarded to the end of the transition.
/// Canceled animations cannot be restarted / resumed. The animator must be recreated.
- (void)cancelAnimations;
/// Moves the viewpoint to a different location using a transition animation that
/// evokes powered flight and an optional transition duration and timing function.
/// It seamlessly incorporates zooming and panning to help
/// the user find his or her bearings even after traversing a great distance.
/// \param to The camera options at the end of the animation. Any camera parameters that are nil will
/// not be animated.
///
/// \param duration Duration of the animation, measured in seconds. If nil, a suitable calculated
/// duration is used.
///
/// \param completion Completion handler called when the animation stops
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nullable)flyTo:(MBMCameraOptions * _Nonnull)to duration:(NSNumber * _Nullable)duration completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Ease the camera to a destination
/// \param to the target camera after animation; if <code>camera.anchor</code> is non-nil, it is use for both
/// the <code>fromValue</code> and the <code>toValue</code> of the underlying animation such that the
/// value specified will not be interpolated, but will be passed as-is to each camera update
/// during the animation. To animate <code>anchor</code> itself, use the <code>makeAnimator</code> APIs.
///
/// \param duration duration of the animation
///
/// \param curve the easing curve for the animation
///
/// \param completion completion to be called after animation
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nullable)easeTo:(MBMCameraOptions * _Nonnull)to duration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param timingParameters The object providing the timing information. This object must adopt
/// the <code>UITimingCurveProvider</code> protocol.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration timingParameters:(id <UITimingCurveProvider> _Nonnull)timingParameters animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param curve One of UIKit’s predefined timing curves to apply to the animation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param controlPoint1 The first control point for the cubic Bézier timing curve.
///
/// \param controlPoint2 The second control point for the cubic Bézier timing curve.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2 animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param dampingRatio The damping ratio to apply to the initial acceleration and oscillation. To
/// smoothly decelerate the animation without oscillation, specify a value of 1.
/// Specify values closer to 0 to create less damping and more oscillation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)dampingRatio animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBCameraAnimator")
@interface TMBCameraAnimator : NSObject
@property (nonatomic, readonly) UIViewAnimatingState state;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBCameraTransitionChange;

/// Structure used to represent a desired change to the map’s camera
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCameraTransition")
@interface TMBCameraTransition : NSObject
/// Represents a change to the center coordinate of the map.
/// NOTE: Setting the <code>toValue</code> of <code>center</code> overrides any <code>anchor</code> animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull center;
/// Represents a change to the zoom of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull zoom;
/// Represents a change to the padding of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull padding;
/// Represents a change to the anchor of the map
/// NOTE: Incompatible with concurrent center animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull anchor;
/// Represents a change to the bearing of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull bearing;
/// Ensures that bearing transitions are optimized to take the shortest path. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldOptimizeBearingPath;
/// Represents a change to the pitch of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull pitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Generic struct used to represent a change in a value from a starting point (i.e. <code>fromValue</code>) to an end point (i.e. <code>toValue</code>).
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBCameraTransitionChange")
@interface TMBCameraTransitionChange : NSObject
@property (nonatomic, strong) NSValue * _Nonnull fromValue;
@property (nonatomic, strong) NSValue * _Nullable toValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBCancelable")
@interface TMBCancelable : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCircleAnnotation")
@interface TMBCircleAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBCircleAnnotation * _Nonnull)fromCenter:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) NSNumber * _Nullable circleBlur;
/// The fill color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleColor;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable circleOpacity;
/// Circle radius.
@property (nonatomic, strong) NSNumber * _Nullable circleRadius;
/// The stroke color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleStrokeColor;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeOpacity;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCircleAnnotationManager")
@interface TMBCircleAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBCircleAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable circlePitchScale;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable circleTranslate;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A filled circle.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-circle">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBCircleLayer")
@interface TMBCircleLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) TMBValue * _Nullable circleBlur;
/// Transition options for <code>circleBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleBlurTransition;
/// The fill color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// Transition options for <code>circleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleColorTransition;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable circleOpacity;
/// Transition options for <code>circleOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleOpacityTransition;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchScale;
/// Circle radius.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// Transition options for <code>circleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleRadiusTransition;
/// The stroke color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeColor;
/// Transition options for <code>circleStrokeColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeColorTransition;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeOpacity;
/// Transition options for <code>circleStrokeOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeOpacityTransition;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeWidth;
/// Transition options for <code>circleStrokeWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeWidthTransition;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslate;
/// Transition options for <code>circleTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleTranslateTransition;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Orientation of circle when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBCirclePitchAlignment, open) {
/// The circle is aligned to the plane of the map.
  TMBCirclePitchAlignmentMap = 0,
/// The circle is aligned to the plane of the viewport.
  TMBCirclePitchAlignmentViewport = 1,
};

/// Controls the scaling behavior of the circle when the map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBCirclePitchScale, open) {
/// Circles are scaled according to their apparent distance to the camera.
  TMBCirclePitchScaleMap = 0,
/// Circles are not scaled.
  TMBCirclePitchScaleViewport = 1,
};

/// Controls the frame of reference for <code>circle-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBCircleTranslateAnchor, open) {
/// The circle is translated relative to the map.
  TMBCircleTranslateAnchorMap = 0,
/// The circle is translated relative to the viewport.
  TMBCircleTranslateAnchorViewport = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBClusterOptions")
@interface TMBClusterOptions : NSObject
/// The circle radius of the cluster items, 18 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// The circle color, black by default.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// The text color of cluster item, white by default
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// The text size of cluster item, 12 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Value to use for a text label of the cluster. <code>get("point_count")</code> by default which
/// will show the count of points in the cluster
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal
/// to the width of a tile, 50 by default. Value must be greater than or equal to 0.
@property (nonatomic) double clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less
/// than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom
/// levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic) double clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from
/// clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>.
/// <code>operator</code> is any expression function that accepts at
/// least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the
/// cluster contains; <code>map_expression</code> produces the value of a single point. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp(.sum) {
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": ["+", ["get", "scalerank"]]}</code>
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp {
///     Exp(.sum) {
///         Exp(.accumulated)
///         Exp(.get) { "sum" }
///     }
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Define a set of cluster options to determine how to cluster annotations.
/// Providing clusterOptions when initializing a <code>PointAnnotationManager</code>
/// will turn on clustering for that <code>PointAnnotationManager</code>.
- (nonnull instancetype)initWithCircleRadius:(TMBValue * _Nullable)circleRadius circleColor:(TMBValue * _Nullable)circleColor textColor:(TMBValue * _Nullable)textColor textSize:(TMBValue * _Nullable)textSize textField:(TMBValue * _Nullable)textField clusterRadius:(double)clusterRadius clusterMaxZoom:(double)clusterMaxZoom clusterProperties:(NSDictionary<NSString *, TMBExpression *> * _Nullable)clusterProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBCollatorOptions")
@interface TMBCollatorOptions : NSObject
/// Whether comparison option is case sensitive.
@property (nonatomic, strong) NSNumber * _Nullable caseSensitive;
/// Whether the comparison operation is diacritic sensitive
@property (nonatomic, strong) NSNumber * _Nullable diacriticSensitive;
/// The locale argument specifies the IETF language tag of the locale to use.
/// If none is provided, the default locale is used.
@property (nonatomic, copy) NSString * _Nullable locale;
- (nonnull instancetype)initWithCaseSensitive:(NSNumber * _Nullable)caseSensitive diacriticSensitive:(NSNumber * _Nullable)diacriticSensitive locale:(NSString * _Nullable)locale OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
enum TMBOrnamentVisibility : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC21TMBCompassViewOptions")
@interface TMBCompassViewOptions : NSObject
/// The position of the compass view.
/// The default value for this property is <code>.topTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the compass view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The image used for displaying the compass.
/// The default value for this property is nil, default compass image will be drawn.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The visibility of the compass view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBDefaultViewportTransitionOptions;

/// A default <code>ViewportTransition</code> implementation.
/// Use <code>Viewport/makeDefaultViewportTransition(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC28TMBDefaultViewportTransition")
@interface TMBDefaultViewportTransition : NSObject
/// Configuration options.
/// New values will take effect the next time <code>ViewportTransition/run(to:completion:)</code>
/// is invoked
@property (nonatomic, strong) TMBDefaultViewportTransitionOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TMBViewportState;

/// to and from different <code>ViewportState</code>s.
/// MapboxMaps provides implementations of <code>ViewportTransition</code> that can be created and
/// configured via methods on <code>Viewport</code>. Applications may also define their own implementations to
/// handle advanced use cases not covered by the provided implementations.
/// seealso:
///
/// <ul>
///   <li>
///     <code>DefaultViewportTransition</code>
///   </li>
///   <li>
///     <code>ImmediateViewportTransition</code>
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP13MapboxMapObjC21TMBViewportTransition_")
@protocol TMBViewportTransition
/// Runs the transition to <code>toState</code>.
/// The completion block must be invoked with <code>true</code> if the transition completes successfully. If the
/// transition fails, invoke the completion block with <code>false</code>.
/// If the returned <code>Cancelable</code> is canceled, it not necessary to invoke the completion block (but
/// is safe to do so — it will just be ignored).
/// Transitions should handle the possibility that the “to” state might fail to provide a target camera in a
/// timely manner or might update the target camera multiple times during the transition (a “moving
/// target”).
/// \param toState The target state for the transition.
///
/// \param completion A block that must be invoked when the transition is complete. Must be invoked
/// on the main queue.
///
/// \param success A flag to indicate whether the transition was successful.
///
///
/// returns:
/// a <code>Cancelable</code> that can be used to terminate the transition. If
/// <code>Cancelable/cancel()</code> is invoked, the transition must immediately stop
/// updating the camera and cancel any animations that it started.
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBDefaultViewportTransition (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportTransition>
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration options for <code>DefaultViewportTransition</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC35TMBDefaultViewportTransitionOptions")
@interface TMBDefaultViewportTransitionOptions : NSObject
/// The maximum duration of the transition.
@property (nonatomic) NSTimeInterval maxDuration;
/// Memberwise initializer for <code>DefaultViewportTransitionOptions</code>.
/// \param maxDuration Defaults to 3.5.
///
- (nonnull instancetype)initWithMaxDuration:(NSTimeInterval)maxDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The encoding used by this source. Mapbox Terrain RGB is used by default
typedef SWIFT_ENUM(NSInteger, TMBEncoding, open) {
/// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
  TMBEncodingTerrarium = 0,
/// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
  TMBEncodingMapbox = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBExpression")
@interface TMBExpression : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic, readonly) enum TMBExpressionOperator expressionOperator;
/// Length of time before a transition begins in seconds.
@property (nonatomic, readonly, copy) NSArray * _Nonnull arguments;
+ (TMBExpression * _Nonnull)createWithOperator:(enum TMBExpressionOperator)operator_ SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithOperator:(enum TMBExpressionOperator)operator_ arguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)args:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface TMBExpression (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBExpression * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)subtract:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, TMBExpressionOperator, open) {
/// For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.
  TMBExpressionOperatorSubtract = 0,
/// Logical negation. Returns <code>true</code> if the input is <code>false</code>, and <code>false</code> if the input is <code>true</code>.
  TMBExpressionOperatorNot = 1,
/// Returns <code>true</code> if the input values are not equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorNeq = 2,
/// Returns the product of the inputs.
  TMBExpressionOperatorProduct = 3,
/// Returns the result of floating point division of the first input by the second.
  TMBExpressionOperatorDivision = 4,
/// Returns the remainder after integer division of the first input by the second.
  TMBExpressionOperatorMod = 5,
/// Returns the result of raising the first input to the power specified by the second.
  TMBExpressionOperatorPow = 6,
/// Returns the sum of the inputs.
  TMBExpressionOperatorSum = 7,
/// Returns <code>true</code> if the first input is strictly less than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorLt = 8,
/// Returns <code>true</code> if the first input is less than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorLte = 9,
/// Returns <code>true</code> if the input values are equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorEq = 10,
/// Returns <code>true</code> if the first input is strictly greater than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorGt = 11,
/// Returns <code>true</code> if the first input is greater than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorGte = 12,
/// Returns the absolute value of the input.
  TMBExpressionOperatorAbs = 13,
/// Returns the value of a cluster property accumulated so far. Can only be used in the <code>clusterProperties</code> option of a clustered GeoJSON source.
  TMBExpressionOperatorAccumulated = 14,
/// Returns the arccosine of the input.
  TMBExpressionOperatorAcos = 15,
/// Returns <code>true</code> if all the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>false</code>, the result is <code>false</code> and no further input expressions are evaluated.
  TMBExpressionOperatorAll = 16,
/// Returns <code>true</code> if any of the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>true</code>, the result is <code>true</code> and no further input expressions are evaluated.
  TMBExpressionOperatorAny = 17,
/// Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.
  TMBExpressionOperatorArray = 18,
/// Returns the arcsine of the input.
  TMBExpressionOperatorAsin = 19,
/// Retrieves an item from an array.
  TMBExpressionOperatorAt = 20,
/// Returns the arctangent of the input.
  TMBExpressionOperatorAtan = 21,
/// Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.
  TMBExpressionOperatorBoolean = 22,
/// Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.
  TMBExpressionOperatorSwitchCase = 23,
/// Returns the smallest integer that is greater than or equal to the input.
  TMBExpressionOperatorCeil = 24,
/// Evaluates each expression in turn until the first valid value is obtained. Invalid values are <code>null</code> and <a href="#types-image"><code>'image'</code></a> expressions that are unavailable in the style. If all values are invalid, <code>coalesce</code> returns the first value listed.
  TMBExpressionOperatorCoalesce = 25,
/// Returns a <code>collator</code> for use in locale-dependent comparison operations. The <code>case-sensitive</code> and <code>diacritic-sensitive</code> options default to <code>false</code>. The <code>locale</code> argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the <code>collator</code> will use a system-defined fallback locale. Use <code>resolved-locale</code> to test the results of locale fallback behavior.
  TMBExpressionOperatorCollator = 26,
/// Returns a <code>string</code> consisting of the concatenation of the inputs. Each input is converted to a string as if by <code>to-string</code>.
  TMBExpressionOperatorConcat = 27,
/// Returns the cosine of the input.
  TMBExpressionOperatorCos = 28,
/// Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.
  TMBExpressionOperatorDistance = 29,
/// Returns the distance of a <code>symbol</code> instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. <code>["distance-from-center"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
  TMBExpressionOperatorDistanceFromCenter = 30,
/// Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
  TMBExpressionOperatorDowncase = 31,
/// Returns the mathematical constant e.
  TMBExpressionOperatorE = 32,
/// Retrieves a property value from the current feature’s state. Returns <code>null</code> if the requested property is not present on the feature’s state. A feature’s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their <code>id</code> attribute, which must be an integer or a string that can be cast to an integer. Note that [“feature-state”] can only be used with paint properties that support data-driven styling.
  TMBExpressionOperatorFeatureState = 33,
/// Returns the largest integer that is less than or equal to the input.
  TMBExpressionOperatorFloor = 34,
/// Returns a <code>formatted</code> string for displaying mixed-format text in the <code>text-field</code> property. The input may contain a string literal or expression, including an <a href="#types-image"><code>'image'</code></a> expression. Strings may be followed by a style override object that supports the following properties:
/// <ul>
///   <li>
///     <code>"text-font"</code>: Overrides the font stack specified by the root layout property.
///   </li>
///   <li>
///     <code>"text-color"</code>: Overrides the color specified by the root paint property.
///   </li>
///   <li>
///     <code>"font-scale"</code>: Applies a scaling factor on <code>text-size</code> as specified by the root layout property.
///   </li>
/// </ul>
  TMBExpressionOperatorFormat = 35,
/// Returns the feature’s geometry type: <code>Point</code>, <code>LineString</code> or <code>Polygon</code>. <code>Multi*</code> feature types return the singular forms.
  TMBExpressionOperatorGeometryType = 36,
/// Retrieves a property value from the current feature’s properties, or from another object if a second argument is provided. Returns <code>null</code> if the requested property is missing.
  TMBExpressionOperatorGet = 37,
/// Tests for the presence of an property value in the current feature’s properties, or from another object if a second argument is provided.
  TMBExpressionOperatorHas = 38,
/// Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the <code>heatmap-color</code> property.
  TMBExpressionOperatorHeatmapDensity = 39,
/// Returns the feature’s id, if it has one.
  TMBExpressionOperatorId = 40,
/// Returns a <a href="/mapbox-gl-js/style-spec/types/#resolvedimage"><code>ResolvedImage</code></a> for use in <a href="/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image"><code>icon-image</code></a>, <code>*-pattern</code> entries, and as a section in the <a href="#types-format"><code>'format'</code></a> expression. A <a href="#coalesce"><code>'coalesce'</code></a> expression containing <code>image</code> expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the <code>'image'</code> argument.
  TMBExpressionOperatorImage = 41,
/// Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a <a href="#types-literal"><code>literal</code></a> expression to hint correct interpretation to the <a href="#type-system">type system</a>.
  TMBExpressionOperatorInExpression = 42,
/// Returns the first position at which an item can be found in an array or a substring can be found in a string, or <code>-1</code> if the input cannot be found. Accepts an optional index from where to begin the search.
  TMBExpressionOperatorIndexOf = 43,
/// Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. The output type must be <code>number</code>, <code>array<number></code>, or <code>color</code>.
/// Interpolation types:
/// <ul>
///   <li>
///     <code>["linear"]</code>: Interpolates linearly between the pair of stops just less than and just greater than the input.
///   </li>
///   <li>
///     <code>["exponential", base]</code>: Interpolates exponentially between the stops just less than and just greater than the input. <code>base</code> controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.
///   </li>
///   <li>
///     <code>["cubic-bezier", x1, y1, x2, y2]</code>: Interpolates using the cubic bezier curve defined by the given control points.
///   </li>
/// </ul>
  TMBExpressionOperatorInterpolate = 44,
/// Returns <code>true</code> if the input string is expected to render legibly. Returns <code>false</code> if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the <code>mapbox-gl-rtl-text</code> plugin is not in use in Mapbox GL JS).
  TMBExpressionOperatorIsSupportedScript = 45,
/// Returns the length of an array or string.
  TMBExpressionOperatorLength = 46,
/// Binds expressions to named variables, which can then be referenced in the result expression using [“var”, “variable_name”].
  TMBExpressionOperatorLetExpression = 47,
/// Returns the progress along a gradient line. Can only be used in the <code>line-gradient</code> property.
  TMBExpressionOperatorLineProgress = 48,
/// Provides a literal array or object value.
  TMBExpressionOperatorLiteral = 49,
/// Returns the natural logarithm of the input.
  TMBExpressionOperatorLn = 50,
/// Returns mathematical constant ln(2).
  TMBExpressionOperatorLn2 = 51,
/// Returns the base-ten logarithm of the input.
  TMBExpressionOperatorLog10 = 52,
/// Returns the base-two logarithm of the input.
  TMBExpressionOperatorLog2 = 53,
/// Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, <code>["get", "building_type"]</code>). Each label must be unique, and must be either:
/// <ul>
///   <li>
///     a single literal value; or
///   </li>
///   <li>
///     an array of literal values, the values of which must be all strings or all numbers (for example <code>[100, 101]</code> or <code>["c", "b"]</code>).
///   </li>
/// </ul>
/// The input matches if any of the values in the array matches using strict equality, similar to the <code>"in"</code> operator.
/// If the input type does not match the type of the labels, the result will be the fallback value.
  TMBExpressionOperatorMatch = 54,
/// Returns the maximum value of the inputs.
  TMBExpressionOperatorMax = 55,
/// Returns the minimum value of the inputs.
  TMBExpressionOperatorMin = 56,
/// Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.
  TMBExpressionOperatorNumber = 57,
/// Converts the input number into a string representation using the providing formatting rules. If set, the <code>locale</code> argument specifies the locale to use, as a BCP 47 language tag. If set, the <code>currency</code> argument specifies an ISO 4217 code to use for currency-style formatting. If set, the <code>unit</code> argument specifies a <a href="https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier">simple ECMAScript unit</a> to use for unit-style formatting. If set, the <code>min-fraction-digits</code> and <code>max-fraction-digits</code> arguments specify the minimum and maximum number of fractional digits to include.
  TMBExpressionOperatorNumberFormat = 58,
/// Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.
  TMBExpressionOperatorObjectExpression = 59,
/// Returns the mathematical constant pi.
  TMBExpressionOperatorPi = 60,
/// Returns the current pitch in degrees. <code>["pitch"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
  TMBExpressionOperatorPitch = 61,
/// Returns the feature properties object.  Note that in some cases, it may be more efficient to use <code>["get", "property_name"]</code> directly.
  TMBExpressionOperatorProperties = 62,
/// Returns the IETF language tag of the locale being used by the provided <code>collator</code>. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.
  TMBExpressionOperatorResolvedLocale = 63,
/// Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.
  TMBExpressionOperatorRgb = 64,
/// Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.
  TMBExpressionOperatorRgba = 65,
/// Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, <code>["round", -1.5]</code> evaluates to -2.
  TMBExpressionOperatorRound = 66,
/// Returns the sine of the input.
  TMBExpressionOperatorSin = 67,
/// Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches <code>sky-gradient-radius</code>. Can only be used in the <code>sky-gradient</code> property.
  TMBExpressionOperatorSkyRadialProgress = 68,
/// Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.
  TMBExpressionOperatorSlice = 69,
/// Returns the square root of the input.
  TMBExpressionOperatorSqrt = 70,
/// Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.
  TMBExpressionOperatorStep = 71,
/// Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.
  TMBExpressionOperatorString = 72,
/// Returns the tangent of the input.
  TMBExpressionOperatorTan = 73,
/// Converts the input value to a boolean. The result is <code>false</code> when then input is an empty string, 0, <code>false</code>, <code>null</code>, or <code>NaN</code>; otherwise it is <code>true</code>.
  TMBExpressionOperatorToBoolean = 74,
/// Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
  TMBExpressionOperatorToColor = 75,
/// Converts the input value to a number, if possible. If the input is <code>null</code> or <code>false</code>, the result is 0. If the input is <code>true</code>, the result is 1. If the input is a string, it is converted to a number as specified by the <a href="https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type">“ToNumber Applied to the String Type” algorithm</a> of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
  TMBExpressionOperatorToNumber = 76,
/// Returns a four-element array containing the input color’s red, green, blue, and alpha components, in that order.
  TMBExpressionOperatorToRgba = 77,
/// Converts the input value to a string. If the input is <code>null</code>, the result is <code>""</code>. If the input is a <a href="#types-boolean"><code>boolean</code></a>, the result is <code>"true"</code> or <code>"false"</code>. If the input is a number, it is converted to a string as specified by the <a href="https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type">“NumberToString” algorithm</a> of the ECMAScript Language Specification. If the input is a <a href="#color"><code>color</code></a>, it is converted to a string of the form <code>"rgba(r,g,b,a)"</code>, where <code>r</code>, <code>g</code>, and <code>b</code> are numerals ranging from 0 to 255, and <code>a</code> ranges from 0 to 1. If the input is an <a href="#types-image"><code>'image'</code></a> expression, <code>'to-string'</code> returns the image name. Otherwise, the input is converted to a string in the format specified by the <a href="https://tc39.github.io/ecma262/#sec-json.stringify"><code>JSON.stringify</code></a> function of the ECMAScript Language Specification.
  TMBExpressionOperatorToString = 78,
/// Returns a string describing the type of the given value.
  TMBExpressionOperatorTypeofExpression = 79,
/// Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
  TMBExpressionOperatorUpcase = 80,
/// References variable bound using “let”.
  TMBExpressionOperatorVarExpression = 81,
/// Returns <code>true</code> if the evaluated feature is fully contained inside a boundary of the input geometry, <code>false</code> otherwise. The input value can be a valid GeoJSON of type <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Supported features for evaluation:
/// <ul>
///   <li>
///     <code>Point</code>: Returns <code>false</code> if a point is on the boundary or falls outside the boundary.
///   </li>
///   <li>
///     <code>LineString</code>: Returns <code>false</code> if any part of a line falls outside the boundary, the line intersects the boundary, or a line’s endpoint is on the boundary.
///   </li>
/// </ul>
  TMBExpressionOperatorWithin = 82,
/// Returns the current zoom level.  Note that in style layout and paint properties, [“zoom”] may only appear as the input to a top-level “step” or “interpolate” expression.
  TMBExpressionOperatorZoom = 83,
/// Interpolates linearly between the pair of stops just less than and just greater than the input
  TMBExpressionOperatorLinear = 84,
/// <code>["exponential", base]</code>
/// Interpolates exponentially between the stops just less than and just
/// greater than the input. base controls the rate at which the output increases: higher values make the output
/// increase more towards the high end of the range.
/// With values close to 1 the output increases linearly.
  TMBExpressionOperatorExponential = 85,
/// <code>["cubic-bezier", x1, y1, x2, y2]</code>
/// Interpolates using the cubic bezier curve defined by the given control points.
  TMBExpressionOperatorCubicBezier = 86,
};

enum TMBExpressionOptionsType : NSInteger;
@class TMBFormatOptions;
@class TMBNumberFormatOptions;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBExpressionOptions")
@interface TMBExpressionOptions : NSObject
@property (nonatomic, readonly) enum TMBExpressionOptionsType type;
@property (nonatomic, readonly) id _Nonnull options;
+ (TMBExpressionOptions * _Nonnull)formatWithOptions:(TMBFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)numberFormatWithOptions:(TMBNumberFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)collatorWithOptions:(TMBCollatorOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBExpressionOptionsType, open) {
  TMBExpressionOptionsTypeFormat = 0,
  TMBExpressionOptionsTypeNumberFormat = 1,
  TMBExpressionOptionsTypeCollator = 2,
};


/// An extruded (3D) polygon.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill-extrusion">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBFillExtrusionLayer")
@interface TMBFillExtrusionLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Controls the intensity of shading near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionIntensity;
/// Transition options for <code>fillExtrusionAmbientOcclusionIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionIntensityTransition;
/// Shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to height of one floor and brings the most plausible results for buildings.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionRadius;
/// Transition options for <code>fillExtrusionAmbientOcclusionRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionRadiusTransition;
/// The height with which to extrude the base of this layer. Must be less than or equal to <code>fill-extrusion-height</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionBase;
/// Transition options for <code>fillExtrusionBase</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionBaseTransition;
/// The base color of the extruded fill. The extrusion’s surfaces will be shaded differently based on this color in combination with the root <code>light</code> settings. If this color is specified as <code>rgba</code> with an alpha component, the alpha component will be ignored; use <code>fill-extrusion-opacity</code> to set layer opacity.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionColor;
/// Transition options for <code>fillExtrusionColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionColorTransition;
/// The height with which to extrude this layer.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionHeight;
/// Transition options for <code>fillExtrusionHeight</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionHeightTransition;
/// The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionOpacity;
/// Transition options for <code>fillExtrusionOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionOpacityTransition;
/// Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionPattern;
/// Transition options for <code>fillExtrusionPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslate;
/// Transition options for <code>fillExtrusionTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionTranslateTransition;
/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslateAnchor;
/// Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionVerticalGradient;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBFillExtrusionTranslateAnchor, open) {
/// The fill extrusion is translated relative to the map.
  TMBFillExtrusionTranslateAnchorMap = 0,
/// The fill extrusion is translated relative to the viewport.
  TMBFillExtrusionTranslateAnchorViewport = 1,
};


/// A filled polygon with an optional stroked border.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBFillLayer")
@interface TMBFillLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable fillSortKey;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) TMBValue * _Nullable fillAntialias;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) TMBValue * _Nullable fillColor;
/// Transition options for <code>fillColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillColorTransition;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) TMBValue * _Nullable fillOpacity;
/// Transition options for <code>fillOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOpacityTransition;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) TMBValue * _Nullable fillOutlineColor;
/// Transition options for <code>fillOutlineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOutlineColorTransition;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillPattern;
/// Transition options for <code>fillPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslate;
/// Transition options for <code>fillTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillTranslateTransition;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBFillTranslateAnchor, open) {
/// The fill is translated relative to the map.
  TMBFillTranslateAnchorMap = 0,
/// The fill is translated relative to the viewport.
  TMBFillTranslateAnchorViewport = 1,
};

@class TMBFollowPuckViewportStateOptions;

/// A <code>ViewportState</code> implementation that tracks the location puck (to show a puck, use
/// <code>LocationOptions/puckType</code>)
/// Use <code>Viewport/makeFollowPuckViewportState(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBFollowPuckViewportState")
@interface TMBFollowPuckViewportState : NSObject
/// Configuration options for this state.
@property (nonatomic, strong) TMBFollowPuckViewportStateOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ViewportState</code> is a protocol that <code>Viewport</code> depends on as it orchestrates transitions to and
/// from different states.
/// A <code>ViewportState</code> is a reference type and must not be shared among multiple <code>Viewport</code>
/// instances simultaneously.
/// The <code>ViewportState/observeDataSource(with:)</code> method allows
/// <code>ViewportTransition</code>s to consume a stream of camera updates from a target state while
/// executing a transition. <code>ViewportState/startUpdatingCamera()</code> and
/// <code>ViewportState/stopUpdatingCamera()</code> are invoked to tell the state that it should assume or
/// relinquish control of the map’s camera. These are typically used by <code>Viewport</code> itself after a
/// successful transition into a state and when exiting a state, respectively.
/// MapboxMaps provides implementations of <code>ViewportState</code> that can be created and configured
/// via methods on <code>Viewport</code>. Applications may also define their own implementations to handle
/// advanced use cases not covered by the provided implementations.
/// States should generally pre-warm their data sources as soon as they are created to minimize delays when
/// they become current. For this reason, only states that are currently (or soon-to-be) needed should be kept
/// alive so that unneeded resources (e.g. location services) can be released.
/// seealso:
///
/// <ul>
///   <li>
///     <code>FollowPuckViewportState</code>
///   </li>
///   <li>
///     <code>OverviewViewportState</code>
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP13MapboxMapObjC16TMBViewportState_")
@protocol TMBViewportState
/// Registers a <code>handler</code> to receive the cameras being generated by this <code>ViewportState</code>.
/// This method is commonly used by <code>ViewportTransition</code> implementations to obtain the
/// target camera for transition animations. Transitions typically cannot start their animations until after
/// <code>handler</code> is invoked for the first time, so it’s a good idea for states to invoke <code>handler</code> with
/// the current camera if it’s not too stale rather than waiting for the next camera change to occur. To
/// increase the likelihood that a valid camera exists when a handler is registered, design
/// <code>ViewportState</code> implementations so that they start updating their internal state prior to when
/// they are passed to <code>Viewport/transition(to:transition:completion:)</code>.
/// The caller may either cancel the returned <code>Cancelable</code> <em>or</em> return <code>false</code> from
/// <code>handler</code> to indicate that it wishes to stop receiving updates. Following either of these events,
/// implemenations must no longer invoke <code>handler</code> and must release all strong references to it.
/// \param handler A closure that is invoked by the state whenever its camera changes. Returns
/// <code>true</code> to stay subscribed and <code>false</code> to unsubscribe. <code>handler</code> must be
/// invoked on the main queue.
///
/// \param camera The <code>ViewportState</code>’s most recent camera.
///
///
/// returns:
/// A <code>Cancelable</code> that the caller can use to unsubscribe.
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Tells this state that it is now responsible for updating the camera.
/// <code>Viewport</code> calls this method at the end of a successful transition into this state.
/// Implementations typically have a dependency on either <code>MapboxMap</code> so that they can use its
/// <code>MapboxMap/setCamera(to:)</code> method to change the camea or on
/// <code>CameraAnimationsManager</code> so that they can run camera animations.
- (void)startUpdatingCamera;
/// Tells this state that it is no longer responsible for updating the camera.
/// <code>Viewport</code> calls this method at the beginning of the transition out of this state.
/// Implementations must stop updating the camera immediately and should typically cancel any
/// ongoing animations that they started when this method is invoked.
- (void)stopUpdatingCamera;
@end


@interface TMBFollowPuckViewportState (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportState>
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (void)startUpdatingCamera;
- (void)stopUpdatingCamera;
@end


/// Expresses the different ways that <code>FollowPuckViewportState</code> can obtain values to use when
/// setting <code>CameraOptions/bearing</code>.
/// seealso:
/// <code>LocationOptions/puckBearingSource</code>
SWIFT_CLASS("_TtC13MapboxMapObjC33TMBFollowPuckViewportStateBearing")
@interface TMBFollowPuckViewportStateBearing : NSObject
@property (nonatomic, readonly, strong) NSNumber * _Nullable bearing;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> to a constant value.
/// \param bearing the constant value that should be used to set the camera bearing.
///
+ (TMBFollowPuckViewportStateBearing * _Nonnull)constant:(CLLocationDirection)bearing SWIFT_WARN_UNUSED_RESULT;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> based on the current
/// heading.
/// seealso:
///
/// <ul>
///   <li>
///     <code>LocationManager</code>
///   </li>
///   <li>
///     <code>Location/heading</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFollowPuckViewportStateBearing * _Nonnull heading;)
+ (TMBFollowPuckViewportStateBearing * _Nonnull)heading SWIFT_WARN_UNUSED_RESULT;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> based on the current
/// course.
/// seealso:
///
/// <ul>
///   <li>
///     <code>LocationManager</code>
///   </li>
///   <li>
///     <code>Location/course</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFollowPuckViewportStateBearing * _Nonnull course;)
+ (TMBFollowPuckViewportStateBearing * _Nonnull)course SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configuration options for <code>FollowPuckViewportState</code>.
/// Each of the <code>CameraOptions</code>-related properties is optional, so that the state can be configured to
/// only modify certain aspects of the camera if desired. This can be used, to achieve effects like allowing
/// zoom gestures to work simultaneously with <code>FollowPuckViewportState</code>.
/// seealso:
/// <code>ViewportOptions/transitionsToIdleUponUserInteraction</code>
SWIFT_CLASS("_TtC13MapboxMapObjC33TMBFollowPuckViewportStateOptions")
@interface TMBFollowPuckViewportStateOptions : NSObject
/// The value to use for <code>CameraOptions/padding</code> when setting the camera. If <code>nil</code>, padding
/// will not be modified.
@property (nonatomic, strong) NSValue * _Nullable padding;
/// The value to use for <code>CameraOptions/zoom</code> when setting the camera. If <code>nil</code>, zoom will
/// not be modified.
@property (nonatomic, strong) NSNumber * _Nullable zoom;
/// Indicates how to obtain the value to use for <code>CameraOptions/bearing</code> when setting the
/// camera. If <code>nil</code>, bearing will not be modified.
@property (nonatomic, strong) TMBFollowPuckViewportStateBearing * _Nullable bearing;
/// The value to use for <code>CameraOptions/pitch</code> when setting the camera. If <code>nil</code>, pitch will
/// not be modified.
@property (nonatomic, strong) NSNumber * _Nullable pitch;
/// Memberwise initializer for <code>FollowPuckViewportStateOptions</code>.
/// All parameters have default values.
/// \param padding Defaults to <code>UIEdgeInsets.zero</code>.
///
/// \param zoom Defaults to 16.35.
///
/// \param bearing Defaults to <code>FollowPuckViewportStateBearing/heading</code>.
///
/// \param pitch Defaults to 45.
///
- (nonnull instancetype)initWithPadding:(NSValue * _Nullable)padding zoom:(NSNumber * _Nullable)zoom bearing:(TMBFollowPuckViewportStateBearing * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBFormatOptions")
@interface TMBFormatOptions : NSObject
/// Applies a scaling factor on text-size as specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable fontScaleValue;
/// Applies a scaling factor on text-size as specified by the root layout property.
@property (nonatomic, strong) NSNumber * _Nullable fontScale;
/// Overrides the font stack specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable textFontValue;
/// Overrides the font stack specified by the root layout property.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// Overrides the color specified by the root paint property.
@property (nonatomic, strong) TMBValue * _Nullable textColorValue;
/// Overrides the color specified by the root paint property.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC9TMBSource_")
@protocol TMBSource
/// Rendering type of this source.
@property (nonatomic, readonly) enum TMBSourceType type;
@end

@class TMBGeoJSONSourceData;
@class TMBPromoteId;

/// A GeoJSON data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geo_json">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC16TMBGeoJSONSource")
@interface TMBGeoJSONSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a GeoJSON file, or inline GeoJSON.
@property (nonatomic, strong) TMBGeoJSONSourceData * _Nullable data;
/// Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels).
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance.
@property (nonatomic, strong) NSNumber * _Nullable buffer;
/// Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
@property (nonatomic, strong) NSNumber * _Nullable tolerance;
/// If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new <code>Point</code> features in the source with additional properties:
/// <ul>
///   <li>
///     <code>cluster</code> Is <code>true</code> if the point is a cluster
///   </li>
///   <li>
///     <code>cluster_id</code> A unqiue id for the cluster to be used in conjunction with the <a href="https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom">cluster inspection methods</a>
///   </li>
///   <li>
///     <code>point_count</code> Number of original points grouped into this cluster
///   </li>
///   <li>
///     <code>point_count_abbreviated</code> An abbreviated point count
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nullable cluster;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile.
@property (nonatomic, strong) NSNumber * _Nullable clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic, strong) NSNumber * _Nullable clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>. <code>operator</code> is any expression function that accepts at least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the cluster contains; <code>map_expression</code> produces the value of a single point.
/// Example: <code>{"sum": ["+", ["get", "scalerank"]]}</code>.
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value, e.g.:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Whether to calculate line distance metrics. This is required for line layers that specify <code>line-gradient</code> values.
@property (nonatomic, strong) NSNumber * _Nullable lineMetrics;
/// Whether to generate ids for the geojson features. When enabled, the <code>feature.id</code> property will be auto assigned based on its index in the <code>features</code> array, over-writing any previous values.
@property (nonatomic, strong) NSNumber * _Nullable generateId;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>.
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum TMBGeoJSONSourceType : NSInteger;
@class MBXFeature;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBGeoJSONSourceData")
@interface TMBGeoJSONSourceData : NSObject
@property (nonatomic, readonly) enum TMBGeoJSONSourceType type;
+ (TMBGeoJSONSourceData * _Nonnull)urlWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureWithFeature:(MBXFeature * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureCollectionWithFeatures:(NSArray<MBXFeature *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)geometryWithGeometry:(MBXGeometry * _Nonnull)geometry SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Captures potential values of the <code>data</code> property of a GeoJSONSource
typedef SWIFT_ENUM(NSInteger, TMBGeoJSONSourceType, open) {
/// The <code>data</code> property can be a url
  TMBGeoJSONSourceTypeUrl = 0,
/// The <code>data</code> property can be a feature
  TMBGeoJSONSourceTypeFeature = 1,
/// The <code>data</code> property can be a feature collection
  TMBGeoJSONSourceTypeFeatureCollection = 2,
/// The <code>data</code> property can be a geometry with no associated properties.
  TMBGeoJSONSourceTypeGeometry = 3,
/// Empty data to be used for initialization
  TMBGeoJSONSourceTypeEmpty = 4,
};

@protocol TMBGestureManagerDelegate;
@class TMBGestureOptions;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureManager")
@interface TMBGestureManager : NSObject
@property (nonatomic, weak) id <TMBGestureManagerDelegate> _Nullable delegate;
- (TMBGestureOptions * _Nonnull)gestureOptions SWIFT_WARN_UNUSED_RESULT;
/// The gesture recognizer for the pan gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull panGestureRecognizer;
/// The gesture recognizer for the “pinch to zoom” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pinchGestureRecognizer;
/// The gesture recognizer for the rotate gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull rotateGestureRecognizer;
/// The gesture recognizer for the pitch gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pitchGestureRecognizer;
/// The gesture recognizer for the “double tap to zoom in” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTapToZoomInGestureRecognizer;
/// The gesture recognizer for the “double touch to zoom out” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTouchToZoomOutGestureRecognizer;
/// The gesture recognizer for the quickZoom gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull quickZoomGestureRecognizer;
/// The gesture recognizer for the single tap gesture
/// note:
/// The single tap gesture recognizer is primarily used to route tap events to the
/// <code>*AnnotationManager</code>s. You can add a target-action pair to this gesture recognizer
/// to be notified when a single tap occurs on the map.
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull singleTapGestureRecognizer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBGestureType : NSInteger;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC25TMBGestureManagerDelegate_")
@protocol TMBGestureManagerDelegate
/// Informs the delegate that a gesture has begun.
- (void)gestureManagerWithDidBegin:(enum TMBGestureType)gestureType;
/// Informs the delegate that a gesture has ended and whether there will be additional animations after the gesture
/// has completed. Does not indicate whether gesture-based animations have completed.
- (void)gestureManagerWithDidEnd:(enum TMBGestureType)gestureType willAnimate:(BOOL)willAnimate;
/// Informs the delegate that animations triggered due to a gesture have ended.
- (void)gestureManagerWithDidEndAnimatingFor:(enum TMBGestureType)gestureType;
@end

enum TMBPanMode : NSInteger;

/// Configuration options for the built-in gestures
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureOptions")
@interface TMBGestureOptions : NSObject
/// Whether the single-touch pan gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL panEnabled;
/// Whether the pinch gesture is enabled. Allows panning, rotating, and zooming.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchEnabled;
/// Whether rotation gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL rotateEnabled;
/// Whether rotation is enabled for the pinch to zoom gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL simultaneousRotateAndPinchZoomEnabled;
/// Whether zoom is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchZoomEnabled;
/// Whether pan is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchPanEnabled;
/// Whether the pitch gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pitchEnabled;
/// Whether double tapping the map with one touch results in a zoom-in animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTapToZoomInEnabled;
/// Whether single tapping the map with two touches results in a zoom-out animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTouchToZoomOutEnabled;
/// Whether the quick zoom gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL quickZoomEnabled;
/// Configures the directions in which the map is allowed to move during a pan gesture.
/// Defaults to <code>PanMode.horizontalAndVertical</code>. Called <code>scrollMode</code> in
/// the Android SDK for consistency with platform conventions.
@property (nonatomic) enum TMBPanMode panMode;
/// A constant factor that determines how quickly pan deceleration animations happen.
/// Multiplied with the velocity vector once per millisecond during deceleration animations.
/// Defaults to <code>UIScrollView.DecelerationRate.normal.rawValue</code>
@property (nonatomic) CGFloat panDecelerationFactor;
/// By default, gestures rotate and zoom around the center of the gesture. Set this property to rotate and zoom around a fixed point instead.
/// This property will be ignored by the pinch gesture if <code>GestureOptions/pinchPanEnabled</code> is set to <code>true</code>.
@property (nonatomic, strong) NSValue * _Nullable focalPoint;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBGestureType, open) {
/// The pan gesture
  TMBGestureTypePan = 0,
/// The pinch gesture
  TMBGestureTypePinch = 1,
/// The pitch gesture
  TMBGestureTypePitch = 2,
/// The double tap to zoom in gesture
  TMBGestureTypeDoubleTapToZoomIn = 3,
/// The double touch to zoom out gesture
  TMBGestureTypeDoubleTouchToZoomOut = 4,
/// The quick zoom gesture
  TMBGestureTypeQuickZoom = 5,
/// The single tap gesture
  TMBGestureTypeSingleTap = 6,
};


/// A heatmap.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-heatmap">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBHeatmapLayer")
@interface TMBHeatmapLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses <code>["heatmap-density"]</code> as input.
@property (nonatomic, strong) TMBValue * _Nullable heatmapColor;
/// Similar to <code>heatmap-weight</code> but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.
@property (nonatomic, strong) TMBValue * _Nullable heatmapIntensity;
/// Transition options for <code>heatmapIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapIntensityTransition;
/// The global opacity at which the heatmap layer will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable heatmapOpacity;
/// Transition options for <code>heatmapOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapOpacityTransition;
/// Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. <code>queryRenderedFeatures</code> on heatmap layers will return points within this radius.
@property (nonatomic, strong) TMBValue * _Nullable heatmapRadius;
/// Transition options for <code>heatmapRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapRadiusTransition;
/// A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.
@property (nonatomic, strong) TMBValue * _Nullable heatmapWeight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Direction of light source when map is rotated.
typedef SWIFT_ENUM(NSInteger, TMBHillshadeIlluminationAnchor, open) {
/// The hillshade illumination is relative to the north direction.
  TMBHillshadeIlluminationAnchorMap = 0,
/// The hillshade illumination is relative to the top of the viewport.
  TMBHillshadeIlluminationAnchorViewport = 1,
};


/// Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-hillshade">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBHillshadeLayer")
@interface TMBHillshadeLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The shading color used to accentuate rugged terrain like sharp cliffs and gorges.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeAccentColor;
/// Transition options for <code>hillshadeAccentColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeAccentColorTransition;
/// Intensity of the hillshade
@property (nonatomic, strong) TMBValue * _Nullable hillshadeExaggeration;
/// Transition options for <code>hillshadeExaggeration</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeExaggerationTransition;
/// The shading color of areas that faces towards the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeHighlightColor;
/// Transition options for <code>hillshadeHighlightColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeHighlightColorTransition;
/// Direction of light source when map is rotated.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationAnchor;
/// The direction of the light source used to generate the hillshading with 0 as the top of the viewport if <code>hillshade-illumination-anchor</code> is set to <code>viewport</code> and due north if <code>hillshade-illumination-anchor</code> is set to <code>map</code>.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationDirection;
/// The shading color of areas that face away from the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeShadowColor;
/// Transition options for <code>hillshadeShadowColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeShadowColorTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Part of the icon placed closest to the anchor.
typedef SWIFT_ENUM(NSInteger, TMBIconAnchor, open) {
/// The center of the icon is placed closest to the anchor.
  TMBIconAnchorCenter = 0,
/// The left side of the icon is placed closest to the anchor.
  TMBIconAnchorLeft = 1,
/// The right side of the icon is placed closest to the anchor.
  TMBIconAnchorRight = 2,
/// The top of the icon is placed closest to the anchor.
  TMBIconAnchorTop = 3,
/// The bottom of the icon is placed closest to the anchor.
  TMBIconAnchorBottom = 4,
/// The top left corner of the icon is placed closest to the anchor.
  TMBIconAnchorTopLeft = 5,
/// The top right corner of the icon is placed closest to the anchor.
  TMBIconAnchorTopRight = 6,
/// The bottom left corner of the icon is placed closest to the anchor.
  TMBIconAnchorBottomLeft = 7,
/// The bottom right corner of the icon is placed closest to the anchor.
  TMBIconAnchorBottomRight = 8,
};

/// Orientation of icon when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBIconPitchAlignment, open) {
/// The icon is aligned to the plane of the map.
  TMBIconPitchAlignmentMap = 0,
/// The icon is aligned to the plane of the viewport.
  TMBIconPitchAlignmentViewport = 1,
/// Automatically matches the value of {@link ICON_ROTATION_ALIGNMENT}.
  TMBIconPitchAlignmentAuto = 2,
};

/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
typedef SWIFT_ENUM(NSInteger, TMBIconRotationAlignment, open) {
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns icons east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns icon x-axes with the line.
  TMBIconRotationAlignmentMap = 0,
/// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
  TMBIconRotationAlignmentViewport = 1,
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_MAP}.
  TMBIconRotationAlignmentAuto = 2,
};

/// Scales the icon to fit around the associated text.
typedef SWIFT_ENUM(NSInteger, TMBIconTextFit, open) {
/// The icon is displayed at its intrinsic aspect ratio.
  TMBIconTextFitNone = 0,
/// The icon is scaled in the x-dimension to fit the width of the text.
  TMBIconTextFitWidth = 1,
/// The icon is scaled in the y-dimension to fit the height of the text.
  TMBIconTextFitHeight = 2,
/// The icon is scaled in both x- and y-dimensions.
  TMBIconTextFitBoth = 3,
};

/// Controls the frame of reference for <code>icon-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBIconTranslateAnchor, open) {
/// Icons are translated relative to the map.
  TMBIconTranslateAnchorMap = 0,
/// Icons are translated relative to the viewport.
  TMBIconTranslateAnchorViewport = 1,
};


/// An image data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#image">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBImageSource")
@interface TMBImageSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// URL that points to an image.
@property (nonatomic, copy) NSString * _Nullable url;
/// Corners of image specified in longitude, latitude pairs.
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable coordinates;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// A <code>ViewportTransition</code> implementation that transitions immediately without any animation.
/// Use <code>Viewport/makeImmediateViewportTransition()</code> to create instances of this class.
SWIFT_CLASS("_TtC13MapboxMapObjC30TMBImmediateViewportTransition")
@interface TMBImmediateViewportTransition : NSObject <TMBViewportTransition>
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Information about a layer
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLayerInfo")
@interface TMBLayerInfo : NSObject
/// The identifier of the layer
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the layer
@property (nonatomic) enum TMBLayerType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBLayerPositionType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC16TMBLayerPosition")
@interface TMBLayerPosition : NSObject
@property (nonatomic, readonly, strong) id _Nonnull arg;
@property (nonatomic, readonly) enum TMBLayerPositionType type;
- (nonnull instancetype)init:(enum TMBLayerPositionType)type arg:(id _Nonnull)arg OBJC_DESIGNATED_INITIALIZER;
+ (TMBLayerPosition * _Nonnull)atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)belowLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)aboveLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBLayerPositionType, open) {
  TMBLayerPositionTypeAt = 0,
  TMBLayerPositionTypeAbove = 1,
  TMBLayerPositionTypeBelow = 2,
};

/// Layer rendering types
typedef SWIFT_ENUM(NSInteger, TMBLayerType, open) {
/// A filled polygon with an optional stroked border.
  TMBLayerTypeFill = 0,
/// A stroked line.
  TMBLayerTypeLine = 1,
/// An icon or a text label.
  TMBLayerTypeSymbol = 2,
/// A filled circle.
  TMBLayerTypeCircle = 3,
/// A heatmap.
  TMBLayerTypeHeatmap = 4,
/// An extruded (3D) polygon.
  TMBLayerTypeFillExtrusion = 5,
/// Raster map textures such as satellite imagery.
  TMBLayerTypeRaster = 6,
/// Client-side hillshading visualization based on DEM data.
/// Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
  TMBLayerTypeHillshade = 7,
/// The background color or pattern of the map.
  TMBLayerTypeBackground = 8,
/// Layer representing the location indicator
  TMBLayerTypeLocationIndicator = 9,
/// Layer representing the sky
  TMBLayerTypeSky = 10,
  TMBLayerTypeModel = 11,
};


/// The global light source.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#light">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBLight")
@interface TMBLight : NSObject
/// Whether extruded geometries are lit relative to the map or viewport.
@property (nonatomic, strong) NSNumber * _Nullable anchor;
/// Color tint for lighting extruded geometries.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
@property (nonatomic, strong) NSNumber * _Nullable intensity;
/// Transition property for <code>intensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable intensityTransition;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when <code>light.anchor</code> is set to <code>viewport</code> corresponds to the top of the viewport, or 0 degree when <code>light.anchor</code> is set to <code>map</code> corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable position;
/// Transition property for <code>position</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable positionTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The display of line endings.
typedef SWIFT_ENUM(NSInteger, TMBLineCap, open) {
/// A cap with a squared-off end which is drawn to the exact endpoint of the line.
  TMBLineCapButt = 0,
/// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
  TMBLineCapRound = 1,
/// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
  TMBLineCapSquare = 2,
};

/// The display of lines when joining.
typedef SWIFT_ENUM(NSInteger, TMBLineJoin, open) {
/// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
  TMBLineJoinBevel = 0,
/// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
  TMBLineJoinRound = 1,
/// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
  TMBLineJoinMiter = 2,
};


/// A stroked line.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-line">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLineLayer")
@interface TMBLineLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The display of line endings.
@property (nonatomic, strong) TMBValue * _Nullable lineCap;
/// The display of lines when joining.
@property (nonatomic, strong) TMBValue * _Nullable lineJoin;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) TMBValue * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) TMBValue * _Nullable lineRoundLimit;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) TMBValue * _Nullable lineBlur;
/// Transition options for <code>lineBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineBlurTransition;
/// The color with which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineColor;
/// Transition options for <code>lineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineColorTransition;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable lineDasharray;
/// Transition options for <code>lineDasharray</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineDasharrayTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) TMBValue * _Nullable lineGapWidth;
/// Transition options for <code>lineGapWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineGapWidthTransition;
/// Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify <code>"lineMetrics": true</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineGradient;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) TMBValue * _Nullable lineOffset;
/// Transition options for <code>lineOffset</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOffsetTransition;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineOpacity;
/// Transition options for <code>lineOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOpacityTransition;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable linePattern;
/// Transition options for <code>linePattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable linePatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslate;
/// Transition options for <code>lineTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineTranslateTransition;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, strong) TMBValue * _Nullable lineTrimOffset;
/// Stroke thickness.
@property (nonatomic, strong) TMBValue * _Nullable lineWidth;
/// Transition options for <code>lineWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineWidthTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>line-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBLineTranslateAnchor, open) {
/// The line is translated relative to the map.
  TMBLineTranslateAnchorMap = 0,
/// The line is translated relative to the viewport.
  TMBLineTranslateAnchorViewport = 1,
};


/// Location Indicator layer.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-location-indicator">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBLocationIndicatorLayer")
@interface TMBLocationIndicatorLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Name of image in sprite to use as the middle of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearingImage;
/// Name of image in sprite to use as the background of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable shadowImage;
/// Name of image in sprite to use as the top of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable topImage;
/// The accuracy, in meters, of the position source used to retrieve the position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadius;
/// Transition options for <code>accuracyRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusTransition;
/// The color for drawing the accuracy radius border. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusBorderColor;
/// Transition options for <code>accuracyRadiusBorderColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusBorderColorTransition;
/// The color for drawing the accuracy radius, as a circle. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusColor;
/// Transition options for <code>accuracyRadiusColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusColorTransition;
/// The bearing of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearing;
/// Transition options for <code>bearing</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingTransition;
/// The size of the bearing image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable bearingImageSize;
/// Transition options for <code>bearingImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingImageSizeTransition;
/// The color of the circle emphasizing the indicator. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleColor;
/// Transition options for <code>emphasisCircleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleColorTransition;
/// The radius, in pixel, of the circle emphasizing the indicator, drawn between the accuracy radius and the indicator shadow.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleRadius;
/// Transition options for <code>emphasisCircleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleRadiusTransition;
/// The displacement off the center of the top image and the shadow image when the pitch of the map is greater than 0. This helps producing a three-dimensional appearence.
@property (nonatomic, strong) TMBValue * _Nullable imagePitchDisplacement;
/// An array of [latitude, longitude, altitude] position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable location;
/// Transition options for <code>location</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationTransition;
/// The opacity of the entire location indicator layer.
@property (nonatomic, strong) TMBValue * _Nullable locationIndicatorOpacity;
/// Transition options for <code>locationIndicatorOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationIndicatorOpacityTransition;
/// The amount of the perspective compensation, between 0 and 1. A value of 1 produces a location indicator of constant width across the screen. A value of 0 makes it scale naturally according to the viewing projection.
@property (nonatomic, strong) TMBValue * _Nullable perspectiveCompensation;
/// The size of the shadow image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable shadowImageSize;
/// Transition options for <code>shadowImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable shadowImageSizeTransition;
/// The size of the top image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable topImageSize;
/// Transition options for <code>topImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable topImageSizeTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class Location;
@protocol TMBLocationPermissionsDelegate;
@protocol TMBLocationProvider;
@protocol LocationConsumer;
@class TMBLocationOptions;
@protocol PuckLocationConsumer;

/// An object responsible for notifying the map view about location-related events,
/// such as a change in the device’s location.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationManager")
@interface TMBLocationManager : NSObject
/// Represents the latest location received from the location provider.
@property (nonatomic, readonly, strong) Location * _Nullable latestLocation;
/// The object that acts as the delegate of the location manager.
@property (nonatomic, weak) id <TMBLocationPermissionsDelegate> _Nullable delegate;
/// The current underlying location provider. Use <code>overrideLocationProvider(with:)</code> to substitute a different provider.
/// Avoid manipulating the location provider directly. LocationManager assumes full responsibility for starting and stopping location
/// and heading updates as needed.
@property (nonatomic, readonly, strong) id <TMBLocationProvider> _Null_unspecified locationProvider;
/// The set of objects that are currently consuming location updates.
/// The returned object is a copy of the underlying one, so mutating it will have no effect.
@property (nonatomic, readonly, strong) NSHashTable<id <LocationConsumer>> * _Nonnull consumers;
/// Configuration options for the location manager.
@property (nonatomic, strong) TMBLocationOptions * _Nonnull options;
- (void)overrideLocationProviderWith:(id <TMBLocationProvider> _Nonnull)customLocationProvider;
/// The location manager holds weak references to consumers, client code should retain these references.
- (void)addLocationConsumer:(id <LocationConsumer> _Nonnull)consumer;
/// Removes a location consumer from the location manager.
- (void)removeLocationConsumer:(id <LocationConsumer> _Nonnull)consumer;
/// Adds <code>PuckLocationConsumer</code> to the location manager.
/// An instance of <code>PuckLocationConsumer</code> will get the accurate (interpolated) location of the puck as it moves,
/// as opposed to the <code>LocationConsumer</code> that gets updated only when the <code>LocationProvider</code> has emitted a new location.
/// important:
/// The location manager holds a weak reference to the consumer, thus client should retain these references.
- (void)addPuckLocationConsumer:(id <PuckLocationConsumer> _Nonnull)consumer;
/// Removes a <code>PuckLocationConsumer</code> from the location manager.
- (void)removePuckLocationConsumer:(id <PuckLocationConsumer> _Nonnull)consumer;
/// Allows a custom case to request full accuracy
- (void)requestTemporaryFullAccuracyPermissionsWithPurposeKey:(NSString * _Nonnull)purposeKey SWIFT_AVAILABILITY(ios,introduced=14.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LocationManager;

@interface TMBLocationManager (SWIFT_EXTENSION(MapboxMapObjC)) <LocationPermissionsDelegate>
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(LocationManager * _Nonnull)locationManager SWIFT_WARN_UNUSED_RESULT;
- (void)locationManager:(LocationManager * _Nonnull)locationManager didChangeAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuthorization;
- (void)locationManager:(LocationManager * _Nonnull)locationManager didFailToLocateUserWithError:(NSError * _Nonnull)error;
@end

enum TMBPuckType : NSInteger;
@class TMBPuck2DConfiguration;
@class TMBPuck3DConfiguration;
enum TMBPuckBearingSource : NSInteger;

/// A struct to configure a <code>LocationManager</code>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationOptions")
@interface TMBLocationOptions : NSObject
/// Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
/// The default value of this property is <code>kCLDistanceFilterNone</code>.
@property (nonatomic) CLLocationDistance distanceFilter;
/// Specifies the accuracy of the location data.
/// The default value is <code>kCLLocationAccuracyBest</code>.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/// Sets the type of user activity associated with the location updates.
/// The default value is <code>CLActivityType.other</code>.
@property (nonatomic) CLActivityType activityType;
@property (nonatomic, readonly) enum TMBPuckType puckType;
/// Sets the type of puck that should be used
@property (nonatomic, strong) TMBPuck2DConfiguration * _Nullable puck2DConfiguration;
@property (nonatomic, strong) TMBPuck3DConfiguration * _Nullable puck3DConfiguration;
/// Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
/// The default value is <code>PuckBearingSource.heading</code>.
@property (nonatomic) enum TMBPuckBearingSource puckBearingSource;
/// Whether the puck rotates to track the bearing source.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL puckBearingEnabled;
/// Initializes a <code>LocationOptions</code>.
/// \param distanceFilter Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
///
/// \param desiredAccuracy Specifies the accuracy of the location data.
///
/// \param activityType Sets the type of user activity associated with the location.
///
/// \param puckType Sets the type of puck that should be used.
///
/// \param puckBearingSource Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
///
/// \param puckBearingEnabled Whether the puck rotates to track the bearing source.
///
- (nonnull instancetype)initWithDistanceFilter:(CLLocationDistance)distanceFilter desiredAccuracy:(CLLocationAccuracy)desiredAccuracy activityType:(CLActivityType)activityType puck2DConfiguration:(TMBPuck2DConfiguration * _Nullable)puck2DConfiguration puck3DConfiguration:(TMBPuck3DConfiguration * _Nullable)puck3DConfiguration puckBearingSource:(enum TMBPuckBearingSource)puckBearingSource puckBearingEnabled:(BOOL)puckBearingEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>LocationPermissionsDelegate</code> protocol defines a set of optional methods that you
/// can use to receive events from an associated location manager object.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC30TMBLocationPermissionsDelegate_")
@protocol TMBLocationPermissionsDelegate
@optional
/// Tells the delegate that an attempt to locate the user’s position failed.
/// \param locationManager The location manager that is tracking the user’s location.
///
/// \param error An error object containing the reason why location tracking failed.
///
- (void)locationManager:(TMBLocationManager * _Nonnull)locationManager didFailToLocateUserWithError:(NSError * _Nonnull)error;
/// Tells the delegate that the accuracy authorization has changed.
/// \param locationManager The location manager that is tracking the user’s location.
///
/// \param accuracyAuthorization The updated accuracy authorization value.
///
- (void)locationManager:(TMBLocationManager * _Nonnull)locationManager didChangeAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuthorization;
/// Asks the delegate whether the heading calibration alert should be displayed.
/// \param locationManager The location manager object coordinating the display of the heading calibration alert.
///
///
/// returns:
/// <code>true</code> if you want to allow the heading calibration alert to be displayed; <code>false</code> if you do not.
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(TMBLocationManager * _Nonnull)locationManager SWIFT_WARN_UNUSED_RESULT;
@end

@class CLHeading;
@protocol TMBLocationProviderDelegate;

/// The <code>LocationProvider</code> protocol defines a set of methods that a class must
/// implement in order to serve as the location events provider.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC19TMBLocationProvider_")
@protocol TMBLocationProvider
/// Configures the location provider.
@property (nonatomic, strong) TMBLocationOptions * _Nonnull locationProviderOptions;
/// Returns the current localization authorization status.
@property (nonatomic, readonly) CLAuthorizationStatus authorizationStatus;
/// Returns the current accuracy authorization that the user has granted.
/// The default value is <code>CLAccuracyAuthorization.fullAccuracy</code> on iOS versions prior to iOS 14.
@property (nonatomic, readonly) CLAccuracyAuthorization accuracyAuthorization;
/// Returns the latest heading update received, or <code>nil</code> if none is available.
@property (nonatomic, readonly, strong) CLHeading * _Nullable heading;
/// Sets the delegate for <code>LocationProvider</code>. The implementation should hold a weak reference to the
/// provided delegate to avoid creating a strong reference cycle with <code>LocationManager</code>.
/// note:
/// This method should only be called by <code>LocationManager</code>. To allow other objects to
/// participate in location updates, add a <code>LocationConsumer</code> to the <code>LocationManager</code>
/// instead.
- (void)setDelegate:(id <TMBLocationProviderDelegate> _Nonnull)delegate;
/// Requests permission to use the location services whenever the app is running.
- (void)requestAlwaysAuthorization;
/// Requests permission to use the location services while the app is in
/// the foreground.
- (void)requestWhenInUseAuthorization;
/// Requests temporary permission for full accuracy
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(NSString * _Nonnull)purposeKey SWIFT_AVAILABILITY(ios,introduced=14.0);
/// Starts the generation of location updates that reports the device’s current location.
- (void)startUpdatingLocation;
/// Stops the generation of location updates.
- (void)stopUpdatingLocation;
/// Specifies a physical device orientation.
@property (nonatomic) CLDeviceOrientation headingOrientation;
/// Starts the generation of heading updates that reports the devices’s current heading.
- (void)startUpdatingHeading;
/// Stops the generation of heading updates.
- (void)stopUpdatingHeading;
/// Dismisses immediately the heading calibration view from screen.
- (void)dismissHeadingCalibrationDisplay;
@end

@class CLLocation;

/// The <code>LocationProviderDelegate</code> protocol defines a set of methods that respond
/// to location updates from an <code>LocationProvider</code>.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC27TMBLocationProviderDelegate_")
@protocol TMBLocationProviderDelegate
/// Notifies the delegate with the new location data.
/// \param provider The location provider reporting the update.
///
/// \param locations An array of <code>CLLocation</code> objects in chronological order,
/// with the last object representing the most recent location.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Notifies the delegate with the new heading data.
/// \param provider The location provider reporting the update.
///
/// \param newHeading The new heading update.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didUpdateHeading:(CLHeading * _Nonnull)newHeading;
/// Notifies the delegate that the location provider was unable to retrieve
/// location updates.
/// \param provider The location provider reporting the error.
///
/// \param error An error object containing the error code that indicates
/// why the location provider failed.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didFailWithError:(NSError * _Nonnull)error;
/// Notifies the delegate that the location provider changed accuracy authorization
/// \param provider The location provider reporting the error.
///
/// \param manager The location manager that is reporting the change
///
- (void)locationProviderDidChangeAuthorization:(id <TMBLocationProvider> _Nonnull)provider;
@end


/// Used to configure position, margin, and visibility for the map’s logo view.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLogoViewOptions")
@interface TMBLogoViewOptions : NSObject
/// The position of the logo view.
/// The default value for this property is <code>.bottomLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the logo view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBStyle;
@class MBMCoordinateBounds;
@class MBMCoordinateBoundsZoom;
@class MBMFreeCameraOptions;
@class MBMCameraBounds;
@class MBMCameraBoundsOptions;

/// MapboxMap provides access to the map model, including the camera, style, observable map events,
/// and querying rendered features. Obtain the MapboxMap instance for a <code>MapView</code> via MapView.mapboxMap.
/// important:
/// MapboxMap should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBMapboxMap")
@interface TMBMapboxMap : NSObject
/// The <code>style</code> object supports run time styling.
@property (nonatomic, readonly, strong) TMBStyle * _Nonnull style;
/// Triggers a repaint of the map. Calling this method is typically unnecessary but
/// may be needed if using a custom layer that needs to be redrawn independently
/// of other map changes.
- (void)triggerRepaint;
/// Loads a <code>style</code> from a StyleURI, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI StyleURI to load
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleURI:(NSString * _Nonnull)styleUri completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
/// Loads a <code>style</code> from a JSON string, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI Style JSON string
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleJSON:(NSString * _Nonnull)JSON completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
/// When loading a map, if <code>prefetchZoomDelta</code> is set to any number greater
/// than 0, the map will first request a tile for <code>zoom - prefetchZoomDelta</code>
/// in an attempt to display a full map at lower resolution as quick as
/// possible.
/// It will get clamped at the tile source minimum zoom. The default delta
/// is 4.
@property (nonatomic) uint8_t prefetchZoomDelta;
/// Defines whether multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude.
/// If disabled, when the map is zoomed out far enough that a single representation of the world does not fill the map’s entire container,
/// there will be blank space beyond 180 and -180 degrees longitude.
/// In this case, features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map
/// and the other on the left edge of the map) at every zoom level.
/// By default, <code>shouldRenderWorldCopies</code> is set to <code>true</code>.
@property (nonatomic) BOOL shouldRenderWorldCopies;
/// Gets the resource options for the map.
/// All optional fields of the returned object are initialized with the
/// actual values.
/// note:
/// The result of this property is different from the <code>ResourceOptions</code>
/// that were provided to the map’s initializer.
@property (nonatomic, readonly, strong) MBMResourceOptions * _Nonnull resourceOptions;
/// Clears temporary map data.
/// Clears temporary map data from the data path defined in the given resource
/// options. Useful to reduce the disk usage or in case the disk cache contains
/// invalid data.
/// note:
/// Calling this API will affect all maps that use the same data path
/// and does not affect persistent map data like offline style packages.
/// \param resourceOptions The <code>resource options</code> that contain the map data path
/// to be used
///
/// \param completion Called once the request is complete
///
+ (void)clearDataFor:(MBMResourceOptions * _Nonnull)resourceOptions completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Gets elevation for the given coordinate.
/// note:
/// Elevation is only available for the visible region on the screen.
/// \param coordinate Coordinate for which to return the elevation.
///
///
/// returns:
/// Elevation (in meters) multiplied by current terrain
/// exaggeration, or empty if elevation for the coordinate is not available.
- (NSNumber * _Nullable)elevationAt:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Transforms a view’s frame into a set of coordinate bounds
/// \param rect The <code>rect</code> whose bounds will be transformed into a set of map coordinate bounds.
///
///
/// returns:
/// A <code>CoordinateBounds</code> object that represents the southwest and northeast corners of the view’s bounds.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsFor:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Transforms a set of map coordinate bounds to a <code>CGRect</code> relative to the <code>MapView</code>.
/// \param coordinateBounds The <code>coordinateBounds</code> that will be converted into a rect relative to the <code>MapView</code>
///
///
/// returns:
/// A <code>CGRect</code> whose corners represent the vertices of a set of <code>CoordinateBounds</code>.
- (CGRect)rectFor:(MBMCoordinateBounds * _Nonnull)coordinateBounds SWIFT_WARN_UNUSED_RESULT;
/// The array of <code>MapDebugOptions</code>. Setting this property to an empty array
/// disables previously enabled <code>MapDebugOptions</code>.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull debugOptions;
/// Returns the map’s options
@property (nonatomic, readonly, strong) MBMMapOptions * _Nonnull options;
/// Calculates a <code>CameraOptions</code> to fit a <code>CoordinateBounds</code>
/// This API isn’t supported by Globe projection.
/// \param coordinateBounds The coordinate bounds that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraForCoordinateBounds:(MBMCoordinateBounds * _Nonnull)coordinateBounds padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates.
/// This API isn’t supported by Globe projection.
/// \param coordinates Array of coordinates that should fit within the new viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraForCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates into a sub-rect of the map.
/// Adjusts the zoom of <code>camera</code> to fit <code>coordinates</code> into <code>rect</code>.
/// Returns the provided camera with zoom adjusted to fit coordinates into
/// <code>rect</code>, so that the coordinates on the left, top and right of the effective
/// camera center at the principal point of the projection (defined by padding)
/// fit into the rect.
/// This API isn’t supported by Globe projection.
/// note:
///
/// This method may fail if the principal point of the projection is not
/// inside <code>rect</code> or if there is insufficient screen space, defined by
/// principal point and rect, to fit the geometry.
/// \param coordinates The coordinates to frame within <code>rect</code>.
///
/// \param camera The camera for which the zoom should be adjusted to fit <code>coordinates</code>. <code>camera.center</code> must be non-nil.
///
/// \param rect The rectangle inside of the map that should be used to frame <code>coordinates</code>.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints, or <code>cameraOptions</code> if an error occurs.
- (MBMCameraOptions * _Nonnull)cameraFor:(NSArray<NSValue *> * _Nonnull)coordinates camera:(MBMCameraOptions * _Nonnull)camera rect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a geometry
/// This API isn’t supported by Globe projection.
/// \param geometry The geoemtry that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraFor:(MBXGeometry * _Nonnull)geometry padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds corresponding to a given <code>CameraOptions</code>
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsForCameraBounds:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds to a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsUnwrappedFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will
/// be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomUnwrappedFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Converts a point in the mapView’s coordinate system to a geographic coordinate.
/// The point must exist in the coordinate space of the <code>MapView</code>
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (CLLocationCoordinate2D)coordinateFor:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Converts a map coordinate to a <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinate The coordinate to convert.
///
///
/// returns:
/// A <code>CGPoint</code> relative to the <code>UIView</code>. If the point is outside of the bounds
/// of <code>MapView</code> the returned point contains <code>-1.0</code> for both coordinates.
- (CGPoint)pointFor:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Converts map coordinates to an array of <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinates The coordinate to convert.
///
///
/// returns:
/// An array of <code>CGPoint</code> relative to the <code>UIView. If a coordinate's point is outside of map view's bounds, it will be </code>(-1, -1)`
- (NSArray<NSValue *> * _Nonnull)pointsFor:(NSArray<NSValue *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// Converts points in the mapView’s coordinate system to geographic coordinates.
/// The points must exist in the coordinate space of the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (NSArray<NSValue *> * _Nonnull)coordinatesFor:(NSArray<NSValue *> * _Nonnull)points SWIFT_WARN_UNUSED_RESULT;
/// Changes the map view by any combination of center, zoom, bearing, and pitch,
/// without an animated transition. The map will retain its current values
/// for any details not passed via the camera options argument. It is not
/// guaranteed that the provided <code>CameraOptions</code> will be set, the map may apply
/// constraints resulting in a different <code>CameraState</code>.
/// important:
///
/// This method does not cancel existing animations. Call
/// <code>CameraAnimationsManager.cancelAnimations()</code>to cancel existing animations.
/// \param cameraOptions New camera options
///
- (void)setCameraTo:(MBMCameraOptions * _Nonnull)cameraOptions;
/// Returns the current camera state
@property (nonatomic, readonly, strong) MBMCameraState * _Nonnull cameraState;
/// Sets/get the map view with the free camera options.
/// FreeCameraOptions provides more direct access to the underlying camera entity.
/// For backwards compatibility the state set using this API must be representable
/// with <code>CameraOptions</code> as well. Parameters are clamped to a valid range or
/// discarded as invalid if the conversion to the pitch and bearing presentation
/// is ambiguous. For example orientation can be invalid if it leads to the
/// camera being upside down or the quaternion has zero length.
/// \param freeCameraOptions The free camera options to set.
///
@property (nonatomic, strong) MBMFreeCameraOptions * _Nonnull freeCameraOptions;
/// Returns the bounds of the map.
@property (nonatomic, readonly, strong) MBMCameraBounds * _Nonnull cameraBounds;
/// Sets the bounds of the map.
/// \param options New camera bounds. Nil values will not take effect.
///
///
/// throws:
/// <code>MapError</code>
- (void)setCameraBoundsWith:(MBMCameraBoundsOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Prepares the drag gesture to use the provided screen coordinate as a pivot
/// point. This function should be called each time when user starts a
/// dragging action (e.g. by clicking on the map). The following dragging
/// will be relative to the pivot.
/// \param point Screen point
///
- (void)dragStartFor:(CGPoint)point;
/// Calculates target point where camera should move after drag. The method
/// should be called after <code>dragStart</code> and before <code>dragEnd</code>.
/// \param fromPoint The point from which the map is dragged.
///
/// \param toPoint The point to which the map is dragged.
///
///
/// returns:
///
/// The camera options object showing end point.
- (MBMCameraOptions * _Nonnull)dragCameraOptionsFrom:(CGPoint)from to:(CGPoint)to SWIFT_WARN_UNUSED_RESULT;
/// Ends the ongoing drag gesture. This function should be called always after
/// the user has ended a drag gesture initiated by <code>dragStart</code>.
- (void)dragEnd;
/// If implementing a custom animation mechanism, call this method when the animation begins.
/// Must always be paired with a corresponding call to <code>endAnimation()</code>
- (void)beginAnimation;
/// If implementing a custom animation mechanism, call this method when the animation ends.
/// Must always be paired with a corresponding call to <code>beginAnimation()</code>
- (void)endAnimation;
/// If implementing a custom gesture, call this method when the gesture begins.
/// Must always be paired with a corresponding call to <code>endGesture()</code>
- (void)beginGesture;
/// If implementing a custom gesture, call this method when the gesture ends.
/// Must always be paired with a corresponding call to <code>beginGesture()</code>
- (void)endGesture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Clears temporary map data.
/// Clears temporary map data from the data path defined in the given resource
/// options. Useful to reduce the disk usage or in case the disk cache contains
/// invalid data.
/// note:
/// Calling this API will affect all maps that use the same data path
/// and does not affect persistent map data like offline style packages.
/// \param completion Called once the request is complete
///
- (void)clearDataWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end

@protocol MBMObserver;

@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Subscribes an observer to a list of events.
/// <code>MapboxMap</code> holds a strong reference to <code>observer</code> while it is subscribed. To stop receiving
/// notifications, pass the same <code>observer</code> to <code>unsubscribe(_:events:)</code>.
/// note:
///
/// Prefer <code>onNext(eventTypes:handler:)</code>, <code>onNext(_:handler:)</code>, and
/// <code>onEvery(_:handler:)</code> to using this lower-level APIs
/// \param observer An object that will receive events of the types specified by <code>events</code>
///
/// \param events Array of event types to deliver to <code>observer</code>
///
- (void)subscribe:(id <MBMObserver> _Nonnull)observer events:(NSArray<NSString *> * _Nonnull)events;
/// Unsubscribes an observer from a provided list of event types.
/// <code>MapboxMap</code> holds a strong reference to <code>observer</code> while it is subscribed. To stop receiving
/// notifications, pass the same <code>observer</code> to this method as was passed to
/// <code>subscribe(_:events:)</code>.
/// \param observer The object to unsubscribe
///
/// \param events Array of event types to unsubscribe from. Pass an
/// empty array (the default) to unsubscribe from all events.
///
- (void)unsubscribe:(id <MBMObserver> _Nonnull)observer events:(NSArray<NSString *> * _Nonnull)events;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Update the state map of a feature within a style source.
/// Update entries in the state map of a given feature within a style source. Only entries listed in the state map
/// will be updated. An entry in the feature state map that is not listed in <code>state</code> will retain its previous value.
/// \param sourceId Style source identifier
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId Identifier of the feature whose state should be updated
///
/// \param state Map of entries to update with their respective new values
///
- (void)setFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId state:(NSDictionary<NSString *, id> * _Nonnull)state;
/// Get the state map of a feature within a style source.
/// \param sourceId Style source identifier.
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources).
///
/// \param featureId Identifier of the feature whose state should be queried.
///
/// \param callback Feature’s state map or an empty map if the feature could not be found.
///
- (void)getFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId callback:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))callback;
/// Removes entries from a feature state object.
/// Remove a specified property or all property from a feature’s state object, depending on the value of <code>stateKey</code>.
/// \param sourceId The style source identifier
///
/// \param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId The feature identifier of the feature whose state should be removed.
///
/// \param stateKey The key of the property to remove. If <code>nil</code>, all feature’s state object properties are removed. Defaults to <code>nil</code>.
///
- (void)removeFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId stateKey:(NSString * _Nullable)stateKey;
@end

@class MBMRenderedQueryOptions;
@class MBMQueriedFeature;
@class MBMSourceQueryOptions;
@class MBMFeatureExtensionValue;

@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithShape:(NSArray<NSValue *> * _Nonnull)shape options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithRect:(CGRect)rect options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithPoint:(CGPoint)point options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
/// Queries the map for source features.
/// \param sourceId Style source identifier used to query for source features.
///
/// \param options Options for querying source features.
///
/// \param completion Callback called when the query completes
///
- (void)querySourceFeaturesFor:(NSString * _Nonnull)sourceId options:(MBMSourceQueryOptions * _Nonnull)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
/// Queries for feature extension values in a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param extension Currently supports keyword <code>supercluster</code>.
///
/// \param extensionField Currently supports following three extensions:
/// <ol>
///   <li>
///     <code>children</code>: returns the children of a cluster (on the next zoom
///     level).
///   </li>
///   <li>
///     <code>leaves</code>: returns all the leaves of a cluster (given its cluster_id)
///   </li>
///   <li>
///     <code>expansion-zoom</code>: returns the zoom on which the cluster expands
///     into several children (useful for “click to zoom” feature).
///   </li>
/// </ol>
///
/// \param args Used for further query specification when using ‘leaves’
/// extensionField. Now only support following two args:
/// <ol>
///   <li>
///     <code>limit</code>: the number of points to return from the query (must
///     use type ‘UInt64’, set to maximum for all points)
///   </li>
///   <li>
///     <code>offset</code>: the amount of points to skip (for pagination, must
///     use type ‘UInt64’)
///   </li>
/// </ol>
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
/// Deprecated. Use getGeoJsonClusterLeaves/getGeoJsonClusterChildren/getGeoJsonClusterExpansionZoom to instead.
///
- (void)queryFeatureExtensionFor:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature extension:(NSString * _Nonnull)extension extensionField:(NSString * _Nonnull)extensionField args:(NSDictionary<NSString *, id> * _Nullable)args completion:(void (^ _Nullable)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns all the leaves (original points) of a cluster (given its cluster_id) from a GeoJSON source, with pagination support: limit is the number of leaves
/// to return (set to Infinity for all points), and offset is the amount of points to skip (for pagination).
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param limit the number of points to return from the query, default to 10
///
/// \param offset the amount of points to skip, default to 0
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterLeavesForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature limit:(uint64_t)limit offset:(uint64_t)offset completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the children (original points or clusters) of a cluster (on the next zoom level)
/// given its id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterChildrenForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the zoom on which the cluster expands into several children (useful for “click to zoom” feature)
/// given the cluster’s cluster_id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterExpansionZoomForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// The style has been fully loaded, and the map has rendered all visible tiles.
- (TMBCancelable * _Nonnull)onMapLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// Describes an error that has occurred while loading the Map. The <code>type</code> property defines what resource could
/// not be loaded and the <code>message</code> property will contain a descriptive error message.
/// In case of <code>source</code> or <code>tile</code> loading errors, <code>source-id</code> will contain the id of the source failing.
/// In case of <code>tile</code> loading errors, <code>tile-id</code> will contain the id of the tile.
- (TMBCancelable * _Nonnull)onMapLoadingError:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map has entered the idle state. The map is in the idle state when there are no ongoing transitions
/// and the map has rendered all requested non-volatile tiles. The event will not be emitted if <code>setUserAnimationInProgress</code>
/// and / or <code>setGestureInProgress</code> is set to <code>true</code>.
- (TMBCancelable * _Nonnull)onMapIdle:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style data has been loaded. The <code>type</code> property defines what kind of style data has been loaded.
/// Event may be emitted synchronously, for example, when <code>setStyleJSON</code> is used to load style.
/// Based on an event data <code>type</code> property value, following use-cases may be implemented:
/// <ul>
///   <li>
///     <code>style</code>: Style is parsed, style layer properties could be read and modified, style layers and sources could be
///     added or removed before rendering is started.
///   </li>
///   <li>
///     <code>sprite</code>: Style’s sprite sheet is parsed and it is possible to add or update images.
///   </li>
///   <li>
///     <code>sources</code>: All sources defined by the style are loaded and their properties could be read and updated if needed.
///   </li>
/// </ul>
- (TMBCancelable * _Nonnull)onStyleDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style has been fully loaded, including the style, specified sprite and sources’ metadata.
/// Note: The style specified sprite would be marked as loaded even with sprite loading error (An error will be emitted via <code>.mapLoadingError</code>).
/// Sprite loading error is not fatal and we don’t want it to block the map rendering, thus this event will still be emitted if style and sources are fully loaded.
- (TMBCancelable * _Nonnull)onStyleLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// A style has a missing image. This event is emitted when the map renders visible tiles and
/// one of the required images is missing in the sprite sheet. Subscriber has to provide the missing image
/// by calling <code>Style/addImage(_:id:sdf:contentInsets:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageMissing:(void (^ _Nonnull)(id _Nonnull))handler;
/// An image added to the style is no longer needed and can be removed using <code>Style/removeImage(withId:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageRemoveUnused:(void (^ _Nonnull)(id _Nonnull))handler;
/// A source data has been loaded.
/// Event may be emitted synchronously in cases when source’s metadata is available when source is added to the style.
/// The <code>id</code> property defines the source id.
/// The <code>type</code> property defines if source’s metadata (e.g., TileJSON) or tile has been loaded. The property of <code>metadata</code>
/// value might be useful to identify when particular source’s metadata is loaded, thus all source’s properties are
/// readable and can be updated before map will start requesting data to be rendered.
/// The <code>loaded</code> property will be set to <code>true</code> if all source’s data required for visible viewport of the map, are loaded.
/// The <code>tile-id</code> property defines the tile id if the <code>type</code> field equals <code>tile</code>.
- (TMBCancelable * _Nonnull)onSourceDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been added with <code>Style/addSource(_:id:)</code> or <code>Style/addSource(withId:properties:)</code>.
/// The event is emitted synchronously, therefore, it is possible to immediately
/// read added source’s properties.
- (TMBCancelable * _Nonnull)onSourceAdded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been removed with <code>Style/removeSource(withId:)</code>.
/// The event is emitted synchronously, thus, <code>Style/allSourceIdentifiers</code> will be
/// in sync when the observer receives the notification.
- (TMBCancelable * _Nonnull)onSourceRemoved:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map finished rendering a frame.
/// The <code>render-mode</code> property tells whether the map has all data (<code>full</code>) required to render the visible viewport.
/// The <code>needs-repaint</code> property provides information about ongoing transitions that trigger map repaint.
/// The <code>placement-changed</code> property tells if the symbol placement has been changed in the visible viewport.
- (TMBCancelable * _Nonnull)onRenderFrameStarted:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onRenderFrameFinished:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onEvenCameraChanged:(void (^ _Nonnull)(id _Nonnull))handler;
/// The <code>ResourceRequest</code> event allows client to observe resource requests made by a
/// map or snapshotter.
- (TMBCancelable * _Nonnull)onResourceRequest:(void (^ _Nonnull)(id _Nonnull))handler;
@end


/// A structure represeting a Model
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBModel")
@interface TMBModel : NSObject
/// URL to a <code>gltf</code> 3D asset in the application bundle
@property (nonatomic, copy) NSURL * _Nullable uri;
/// Coordinates of the model in <code>[longitude, latitude]</code>format
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable position;
/// Orientation of the model
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable orientation;
- (nonnull instancetype)initWithUri:(NSURL * _Nullable)uri position:(NSArray<NSNumber *> * _Nullable)position orientation:(NSArray<NSNumber *> * _Nullable)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBNumberFormatOptions")
@interface TMBNumberFormatOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBScaleBarViewOptions;

/// Used to configure Ornament-specific capabilities of the map
/// All margin values are relative to the <code>MapView</code>’s safe area. To allow the safe area
/// (and thereby ornaments) to track the presence of navigation bars and tab bars,
/// make MapView the root view of a view controller.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBOrnamentOptions")
@interface TMBOrnamentOptions : NSObject
/// The ornament options for the map’s scale bar.
@property (nonatomic, strong) TMBScaleBarViewOptions * _Nonnull scaleBar;
/// The ornament options for the map’s compass view.
@property (nonatomic, strong) TMBCompassViewOptions * _Nonnull compass;
/// The ornament options for the map’s logo view.
/// Per our terms of service, a Mapbox map is required to display both
/// a Mapbox logo as well as an information icon that contains attribution
/// information. See https://docs.mapbox.com/help/how-mapbox-works/attribution/
/// for details.
@property (nonatomic, strong) TMBLogoViewOptions * _Nonnull logo;
/// The ornament options for the map’s attribution button.
@property (nonatomic, strong) TMBAttributionButtonOptions * _Nonnull attributionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBOrnamentPosition, open) {
  TMBOrnamentPositionTopLeft = 0,
  TMBOrnamentPositionTopRight = 1,
  TMBOrnamentPositionBottomRight = 2,
  TMBOrnamentPositionBottomLeft = 3,
  TMBOrnamentPositionTopLeading = 4,
  TMBOrnamentPositionTopTrailing = 5,
  TMBOrnamentPositionBottomLeading = 6,
  TMBOrnamentPositionBottomTrailing = 7,
};

typedef SWIFT_ENUM(NSInteger, TMBOrnamentVisibility, open) {
  TMBOrnamentVisibilityAdaptive = 0,
  TMBOrnamentVisibilityHidden = 1,
  TMBOrnamentVisibilityVisible = 2,
};

@class UIView;

SWIFT_CLASS("_TtC13MapboxMapObjC19TMBOrnamentsManager")
@interface TMBOrnamentsManager : NSObject
/// The <code>OrnamentOptions</code> object that is used to set up and update the required ornaments on the map.
@property (nonatomic, strong) TMBOrnamentOptions * _Nonnull options;
/// The view for the logo ornament. This view can be used to position other views relative to the logo
/// ornament, but it should not be manipulated. Use <code>OrnamentOptions/logo</code> to configure the
/// logo presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull logoView;
/// The view for the scale bar ornament. This view can be used to position other views relative to the
/// scale bar ornament, but it should not be manipulated. Use <code>OrnamentOptions/scaleBar</code>
/// to configure the scale bar presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull scaleBarView;
/// The view for the compass ornament. This view can be used to position other views relative to the
/// compass ornament, but it should not be manipulated. Use <code>OrnamentOptions/compass</code> to
/// configure the compass presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull compassView;
/// The view for the attribution button ornament. This view can be used to position other views relative
/// to the attribution button ornament, but it should not be manipulated. Use
/// <code>OrnamentOptions/attributionButton</code> to configure the attribution button presentation
/// if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull attributionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBOverviewViewportStateOptions;

/// A <code>ViewportState</code> implementation that shows an overview of the geometry specified by its
/// <code>OverviewViewportStateOptions/geometry</code>.
/// Use <code>Viewport/makeOverviewViewportState(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBOverviewViewportState")
@interface TMBOverviewViewportState : NSObject
/// Configuration options.
/// When set, the viewport reframes the geometry using the new options and updates its camera with
/// an <code>CameraAnimationsManager/ease(to:duration:curve:completion:)</code>
/// animation with a linear timing curve and duration specified by the new value’s
/// <code>OverviewViewportStateOptions/animationDuration</code>.
@property (nonatomic, strong) TMBOverviewViewportStateOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBOverviewViewportState (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportState>
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (void)startUpdatingCamera;
- (void)stopUpdatingCamera;
@end


/// Configuration options for <code>OverviewViewportState</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC31TMBOverviewViewportStateOptions")
@interface TMBOverviewViewportStateOptions : NSObject
/// The geometry that the <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic, strong) MBXGeometry * _Nonnull geometry;
/// The padding that <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic) UIEdgeInsets padding;
/// The bearing that <code>OverviewViewportState</code> should use when calcualting its camera.
@property (nonatomic, strong) NSNumber * _Nullable bearing;
/// The pitch that <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic, strong) NSNumber * _Nullable pitch;
/// The length of the animation performed by <code>OverviewViewportState</code> when it starts updating
/// the camera and any time <code>OverviewViewportState/options</code> is set. See
/// <code>OverviewViewportState/options</code> for details.
@property (nonatomic) NSTimeInterval animationDuration;
/// Memberwise initializer for <code>OverviewViewportStateOptions</code>.
/// <code>geometry</code> is required, but all other parameters have default values.
/// \param geometry the geometry for which an overview should be shown.
///
/// \param padding Defaults to <code>UIEdgeInsets.zero</code>.
///
/// \param bearing Defaults to 0.
///
/// \param pitch Defaults to 0.
///
/// \param animationDuration Defaults to 1.
///
- (nonnull instancetype)initWithGeometry:(MBXGeometry * _Nonnull)geometry padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch animationDuration:(NSTimeInterval)animationDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options used to configure the direction in which the map is allowed to move
/// during a pan gesture. Called <code>ScrollMode</code> in the Android SDK for
/// consistency with platform conventions.
typedef SWIFT_ENUM(NSInteger, TMBPanMode, open) {
/// The map may only move horizontally.
  TMBPanModeHorizontal = 0,
/// The map may only move vertically.
  TMBPanModeVertical = 1,
/// The map may move both horizontally and vertically.
  TMBPanModeHorizontalAndVertical = 2,
};


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBPointAnnotation")
@interface TMBPointAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
- (void)image:(UIImage * _Nonnull)image name:(NSString * _Nonnull)name;
+ (TMBPointAnnotation * _Nonnull)fromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) NSNumber * _Nullable iconAnchor;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, copy) NSString * _Nullable iconImage;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconOffset;
/// Rotates the icon clockwise.
@property (nonatomic, strong) NSNumber * _Nullable iconRotate;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) NSNumber * _Nullable iconSize;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable symbolSortKey;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) NSNumber * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, copy) NSString * _Nullable textField;
/// Text justification options.
@property (nonatomic, strong) NSNumber * _Nullable textJustify;
/// Text tracking amount.
@property (nonatomic, strong) NSNumber * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) NSNumber * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textOffset;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) NSNumber * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) NSNumber * _Nullable textRotate;
/// Font size.
@property (nonatomic, strong) NSNumber * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) NSNumber * _Nullable textTransform;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloBlur;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconHaloColor;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloWidth;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable iconOpacity;
/// The color with which the text will be drawn.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable textHaloBlur;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) UIColor * _Nullable textHaloColor;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) NSNumber * _Nullable textHaloWidth;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable textOpacity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC25TMBPointAnnotationManager")
@interface TMBPointAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPointAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable iconAllowOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) NSNumber * _Nullable iconIgnorePlacement;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable iconKeepUpright;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) NSNumber * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable iconPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) NSNumber * _Nullable iconRotationAlignment;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) NSNumber * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) NSNumber * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) NSNumber * _Nullable symbolPlacement;
/// Distance between two symbol anchors.
@property (nonatomic, strong) NSNumber * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) NSNumber * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable textAllowOverlap;
/// Font stack to use for displaying text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) NSNumber * _Nullable textIgnorePlacement;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable textKeepUpright;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) NSNumber * _Nullable textMaxAngle;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) NSNumber * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable textPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) NSNumber * _Nullable textRotationAlignment;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textWritingMode;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTranslate;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable iconTranslateAnchor;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textTranslate;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable textTranslateAnchor;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight SWIFT_DEPRECATED_MSG("text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBPolygon")
@interface TMBPolygon : NSObject
- (nonnull instancetype)initWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
+ (TMBPolygon * _Nonnull)createWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates SWIFT_WARN_UNUSED_RESULT;
+ (TMBPolygon * _Nonnull)fromCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPolygonAnnotation")
@interface TMBPolygonAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
+ (TMBPolygonAnnotation * _Nonnull)polygon:(TMBPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable fillSortKey;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) UIColor * _Nullable fillColor;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) NSNumber * _Nullable fillOpacity;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) UIColor * _Nullable fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable fillPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC27TMBPolygonAnnotationManager")
@interface TMBPolygonAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolygonAnnotation *> * _Nonnull annotations;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) NSNumber * _Nullable fillAntialias;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable fillTranslate;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable fillTranslateAnchor;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBPolylineAnnotation")
@interface TMBPolylineAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBPolylineAnnotation * _Nonnull)fromId:(NSString * _Nonnull)id coordinates:(NSArray<NSValue *> * _Nonnull)coordinates isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable SWIFT_WARN_UNUSED_RESULT;
/// The display of lines when joining.
@property (nonatomic, strong) NSNumber * _Nullable lineJoin;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) NSNumber * _Nullable lineBlur;
/// The color with which the line will be drawn.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) NSNumber * _Nullable lineGapWidth;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) NSNumber * _Nullable lineOffset;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable lineOpacity;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable linePattern;
/// Stroke thickness.
@property (nonatomic, strong) NSNumber * _Nullable lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC28TMBPolylineAnnotationManager")
@interface TMBPolylineAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolylineAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// The display of line endings.
@property (nonatomic, strong) NSNumber * _Nullable lineCap;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) NSNumber * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) NSNumber * _Nullable lineRoundLimit;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDasharray;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTranslate;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTrimOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBPromoteIdType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC12TMBPromoteId")
@interface TMBPromoteId : NSObject
@property (nonatomic, readonly) enum TMBPromoteIdType type;
+ (TMBPromoteId * _Nonnull)stringWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBPromoteId * _Nonnull)objectWithValue:(NSDictionary<NSString *, NSString *> * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBPromoteIdType, open) {
  TMBPromoteIdTypeString = 0,
  TMBPromoteIdTypeObject = 1,
};

@class TMBPuck2DConfigurationPulsing;

SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck2DConfiguration")
@interface TMBPuck2DConfiguration : NSObject
/// The opacity of the entire location indicator.
@property (nonatomic) double opacity;
/// Image to use as the top of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable topImage;
/// Image to use as the middle of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable bearingImage;
/// Image to use as the background of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable shadowImage;
/// The size of the images, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable scale;
@property (nonatomic, strong) TMBPuck2DConfigurationPulsing * _Nullable pulsing;
/// Flag determining if the horizontal accuracy ring should be shown arround the <code>Puck</code>. default value is false
@property (nonatomic) BOOL showsAccuracyRing;
/// The color of the accuracy ring.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingColor;
/// The color of the accuracy ring border.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingBorderColor;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image..
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param accuracyRingColor The color of the accuracy ring.
///
/// \param accuracyRingBorderColor The color of the accuracy ring border.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale showsAccuracyRing:(BOOL)showsAccuracyRing accuracyRingColor:(UIColor * _Nonnull)accuracyRingColor accuracyRingBorderColor:(UIColor * _Nonnull)accuracyRingBorderColor opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image.
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale pulsing:(TMBPuck2DConfigurationPulsing * _Nullable)pulsing showsAccuracyRing:(BOOL)showsAccuracyRing opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
/// Create a Puck2DConfiguration instance with or without an arrow bearing image. Default without the arrow bearing image.
+ (TMBPuck2DConfiguration * _Nonnull)makeDefaultWithShowBearing:(BOOL)showBearing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBPuck2DConfigurationPulsingRadius : NSInteger;

/// The configration parameters for sonar-like pulsing circle animation shown around the 2D puck.
SWIFT_CLASS("_TtC13MapboxMapObjC29TMBPuck2DConfigurationPulsing")
@interface TMBPuck2DConfigurationPulsing : NSObject
/// Flag determining whether the pulsing circle animation. <code>true</code> by default.
@property (nonatomic) BOOL isEnabled;
/// The color of the pulsing circle.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The radius of the pulsing circle.
@property (nonatomic) enum TMBPuck2DConfigurationPulsingRadius radius;
@property (nonatomic) double radiusValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Circle radius configuration for the pulsing circle animation.
typedef SWIFT_ENUM(NSInteger, TMBPuck2DConfigurationPulsingRadius, open) {
/// Pulsing circle should animate with the constant radius.
  TMBPuck2DConfigurationPulsingRadiusConstant = 0,
/// Pulsing circle animates with the <code>horizontalAccuracy</code> form the latest puck location.
  TMBPuck2DConfigurationPulsingRadiusAccuracy = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck3DConfiguration")
@interface TMBPuck3DConfiguration : NSObject
/// The model to use as the locaiton puck
@property (nonatomic, strong) TMBModel * _Nonnull model;
/// The scale of the model.
@property (nonatomic, strong) TMBValue * _Nullable modelScale;
/// The rotation of the model in euler angles [lon, lat, z].
@property (nonatomic, strong) TMBValue * _Nullable modelRotation;
/// The opacity of the model used as the location puck
@property (nonatomic, strong) TMBValue * _Nullable modelOpacity;
/// Initialize a <code>Puck3DConfiguration</code> with a model, scale and rotation.
/// \param model The <code>gltf</code> model to use for the puck.
///
/// \param modelScale The amount to scale the model by.
///
/// \param modelRotation The rotation of the model in euler angles <code>[lon, lat, z]</code>.
///
/// \param modelOpacity The opacity of the model used as the location puck
///
- (nonnull instancetype)initWithModel:(TMBModel * _Nonnull)model modelScale:(TMBValue * _Nullable)modelScale modelRotation:(TMBValue * _Nullable)modelRotation modelOpacity:(TMBValue * _Nullable)modelOpacity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Controls how the puck is oriented
typedef SWIFT_ENUM(NSInteger, TMBPuckBearingSource, open) {
/// The puck should set its bearing using <code>heading: CLHeading</code>. Bearing will mimic user’s
/// spatial orientation.
  TMBPuckBearingSourceHeading = 0,
/// The puck should set its bearing using <code>course: CLLocationDirection</code>. Bearing will mimic
/// the general direction of travel.
  TMBPuckBearingSourceCourse = 1,
};

/// Represents the different types of pucks
typedef SWIFT_ENUM(NSInteger, TMBPuckType, open) {
/// A 2-dimensional puck. Optionally provide <code>Puck2DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck2D = 0,
/// A 3-dimensional puck. Provide a <code>Puck3DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck3D = 1,
};


/// A RGB-encoded raster DEM source
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster_dem">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBRasterDemSource")
@interface TMBRasterDemSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// The encoding used by this source. Mapbox Terrain RGB is used by default
@property (nonatomic, strong) NSNumber * _Nullable encoding;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Raster map textures such as satellite imagery.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBRasterLayer")
@interface TMBRasterLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Increase or reduce the brightness of the image. The value is the maximum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMax;
/// Transition options for <code>rasterBrightnessMax</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMaxTransition;
/// Increase or reduce the brightness of the image. The value is the minimum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMin;
/// Transition options for <code>rasterBrightnessMin</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMinTransition;
/// Increase or reduce the contrast of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterContrast;
/// Transition options for <code>rasterContrast</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterContrastTransition;
/// Fade duration when a new tile is added.
@property (nonatomic, strong) TMBValue * _Nullable rasterFadeDuration;
/// Rotates hues around the color wheel.
@property (nonatomic, strong) TMBValue * _Nullable rasterHueRotate;
/// Transition options for <code>rasterHueRotate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterHueRotateTransition;
/// The opacity at which the image will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable rasterOpacity;
/// Transition options for <code>rasterOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterOpacityTransition;
/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
@property (nonatomic, strong) TMBValue * _Nullable rasterResampling;
/// Increase or reduce the saturation of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterSaturation;
/// Transition options for <code>rasterSaturation</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterSaturationTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
typedef SWIFT_ENUM(NSInteger, TMBRasterResampling, open) {
/// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
  TMBRasterResamplingLinear = 0,
/// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
  TMBRasterResamplingNearest = 1,
};


/// A raster tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBRasterSource")
@interface TMBRasterSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) NSNumber * _Nullable scheme;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13MapboxMapObjC16TMBResolvedImage")
@interface TMBResolvedImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBResolvedImage (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name available:(BOOL)available SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBResolvedImageData")
@interface TMBResolvedImageData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Convenience class that manages a global <code>ResourceOptions</code>
/// It’s possible to create <code>ResourceOptionsManager</code> instances as you need them,
/// however it’s convenient to use the default object (<code>default</code>).
/// For example, we recommend that the Mapbox access token be set in
/// <code>application(_:didFinishLaunchingWithOptions:)</code> rather than relying on the
/// value in your application’s Info.plist:
/// \code
/// ```
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     // Override point for customization after application launch.
///     ResourceOptionsManager.default.resourceOptions.accessToken = "overridden-access-token"
///     return true
/// }
/// ```
///
/// \endcode
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBResourceOptionsManager")
@interface TMBResourceOptionsManager : NSObject
/// Default instance
/// This shared instance is used by the default initializers
/// for <code>ResourceOptions</code> and <code>MapInitOptions</code>.
/// The application’s Info.plist will be searched for a valid access token
/// under the key <code>MBXAccessToken</code>
/// A valid access token must be provided or found.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) TMBResourceOptionsManager * _Nonnull default_;)
+ (TMBResourceOptionsManager * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Convenience function to remove the default instance. Calling <code>default</code>
/// again will re-create the default instance.
+ (void)destroyDefault;
/// Return the current resource options.
@property (nonatomic, strong) MBMResourceOptions * _Nonnull resourceOptions;
/// Initializes a <code>ResourceOptionsManager</code> with an optional access token.
/// If the supplied token is nil (which is the case for the <code>default</code>) then
/// we will use appropriate defaults for the <code>ResourceOptions</code>, including
/// searching for an access token in the application’s Info.plist.
/// You can override the shared global access token, using
/// <code>ResourceOptionsManager.default</code>:
/// \code
/// ```
/// ResourceOptionsManager.default.resourceOptions.accessToken = "overridden-access-token"
/// ```
///
/// \endcode\param accessToken Valid access token or <code>nil</code>
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Initializes a <code>ResourceOptionsManager</code> with the specified <code>resourceOptions</code>.
/// \param resourceOptions Resource options to initialize the manager with.
///
- (nonnull instancetype)initWithResourceOptions:(MBMResourceOptions * _Nonnull)resourceOptions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Used to configure position, margin, and visibility for the map’s scale bar view.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBScaleBarViewOptions")
@interface TMBScaleBarViewOptions : NSObject
/// The position of the scale bar view.
/// The default value for this property is <code>.topLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the scale bar view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The visibility of the scale bar view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
typedef SWIFT_ENUM(NSInteger, TMBScheme, open) {
/// Slippy map tilenames scheme.
  TMBSchemeXyz = 0,
/// OSGeo spec scheme.
  TMBSchemeTms = 1,
};


/// A spherical dome around the map that is always rendered behind all other layers.
/// Warning: As of v10.6.0, <code>Atmosphere</code> is the preferred method for atmospheric styling. Sky layer is not supported by the globe projection, and will be phased out in future major release.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-sky">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBSkyLayer")
@interface TMBSkyLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereColor;
/// A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereHaloColor;
/// Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0 degree is directly above, at zenith, and 90 degree at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSun;
/// Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSunIntensity;
/// Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using <code>sky-radial-progress</code>. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, <code>sky-gradient-radius</code>] centered at the position specified by <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradient;
/// Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0 degree is directly above, at zenith, and 90 degree at the horizon.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientCenter;
/// The angular distance (measured in degrees) from <code>sky-gradient-center</code> up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientRadius;
/// The opacity of the entire sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyOpacity;
/// Transition options for <code>skyOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable skyOpacityTransition;
/// The type of the sky
@property (nonatomic, strong) TMBValue * _Nullable skyType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The type of the sky
typedef SWIFT_ENUM(NSInteger, TMBSkyType, open) {
/// Renders the sky with a gradient that can be configured with {@link SKY_GRADIENT_RADIUS} and {@link SKY_GRADIENT}.
  TMBSkyTypeGradient = 0,
/// Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through {@link SKY_ATMOSPHERE_SUN}.
  TMBSkyTypeAtmosphere = 1,
};



/// Information about a layer
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceInfo")
@interface TMBSourceInfo : NSObject
/// The identifier of the layer
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the layer
@property (nonatomic) enum TMBSourceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum of Source Types
/// Docs : https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/
typedef SWIFT_ENUM(NSInteger, TMBSourceType, open) {
/// A vector tile source.
  TMBSourceTypeVector = 0,
/// A raster tile source.
  TMBSourceTypeRaster = 1,
/// A raster DEM source.
  TMBSourceTypeRasterDem = 2,
/// A GeoJSON source.
  TMBSourceTypeGeoJson = 3,
/// An image source.
  TMBSourceTypeImage = 4,
/// A model source
  TMBSourceTypeModel = 5,
};

@class MBMStyleManager;
@class MBMTransitionOptions;
@protocol MBMCustomLayerHost;
@class MBMStylePropertyValue;
@class MBMImageStretches;
@class MBMImageContent;
@class TMBTerrain;
@class MBMCustomGeometrySourceOptions;
@class MBMCanonicalTileID;

/// Style provides access to the APIs used to dynamically modify the map’s style. Use it
/// to read and write layers, sources, and images. Obtain the Style instance for a MapView
/// via MapView.mapboxMap.style.
/// important:
/// Style should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBStyle")
@interface TMBStyle : NSObject
@property (nonatomic, readonly, weak) MBMStyleManager * _Null_unspecified styleManager;
/// Adds a <code>layer</code> to the map
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the given <code>layer</code> at the given <code>position</code>.
- (void)addLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a  persistent <code>layer</code> to the map.
/// Persistent layers are valid across <code>style</code> changes.
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the persistent layer.
- (void)addPersistentLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Moves a <code>layer</code> to a new layer position in the style.
/// \param layerId The layer to move
///
/// \param position Position to move the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> on failure, or <code>NSError</code> with a _domain of “com.mapbox.bindgen”
- (void)moveLayerWithId:(NSString * _Nonnull)id to:(TMBLayerPosition * _Nonnull)position completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets a <code>layer</code> from the map
/// \param id The id of the layer to be fetched
///
/// \param type The type of the layer that will be fetched
///
///
/// throws:
/// <code>TypeConversionError</code> is there is a problem decoding the layer data to the given <code>type</code>.
///
/// returns:
/// The fully formed <code>layer</code> object of type equal to <code>type</code>
- (void)layerWithId:(NSString * _Nonnull)id type:(enum TMBLayerType)type completion:(void (^ _Nullable)(id <TMBLayer> _Nullable, NSError * _Nullable))completion;
/// Gets a <code>layer</code> from the map.
/// This function is useful if you do not know the concrete type of the layer
/// you are fetching, or don’t need to know for your situation.
/// \param layerID The id of the layer to be fetched
///
///
/// throws:
/// Type conversion errors
///
/// returns:
/// The fully formed <code>layer</code> object.
- (void)layerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(id <TMBLayer> _Nullable, NSError * _Nullable))completion;
/// Updates a <code>layer</code> that exists in the <code>style</code> already
/// \param id identifier of layer to update
///
/// \param type Type of the layer
///
/// \param update Closure that mutates a layer passed to it
///
///
/// throws:
/// An error when executing <code>update</code> block.
- (void)updateLayerWithId:(NSString * _Nonnull)id type:(enum TMBLayerType)type update:(SWIFT_NOESCAPE id <TMBLayer> _Nonnull (^ _Nonnull)(id <TMBLayer> _Nonnull))update completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a <code>source</code> to the map
/// \param source The source to add to the map.
///
/// \param identifier A unique source identifier.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the <code>source</code>.
- (void)addSource:(id <TMBSource> _Nonnull)source id:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)addSourceWithId:(NSString * _Nonnull)id geometry:(MBXGeometry * _Nonnull)geometry completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves a <code>source</code> from the map
/// \param id The id of the source to retrieve
///
/// \param type The type of the source
///
///
/// throws:
/// <code>TypeConversionError</code> if there is a problem decoding the source data to the given <code>type</code>.
///
/// returns:
/// The fully formed <code>source</code> object of type equal to <code>type</code>.
- (void)sourceWithId:(NSString * _Nonnull)id type:(enum TMBSourceType)type completion:(void (^ _Nullable)(id <TMBSource> _Nullable, NSError * _Nullable))completion;
/// Retrieves a <code>source</code> from the map
/// This function is useful if you do not know the concrete type of the source
/// you are fetching, or don’t need to know for your situation.
/// \param id The id of the <code>source</code> to retrieve.
///
///
/// throws:
/// <code>TypeConversionError</code> if there is a problem decoding the source of given <code>id</code>.
///
/// returns:
/// The fully formed <code>source</code> object.
- (void)sourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(id <TMBSource> _Nullable, NSError * _Nullable))completion;
/// Updates the <code>data</code> property of a given <code>GeoJSONSource</code> with a new value
/// conforming to the <code>GeoJSONObject</code> protocol.
/// attention:
/// This method is only effective with sources of <code>GeoJSONSource</code>
/// type, and cannot be used to update other source types.
/// \param id The identifier representing the GeoJSON source.
///
/// \param geoJSON The new GeoJSON to be associated with the source data. i.e.
/// a feature or feature collection.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem when updating GeoJSON source.
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geometry:(MBXGeometry * _Nonnull)geometry completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <code>true</code> if and only if the style JSON contents, the style specified sprite,
/// and sources are all loaded, otherwise returns <code>false</code>.
@property (nonatomic, readonly) BOOL isLoaded;
/// Get or set the style URI
/// Setting a new style is asynchronous. In order to get the result of this
/// operation, listen to <code>MapEvents.styleDataLoaded</code>, <code>MapEvents.styleLoaded</code>.
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, copy) NSString * _Nullable uri;
/// Get or set the style via a JSON serialization string
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, copy) NSString * _Nonnull JSON;
/// The map <code>style</code>’s default camera, if any, or a default camera otherwise.
/// The map <code>style</code> default camera is defined as follows:
/// <ul>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-center">center</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-zoom">zoom</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-bearing">bearing</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-pitch">pitch</a>
///   </li>
/// </ul>
/// The <code>style</code> default camera is re-evaluated when a new <code>style</code> is loaded. Values default to 0.0 if they are not defined in the <code>style</code>.
@property (nonatomic, readonly, strong) MBMCameraOptions * _Nonnull defaultCamera;
/// Get or set the map <code>style</code>’s transition options.
/// By default, the style parser will attempt to read the style default
/// transition, if any, falling back to a 0.3 s transition otherwise.
/// Overridden transitions are reset once a new style has been loaded.
/// To customize the transition used when switching styles, set this
/// property after <code>MapEvents.EventKind.styleDataLoaded</code> where
/// <code>Event.type == "style"</code> and before
/// <code>MapEvents.EventKind.styleDataLoaded</code> where <code>Event.type == "sprite"</code>
/// and where <code>Event.type == "sources"</code>.
/// seealso:
/// <code>MapboxMap/onNext(_:handler:)</code>
@property (nonatomic, strong) MBMTransitionOptions * _Nonnull transition;
/// Adds a new style layer given its JSON properties
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param properties A JSON dictionary of style layer properties.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new persistent style layer given its JSON properties
/// Persistent style layers remain valid across style reloads.
/// \param properties A JSON dictionary of style layer properties
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful
- (void)addPersistentLayerWith:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Returns <code>true</code> if the id passed in is associated to a persistent layer
/// \param id The layer identifier to test
///
- (void)isPersistentLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
/// Adds a new persistent style custom layer.
/// Persistent style layers are valid across style reloads.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addPersistentCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style custom layer.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style layer
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Identifier of the style layer to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style layer exists.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Style layer identifier.
///
///
/// returns:
/// <code>true</code> if the given style layer exists, <code>false</code> otherwise.
- (BOOL)layerExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style layers’ identifiers and types
@property (nonatomic, readonly, copy) NSArray<TMBLayerInfo *> * _Nonnull allLayerIdentifiers;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (id _Nonnull)layerPropertyValueFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (MBMStylePropertyValue * _Nonnull)layerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a JSON value to a style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
/// \param value Style layer property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style layer property.
/// \param layerType Style layer type.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The default value of the property for the layers with type layerType.
+ (MBMStylePropertyValue * _Nonnull)layerPropertyDefaultValueFor:(enum TMBLayerType)layerType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the properties for a style layer.
/// \param layerId layer id.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)layerPropertiesFor:(NSString * _Nonnull)layerId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style layer properties.
/// This method can be used to perform batch update for a style layer properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/">format for a corresponding layer type</a>.
/// Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#id">layer identifier</a>
/// and/or <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#type">layer type</a>
/// is not allowed.
/// \param layerId Style layer identifier.
///
/// \param properties JSON dictionary representing the updated layer properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertiesFor:(NSString * _Nonnull)layerId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources
///   </li>
/// </ul>
/// \param id An identifier for the style source.
///
/// \param properties A JSON dictionary of style source properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style source.
/// \param id Identifier of the style source to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeSourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style source exists.
/// \param id Style source identifier.
///
///
/// returns:
/// <code>true</code> if the given source exists, <code>false</code> otherwise.
- (BOOL)sourceExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style sources’ identifiers and types. Identifiers for custom vector
/// sources will not be included
@property (nonatomic, readonly, copy) NSArray<TMBSourceInfo *> * _Nonnull allSourceIdentifiers;
/// Gets the value of style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
///
/// returns:
/// The value of the property in the source with sourceId.
- (MBMStylePropertyValue * _Nonnull)sourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a value to a style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
/// \param value Style source property value (JSON value)
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets style source properties.
/// \param sourceId Style source identifier
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)sourcePropertiesFor:(NSString * _Nonnull)sourceId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style source properties.
/// This method can be used to perform batch update for a style source properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/">format</a> for a
/// corresponding source type. Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#type">source type</a>
/// is not allowed.
/// \param sourceId Style source identifier
///
/// \param properties A JSON dictionary of Style source properties
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertiesFor:(NSString * _Nonnull)sourceId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style source property.
/// \param sourceType Style source type.
///
/// \param property Style source property name.
///
///
/// returns:
///
/// The default value for the named property for the sources with type sourceType.
+ (MBMStylePropertyValue * _Nonnull)sourcePropertyDefaultValueFor:(NSString * _Nonnull)sourceType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Updates the image of an image style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image
///   </li>
/// </ul>
/// \param id Style source identifier.
///
/// \param image UIImage
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)updateImageSourceWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// This API can also be used for
/// updating an image. If the image id was already added, it gets replaced
/// by the new image.
/// The image can be used in
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-image"><code>icon-image</code></a>,
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-fill-fill-pattern"><code>fill-pattern</code></a>, and
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-line-line-pattern"><code>line-pattern</code></a>.
/// For more information on how <code>stretchX</code> and <code>stretchY</code> parameters affect image stretching
/// see <a href="https://docs.mapbox.com/mapbox-gl-js/example/add-image-stretchable">this Mapbox GL-JS example</a>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param stretchX An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched horizontally.
///
/// \param stretchY An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched vertically.
///
/// \param content An array of four numbers, with the first two specifying the
/// left, top corner, and the last two specifying the right, bottom
/// corner. If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf stretchX:(NSArray<MBMImageStretches *> * _Nonnull)stretchX stretchY:(NSArray<MBMImageStretches *> * _Nonnull)stretchY content:(MBMImageContent * _Nullable)content completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// If the image has non-zero <code>UIImage.capInsets</code> it will be stretched accordingly,
/// regardless of the value in <code>UIImage.resizingMode</code>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param contentInsets The distances the edges of content are inset from the image rectangle.
/// If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an image from the style.
/// \param id ID of the image to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether an image exists.
/// \param id The identifier of the image.
///
///
/// returns:
/// <code>true</code> if the given image exists, <code>false</code> otherwise.
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Get an image from the style.
/// \param id ID of the image.
///
///
/// returns:
/// UIImage representing the data associated with the given ID,
/// or nil if no image is associated with that ID.
- (UIImage * _Nullable)imageWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Sets a light on the style.
/// \param light The <code>Light</code> that should be applied.
///
///
/// throws:
/// An error describing why the operation was unsuccessful.
- (void)setLight:(TMBLight * _Nonnull)light completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the style global light source properties.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#light
///   </li>
/// </ul>
/// \param properties A dictionary of style light properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLightWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to the style light property.
/// \param property Style light property name.
///
/// \param value Style light property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLightProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style light property.
/// \param property Style light property name.
///
///
/// returns:
/// Style light property value.
- (id _Nonnull)lightProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of a style light property.
/// \param property Style light property name.
///
///
/// returns:
/// Style light property value.
- (MBMStylePropertyValue * _Nonnull)lightStylePropertyValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a terrain on the style
/// \param terrain The <code>Terrain</code> that should be rendered
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrain:(TMBTerrain * _Nonnull)terrain completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes terrain from style if it was set.
- (void)removeTerrain;
/// Sets the style global terrain source properties.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#terrain
///   </li>
/// </ul>
/// \param properties A dictionary of style terrain properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to the named style terrain property.
/// \param property Style terrain property name.
///
/// \param value Style terrain property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (id _Nonnull)terrainProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (MBMStylePropertyValue * _Nonnull)terrainStylePropertyValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Set the atmosphere of the style
/// \param atmosphere <code>Atmosphere</code> object describing the fog, space and stars.
///
- (void)setAtmosphere:(TMBAtmosphere * _Nonnull)atmosphere completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Remove the atmosphere of the style. No fog, space or stars would be rendered.
- (void)removeAtmosphereWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set an explicit atmosphere properties
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param properties A dictionary of style fog (aka atmosphere) properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// returns:
/// Style atmosphere property value.
- (MBMStylePropertyValue * _Nonnull)atmosphereProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Adds a custom geometry to be used in the style.
/// To add the data, implement the fetchTileFunction callback in the options
/// and call <code>setCustomGeometrySourceTileData</code>.
/// \param id Style source identifier
///
/// \param options Settings for the custom geometry
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomGeometrySourceWithId:(NSString * _Nonnull)id options:(MBMCustomGeometrySourceOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set tile data of a custom geometry.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
/// \param features An array of features to add
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setCustomGeometrySourceTileDataForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId features:(NSArray<MBXFeature *> * _Nonnull)features completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate tile for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceTileForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate region for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param bounds Coordinate bounds.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceRegionForSourceId:(NSString * _Nonnull)sourceId bounds:(MBMCoordinateBounds * _Nonnull)bounds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBStyle (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addGeoJSONSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
@end

@class TMBStyleProjection;

@interface TMBStyle (SWIFT_EXTENSION(MapboxMapObjC))
/// Sets the projection.
/// \param projection The <code>StyleProjection</code> to apply to the style.
///
///
/// throws:
/// <code>StyleError</code> if the projection could not be applied.
- (void)setProjection:(TMBStyleProjection * _Nonnull)projection completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// The current projection.
@property (nonatomic, readonly, strong) TMBStyleProjection * _Nonnull projection;
@end


/// Describes the projection used to render the map.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleProjection")
@interface TMBStyleProjection : NSObject
/// The name of the projection.
@property (nonatomic) enum TMBStyleProjectionName name;
/// Initializes a projection
- (nonnull instancetype)initWithName:(enum TMBStyleProjectionName)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The name of the projection to be used for rendering the map.
typedef SWIFT_ENUM(NSInteger, TMBStyleProjectionName, open) {
/// The Mercator projection is the default projection.
  TMBStyleProjectionNameMercator = 0,
/// A globe projection.
  TMBStyleProjectionNameGlobe = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleTransition")
@interface TMBStyleTransition : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic) double duration;
/// Length of time before a transition begins in seconds.
@property (nonatomic) double delay;
- (nonnull instancetype)initWithDuration:(double)duration delay:(double)delay OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleTransition * _Nonnull zero;)
+ (TMBStyleTransition * _Nonnull)zero SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An icon or a text label.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-symbol">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBSymbolLayer")
@interface TMBSymbolLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable iconAllowOverlap;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable iconAnchor;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) TMBValue * _Nullable iconIgnorePlacement;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, strong) TMBValue * _Nullable iconImage;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable iconKeepUpright;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, strong) TMBValue * _Nullable iconOffset;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) TMBValue * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable iconPitchAlignment;
/// Rotates the icon clockwise.
@property (nonatomic, strong) TMBValue * _Nullable iconRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBValue * _Nullable iconRotationAlignment;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) TMBValue * _Nullable iconSize;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) TMBValue * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBValue * _Nullable symbolPlacement;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable symbolSortKey;
/// Distance between two symbol anchors.
@property (nonatomic, strong) TMBValue * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBValue * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable textAllowOverlap;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Font stack to use for displaying text.
@property (nonatomic, strong) TMBValue * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) TMBValue * _Nullable textIgnorePlacement;
/// Text justification options.
@property (nonatomic, strong) TMBValue * _Nullable textJustify;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable textKeepUpright;
/// Text tracking amount.
@property (nonatomic, strong) TMBValue * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) TMBValue * _Nullable textLineHeight;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) TMBValue * _Nullable textMaxAngle;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) TMBValue * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, strong) TMBValue * _Nullable textOffset;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) TMBValue * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable textPitchAlignment;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) TMBValue * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) TMBValue * _Nullable textRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBValue * _Nullable textRotationAlignment;
/// Font size.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBValue * _Nullable textTransform;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, strong) TMBValue * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, strong) TMBValue * _Nullable textWritingMode;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconColor;
/// Transition options for <code>iconColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconColorTransition;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloBlur;
/// Transition options for <code>iconHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloBlurTransition;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloColor;
/// Transition options for <code>iconHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloColorTransition;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloWidth;
/// Transition options for <code>iconHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloWidthTransition;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable iconOpacity;
/// Transition options for <code>iconOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconOpacityTransition;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslate;
/// Transition options for <code>iconTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconTranslateTransition;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslateAnchor;
/// The color with which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// Transition options for <code>textColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textColorTransition;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable textHaloBlur;
/// Transition options for <code>textHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloBlurTransition;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) TMBValue * _Nullable textHaloColor;
/// Transition options for <code>textHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloColorTransition;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) TMBValue * _Nullable textHaloWidth;
/// Transition options for <code>textHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloWidthTransition;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textOpacity;
/// Transition options for <code>textOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textOpacityTransition;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable textTranslate;
/// Transition options for <code>textTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textTranslateTransition;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable textTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Label placement relative to its geometry.
typedef SWIFT_ENUM(NSInteger, TMBSymbolPlacement, open) {
/// The label is placed at the point where the geometry is located.
  TMBSymbolPlacementPoint = 0,
/// The label is placed along the line of the geometry. Can only be used on LineString and Polygon geometries.
  TMBSymbolPlacementLine = 1,
/// The label is placed at the center of the line of the geometry. Can only be used on LineString and Polygon geometries. Note that a single feature in a vector tile may contain multiple line geometries.
  TMBSymbolPlacementLineCenter = 2,
};

/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
typedef SWIFT_ENUM(NSInteger, TMBSymbolZOrder, open) {
/// Sorts symbols by symbol sort key if set. Otherwise, sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
  TMBSymbolZOrderAuto = 0,
/// Sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
  TMBSymbolZOrderViewportY = 1,
/// Sorts symbols by symbol sort key if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
  TMBSymbolZOrderSource = 2,
};


/// The global terrain source.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#terrain">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBTerrain")
@interface TMBTerrain : NSObject
- (nonnull instancetype)initWithSourceId:(NSString * _Nonnull)sourceId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, strong) TMBValue * _Nullable exaggeration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Part of the text placed closest to the anchor.
typedef SWIFT_ENUM(NSInteger, TMBTextAnchor, open) {
/// The center of the text is placed closest to the anchor.
  TMBTextAnchorCenter = 0,
/// The left side of the text is placed closest to the anchor.
  TMBTextAnchorLeft = 1,
/// The right side of the text is placed closest to the anchor.
  TMBTextAnchorRight = 2,
/// The top of the text is placed closest to the anchor.
  TMBTextAnchorTop = 3,
/// The bottom of the text is placed closest to the anchor.
  TMBTextAnchorBottom = 4,
/// The top left corner of the text is placed closest to the anchor.
  TMBTextAnchorTopLeft = 5,
/// The top right corner of the text is placed closest to the anchor.
  TMBTextAnchorTopRight = 6,
/// The bottom left corner of the text is placed closest to the anchor.
  TMBTextAnchorBottomLeft = 7,
/// The bottom right corner of the text is placed closest to the anchor.
  TMBTextAnchorBottomRight = 8,
};

/// Text justification options.
typedef SWIFT_ENUM(NSInteger, TMBTextJustify, open) {
/// The text is aligned towards the anchor position.
  TMBTextJustifyAuto = 0,
/// The text is aligned to the left.
  TMBTextJustifyLeft = 1,
/// The text is centered.
  TMBTextJustifyCenter = 2,
/// The text is aligned to the right.
  TMBTextJustifyRight = 3,
};

/// Orientation of text when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBTextPitchAlignment, open) {
/// The text is aligned to the plane of the map.
  TMBTextPitchAlignmentMap = 0,
/// The text is aligned to the plane of the viewport.
  TMBTextPitchAlignmentViewport = 1,
/// Automatically matches the value of {@link TEXT_ROTATION_ALIGNMENT}.
  TMBTextPitchAlignmentAuto = 2,
};

/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
typedef SWIFT_ENUM(NSInteger, TMBTextRotationAlignment, open) {
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns text east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns text x-axes with the line.
  TMBTextRotationAlignmentMap = 0,
/// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
  TMBTextRotationAlignmentViewport = 1,
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_MAP}.
  TMBTextRotationAlignmentAuto = 2,
};

/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
typedef SWIFT_ENUM(NSInteger, TMBTextTransform, open) {
/// The text is not altered.
  TMBTextTransformNone = 0,
/// Forces all letters to be displayed in uppercase.
  TMBTextTransformUppercase = 1,
/// Forces all letters to be displayed in lowercase.
  TMBTextTransformLowercase = 2,
};

/// Controls the frame of reference for <code>text-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBTextTranslateAnchor, open) {
/// The text is translated relative to the map.
  TMBTextTranslateAnchorMap = 0,
/// The text is translated relative to the viewport.
  TMBTextTranslateAnchorViewport = 1,
};

/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
typedef SWIFT_ENUM(NSInteger, TMBTextWritingMode, open) {
/// If a text’s language supports horizontal writing mode, symbols would be laid out horizontally.
  TMBTextWritingModeHorizontal = 0,
/// If a text’s language supports vertical writing mode, symbols would be laid out vertically.
  TMBTextWritingModeVertical = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBValue")
@interface TMBValue : NSObject
- (nonnull instancetype)initWithConstant:(id _Nullable)constant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpression:(TMBExpression * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
+ (TMBValue * _Nonnull)constant:(NSObject * _Nonnull)constant SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)intValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)doubleValue:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)expression:(TMBExpression * _Nonnull)expression SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchScale:(enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)layerType:(enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circleTranslateAnchor:(enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillExtrusionTranslateAnchor:(enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchAlignment:(enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTranslateAnchor:(enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)rasterResampling:(enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)hillshadeIlluminationAnchor:(enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)skyType:(enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)anchor:(enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)styleProjectionName:(enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textWritingMode:(enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTranslateAnchor:(enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineTranslateAnchor:(enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillTranslateAnchor:(enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end



@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textRotationAlignment:(enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textPitchAlignment:(enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)encoding:(enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textJustify:(enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)expressionOperator:(enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)scheme:(enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textAnchor:(enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)visibility:(enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineCap:(enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolZOrder:(enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineJoin:(enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolPlacement:(enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconAnchor:(enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTextFit:(enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)sourceType:(enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconPitchAlignment:(enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconRotationAlignment:(enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTransform:(enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
@end




































/// A vector tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#vector">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBVectorSource")
@interface TMBVectorSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) NSNumber * _Nullable scheme;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>. If specified as a string for a vector tile source, the same property is used across all its source layers. If specified as an object only specified source layers will have id overriden, others will fallback to original feature id
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class MBMViewAnnotationOptions;
@protocol TMBViewAnnotationUpdateObserver;

SWIFT_CLASS("_TtC13MapboxMapObjC24TMBViewAnnotationManager")
@interface TMBViewAnnotationManager : NSObject
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForAnnotationId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForAnnotationFeatureId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationFeatureId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)addWithViewAnnotation:(UIView * _Nonnull)viewAnnotation id:(NSString * _Nullable)id options:(MBMViewAnnotationOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)updateWithViewAnnotation:(UIView * _Nonnull)viewAnnotation options:(MBMViewAnnotationOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeWithViewAnnotation:(UIView * _Nonnull)viewAnnotation;
- (void)removeAllViewAnnotations;
/// Add an observer for annotation views updates
/// Observers are held strongly.
/// \param observer The object to notify when updates occur.
///
- (void)addViewAnnotationUpdateObserver:(id <TMBViewAnnotationUpdateObserver> _Nonnull)observer;
/// Remove an observer for annotation views updates.
/// \param observer The object to stop sending notifications to.
///
- (void)removeViewAnnotationUpdateObserver:(id <TMBViewAnnotationUpdateObserver> _Nonnull)observer;
/// Calculates <code>CameraOptions</code> to fit the list of view annotations.
/// important:
/// This API isn’t supported by Globe projection.
/// \param ids The list of annotations ids to be framed.
///
/// \param padding See <code>CameraOptions/padding</code>.
///
/// \param bearing See <code>CameraOptions/bearing</code>.
///
/// \param pitch See <code>CameraOptions/pitch</code>.
///
- (MBMCameraOptions * _Nullable)cameraForAnnotations:(NSArray<NSString *> * _Nonnull)identifiers padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBViewAnnotationManagerError, open) {
  TMBViewAnnotationManagerErrorViewIsAlreadyAdded = 0,
  TMBViewAnnotationManagerErrorAssociatedFeatureIdIsAlreadyInUse = 1,
  TMBViewAnnotationManagerErrorAnnotationNotFound = 2,
  TMBViewAnnotationManagerErrorGeometryFieldMissing = 3,
};


/// An interface you use to detect when the map view lays out or updates visibility of annotation views.
/// When visible portion of a map changes, e.g. responding to the user interaction, the map view adjusts the positions and visibility of its annotation views.
/// Implement methods of <code>ViewAnnotationUpdateObserver</code> to detect when the map view updates position/size for supplied annotation views.
/// As well as when annotation views get show/hidden when going in/out of visible portion of the map.
/// To register an observer for view annotation updates, call the <code>ViewAnnotationManager/addViewAnnotationUpdateObserver(_:)</code> method.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC31TMBViewAnnotationUpdateObserver_")
@protocol TMBViewAnnotationUpdateObserver
/// Tells the observer that the frames of the annotation views changed.
/// \param annotationViews The annotation views whose frames changed.
///
- (void)framesDidChangeFor:(NSArray<UIView *> * _Nonnull)annotationViews;
/// Tells the observer that the visibility of the annotation views changed.
/// Use <code>isHidden</code> property to determine whether a view is visible or not.
/// \param annotationsViews The annotation vies whose visibility changed.
///
- (void)visibilityDidChangeFor:(NSArray<UIView *> * _Nonnull)annotationViews;
@end

@class TMBViewportOptions;
@class TMBViewportStatus;
@protocol TMBViewportStatusObserver;

/// <code>Viewport</code> provides a structured approach to organizing camera management logic into states and
/// transitions between them.
/// At any given time, the viewport is either:
/// <ul>
///   <li>
///     idle (not updating the camera)
///   </li>
///   <li>
///     in a state (camera is being managed by a <code>ViewportState</code>)
///   </li>
///   <li>
///     transitioning (camera is being managed by a <code>ViewportTransition</code>)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBViewport")
@interface TMBViewport : NSObject
/// Configuration options for adjusting the viewport’s behavior.
@property (nonatomic, strong) TMBViewportOptions * _Nonnull options;
/// The current <code>ViewportStatus</code>.
/// <code>status</code> cannot be set directly. Use
/// <code>Viewport/transition(to:transition:completion:)</code> and <code>Viewport/idle()</code> to
/// transition to a state or to idle.
/// Defaults to <code>ViewportStatus/idle</code>.
/// seealso:
///
/// <ul>
///   <li>
///     <code>Viewport/addStatusObserver(_:)</code>
///   </li>
///   <li>
///     <code>Viewport/removeStatusObserver(_:)</code>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) TMBViewportStatus * _Nonnull status;
/// Subscribes a <code>ViewportStatusObserver</code> to <code>Viewport/status</code> changes.
/// Viewport keeps a strong reference to registered observers. Adding the same observer again while it is already subscribed has no effect.
/// note:
/// Observers are notified of status changes asynchronously on the main queue. This means that by
/// the time the notification is delivered, the status may have already changed again. This behavior is necessary to allow
/// observers to trigger further transitions while avoiding out-of-order delivery of status changed notifications.
/// seealso:
/// <code>Viewport/removeStatusObserver(_:)</code>
/// \param observer An object that will be notified when the <code>Viewport/status</code> changes.
///
- (void)addStatusObserver:(id <TMBViewportStatusObserver> _Nonnull)observer;
/// Unsubscribes a <code>ViewportStatusObserver</code> from <code>Viewport/status</code> changes. This causes viewport
/// to release its strong reference to the observer. Removing an observer that is not subscribed has no effect.
/// seealso:
/// <code>Viewport/addStatusObserver(_:)</code>
/// \param observer An object that should no longer be notified when the <code>Viewport/status</code> changes.
///
- (void)removeStatusObserver:(id <TMBViewportStatusObserver> _Nonnull)observer;
/// Sets <code>Viewport/status</code> to <code>ViewportStatus/idle</code> synchronously.
/// This cancels any active <code>ViewportState</code> or <code>ViewportTransition</code>.
- (void)idle;
/// Executes a transition to the requested state.
/// If the transition fails, <code>Viewport/status</code> is set to <code>ViewportStatus/idle</code>.
/// Transitioning to state <code>x</code> when the status is <code>.state(x)</code> invokes <code>completion</code>
/// synchronously with <code>true</code> and does not modify <code>Viewport/status</code>.
/// Transitioning to state <code>x</code> when the status is <code>.transition(_, x)</code> invokes <code>completion</code>
/// synchronously with <code>false</code> and does not modify <code>Viewport/status</code>.
/// <code>Viewport</code> keeps a strong reference to active transitions and states. To reuse states and transitions,
/// keep strong references to them in the consuming project.
/// \param toState The target <code>ViewportState</code> to transition to.
///
/// \param transition The <code>ViewportTransition</code> that is used to transition to the target state.
/// If <code>nil</code>, <code>Viewport/defaultTransition</code> is used. Defaults to <code>nil</code>.
///
/// \param completion A closure that is invoked when the transition ends. Defaults to <code>nil</code>.
///
/// \param success Whether the transition ran to completion. Transitions may end early if they fail or
/// are interrupted (e.g. by another call to
/// <code>transition(to:transition:completion:)</code> or <code>Viewport/idle()</code>)
///
- (void)transitionTo:(id <TMBViewportState> _Nonnull)toState transition:(id <TMBViewportTransition> _Nullable)transition completion:(void (^ _Nullable)(BOOL))completion;
/// <code>Viewport/transition(to:transition:completion:)</code> uses this transition unless
/// some non-nil value is passed to its <code>transition</code> argument.
/// Defaults to <code>DefaultViewportTransition</code> with default options.
@property (nonatomic, strong) id <TMBViewportTransition> _Nonnull defaultTransition;
/// Creates a new instance of <code>FollowPuckViewportState</code> with the specified options.
/// \param options configuration options used when creating <code>FollowPuckViewportState</code>. Defaults to
/// <code>FollowPuckViewportStateOptions/init(padding:zoom:bearing:pitch:animationDuration:)</code>
/// with the default value specified for all parameters.
///
///
/// returns:
/// The newly-created <code>FollowPuckViewportState</code>.
- (TMBFollowPuckViewportState * _Nonnull)makeFollowPuckViewportStateWithOptions:(TMBFollowPuckViewportStateOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>OverviewViewportState</code> with the specified options.
/// \param options configuration options used when creating <code>OverviewViewportState</code>.
///
///
/// returns:
/// The newly-created <code>OverviewViewportState</code>.
- (TMBOverviewViewportState * _Nonnull)makeOverviewViewportStateWithOptions:(TMBOverviewViewportStateOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>DefaultViewportTransition</code>.
/// \param options configuration options used when creating <code>DefaultViewportTransition</code>. Defaults to
/// <code>DefaultViewportTransitionOptions/init(maxDuration:)</code> with the default value specified for all parameters
///
///
/// returns:
/// The newly-created <code>DefaultViewportTransition</code>.
- (TMBDefaultViewportTransition * _Nonnull)makeDefaultViewportTransitionWithOptions:(TMBDefaultViewportTransitionOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>ImmediateViewportTransition</code>.
///
/// returns:
/// The newly-created <code>ImmediateViewportTransition</code>.
- (TMBImmediateViewportTransition * _Nonnull)makeImmediateViewportTransition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuraton options for <code>Viewport</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBViewportOptions")
@interface TMBViewportOptions : NSObject
/// Indicates whether the <code>Viewport</code> should idle when the <code>MapView</code>
/// receives touch input.
/// Set this property to <code>false</code> to enable building custom <code>ViewportState</code>s that
/// can work simultaneously with certain types of gestures.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL transitionsToIdleUponUserInteraction;
/// Initializes <code>ViewportOptions</code>.
/// \param transitionsToIdleUponUserInteraction Defaults to <code>true</code>.
///
- (nonnull instancetype)initWithTransitionsToIdleUponUserInteraction:(BOOL)transitionsToIdleUponUserInteraction OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>ViewportStatus</code> contains 3 cases that express what the <code>Viewport</code> is doing at any given time.
/// The <code>ViewportStatus/state(_:)</code> and <code>ViewportStatus/transition(_:toState:)</code>
/// cases have associated values that are reference types, so equality and hash are implemented in terms of
/// the identities of those objects.
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBViewportStatus")
@interface TMBViewportStatus : NSObject
/// The <code>idle</code> status indicates that <code>Viewport</code> is inactive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBViewportStatus * _Nonnull idle;)
+ (TMBViewportStatus * _Nonnull)idle SWIFT_WARN_UNUSED_RESULT;
/// The <code>state(_:)</code> status indicates that <code>Viewport</code> is running the associated value <code>state</code>.
+ (TMBViewportStatus * _Nonnull)state:(id <TMBViewportState> _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
/// The <code>transition(_:toState:)</code> status indicates that <code>Viewport</code> is running <code>transition</code>
/// and will start running <code>toState</code> upon success.
+ (TMBViewportStatus * _Nonnull)transition:(id <TMBViewportTransition> _Nonnull)transition toState:(id <TMBViewportState> _Nonnull)toState SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Constants that describe why <code>Viewport/status</code> changed.
SWIFT_CLASS("_TtC13MapboxMapObjC29TMBViewportStatusChangeReason")
@interface TMBViewportStatusChangeReason : NSObject <NamedString>
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>ViewportStatusObserver</code> must be implemented by objects that wish to register
/// themselves using <code>Viewport/addStatusObserver(_:)</code> so that they can observe
/// <code>Viewport/status</code> changes.
/// seealso:
/// <code>Viewport/addStatusObserver(_:)</code> for an important note about how
/// these notifications are delivered asynchronously.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC25TMBViewportStatusObserver_")
@protocol TMBViewportStatusObserver
/// Called whenever <code>Viewport/status</code> changes.
/// \param fromStatus The value of <code>Viewport/status</code> prior to the change.
///
/// \param toStatus The value of <code>Viewport/status</code> after the change.
///
/// \param reason A <code>ViewportStatusChangeReason</code> that indicates what initiated the change.
///
- (void)viewportStatusDidChangeFrom:(TMBViewportStatus * _Nonnull)fromStatus to:(TMBViewportStatus * _Nonnull)toStatus reason:(TMBViewportStatusChangeReason * _Nonnull)reason;
@end


typedef SWIFT_ENUM(NSInteger, TMBVisibility, open) {
/// The layer is shown.
  TMBVisibilityVisible = 0,
/// The layer is not shown.
  TMBVisibilityNone = 1,
};

@class MBXTileRegionLoadOptions;
@class MBXTileRegion;

@interface MBXTileStore (SWIFT_EXTENSION(MapboxMapObjC))
+ (MBXTileStore * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
- (TMBCancelable * _Nonnull)loadTileRegionForId:(NSString * _Nonnull)id loadOptions:(MBXTileRegionLoadOptions * _Nonnull)loadOptions progress:(MBXTileRegionLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
- (void)allTileRegions:(void (^ _Nonnull)(NSArray<MBXTileRegion *> * _Nullable, NSError * _Nullable))completion;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MAPBOXMAPOBJC_SWIFT_H
#define MAPBOXMAPOBJC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapboxCommon;
@import MapboxCoreMaps;
@import MapboxMaps;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxMapObjC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MapboxMapObjC13BuiltInStyles")
@interface BuiltInStyles : NSObject
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull streets;)
+ (NSString * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull outdoors;)
+ (NSString * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light;)
+ (NSString * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dark;)
+ (NSString * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satellite;)
+ (NSString * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satelliteStreets;)
+ (NSString * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










@class NSValue;
@class MBXGeometry;

SWIFT_CLASS("_TtC13MapboxMapObjC14GeometryHelper")
@interface GeometryHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MBXGeometry * _Nonnull)createPoint:(NSValue * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createLine:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiLine:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPoint:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPolygon:(NSArray<NSArray<NSArray<NSValue *> *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createPolygon:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)create:(NSArray<MBXGeometry *> * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMResourceOptions;
@class MBMMapOptions;
@class MBMCameraOptions;

@interface MapInitOptions (SWIFT_EXTENSION(MapboxMapObjC))
/// Associated <code>ResourceOptions</code>
- (MBMResourceOptions * _Nonnull)getResourceOptions SWIFT_WARN_UNUSED_RESULT;
/// Associated <code>MapOptions</code>
- (MBMMapOptions * _Nonnull)getMapOptions SWIFT_WARN_UNUSED_RESULT;
/// Style URI for initializing the map. Defaults to Mapbox Streets.
- (NSString * _Nullable)getStyleURI SWIFT_WARN_UNUSED_RESULT;
/// String representation of JSON style spec. Has precedence over <code>styleURI</code>.
- (NSString * _Nullable)getStyleJSON SWIFT_WARN_UNUSED_RESULT;
/// Camera options for initializing the map. CameraOptions default to 0.0 for each value.
- (MBMCameraOptions * _Nullable)getCameraOptions SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21MapInitOptionsFactory")
@interface MapInitOptionsFactory : NSObject
/// Initializer. The default initializer, i.e. <code>MapInitOptions()</code> will use
/// the default <code>ResourceOptionsManager</code> to use the current shared access token.
/// \param resourceOptions <code>ResourceOptions</code>; default creates an instance
/// using <code>ResourceOptionsManager.default</code>
///
/// \param mapOptions <code>MapOptions</code>; see <code>GlyphsRasterizationOptions</code> for the default
/// used for glyph rendering.
///
/// \param cameraOptions <code>CameraOptions</code> to be applied to the map, overriding
/// the default camera that has been specified in the style.
///
/// \param styleURI Style URI for the map to load. Defaults to <code>.streets</code>, but
/// can be <code>nil</code>.
///
/// \param styleJSON Style JSON in String representation. Has precedence over <code>styleURI</code>.
///
+ (MapInitOptions * _Nonnull)createWithResourceOptions:(MBMResourceOptions * _Nullable)resourceOptions mapOptions:(MBMMapOptions * _Nullable)mapOptions cameraOptions:(MBMCameraOptions * _Nullable)cameraOptions styleURI:(NSString * _Nullable)styleURI styleJSON:(NSString * _Nullable)styleJSON SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMBViewport;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBViewport * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBGestureManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBGestureManager * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBViewAnnotationManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBViewAnnotationManager * _Nonnull)viewAnnotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBAnnotationOrchestrator;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBAnnotationOrchestrator * _Nonnull)annotations SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBCameraAnimationsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCameraAnimationsManager * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBMapboxMap;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBMapboxMap * _Nonnull)mapboxMap SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBOrnamentsManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBOrnamentsManager * _Nonnull)ornaments SWIFT_WARN_UNUSED_RESULT;
@end


@class NSNumber;
@class MBMCameraState;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)preferredFrameRateRange:(CAFrameRateRange)value;
- (NSArray<NSNumber *> * _Nonnull)mapboxMapDebugOptions SWIFT_WARN_UNUSED_RESULT;
- (void)mapboxMapDebugOptions:(NSArray<NSNumber *> * _Nonnull)value;
- (BOOL)getPresentsWithTransaction SWIFT_WARN_UNUSED_RESULT;
- (void)setPresentsWithTransaction:(BOOL)value;
- (NSInteger)getPreferredFramesPerSecond SWIFT_WARN_UNUSED_RESULT;
- (void)setPreferredFramesPerSecond:(NSInteger)value;
- (CAFrameRateRange)getPreferredFrameRateRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)setPreferredFrameRateRange:(CAFrameRateRange)value SWIFT_AVAILABILITY(ios,introduced=15.0);
- (MBMCameraState * _Nonnull)getCameraState SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)getAnchor SWIFT_WARN_UNUSED_RESULT;
@end

@protocol TMBAttributionURLOpener;

SWIFT_CLASS("_TtC13MapboxMapObjC14MapViewFactory")
@interface MapViewFactory : NSObject
/// :nodoc:
/// See https://developer.apple.com/forums/thread/650054 for context
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame options:(MapInitOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame mapInitOptions:(MapInitOptions * _Nonnull)mapInitOptions urlOpener:(id <TMBAttributionURLOpener> _Nonnull)urlOpener SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSourceType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSourceType:(enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBScheme : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithScheme:(enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
- (enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBEncoding : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithEncoding:(enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
- (enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
@end





enum TMBStyleProjectionName : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithStyleProjectionName:(enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
- (enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithAnchor:(enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSkyType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSkyType:(enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBHillshadeIlluminationAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithHillshadeIlluminationAnchor:(enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBRasterResampling : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithRasterResampling:(enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
- (enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBFillExtrusionTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithFillExtrusionTranslateAnchor:(enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBCircleTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCircleTranslateAnchor:(enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBCirclePitchScale : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCirclePitchScale:(enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBLayerType : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLayerType:(enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBCirclePitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithCirclePitchAlignment:(enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextTranslateAnchor:(enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconTranslateAnchor:(enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBLineTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineTranslateAnchor:(enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBFillTranslateAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithFillTranslateAnchor:(enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextTransform : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextTransform:(enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextRotationAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextRotationAlignment:(enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextPitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextPitchAlignment:(enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBTextJustify : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextJustify:(enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBExpressionOperator : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithExpressionOperator:(enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
- (enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBTextAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextAnchor:(enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBVisibility : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithVisibility:(enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
- (enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBSymbolZOrder : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSymbolZOrder:(enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBLineCap : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineCap:(enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBLineJoin : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithLineJoin:(enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
- (enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBSymbolPlacement : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithSymbolPlacement:(enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
- (enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconAnchor : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconAnchor:(enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
@end


enum TMBIconTextFit : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconTextFit:(enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
@end



enum TMBIconRotationAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconRotationAlignment:(enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBIconPitchAlignment : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithIconPitchAlignment:(enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
- (enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end

enum TMBTextWritingMode : NSInteger;

@interface NSNumber (SWIFT_EXTENSION(MapboxMapObjC))
+ (NSNumber * _Nonnull)valueWithTextWritingMode:(enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
- (enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP13MapboxMapObjC11NamedString_")
@protocol NamedString
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMStylePackLoadOptions;
@class MBMStylePack;
@class TMBCancelable;

@interface MBMOfflineManager (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)loadStyleWithStyleUriString:(NSString * _Nonnull)styleUriString styleLoadOptions:(MBMStylePackLoadOptions * _Nonnull)styleLoadOptions progress:(MBMStylePackLoadProgressCallback _Nonnull)progress completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)allStylePacks:(void (^ _Nonnull)(NSArray<MBMStylePack *> * _Nullable, NSError * _Nullable))completion;
@end



/// Whether extruded geometries are lit relative to the map or viewport.
typedef SWIFT_ENUM(NSInteger, TMBAnchor, open) {
/// The position of the light source is aligned to the rotation of the map.
  TMBAnchorMap = 0,
/// The position of the light source is aligned to the rotation of the viewport.
  TMBAnchorViewport = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBAnimationOwner")
@interface TMBAnimationOwner : NSObject <NamedString>
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull gestures;)
+ (TMBAnimationOwner * _Nonnull)gestures SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnimationOwner * _Nonnull unspecified;)
+ (TMBAnimationOwner * _Nonnull)unspecified SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC13TMBAnnotation_")
@protocol TMBAnnotation
/// The unique identifier of the annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The geometry that is backing this annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
/// Properties associated with the annotation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@end

@protocol TMBAnnotationManager;

/// A delegate that is called when a tap is detected on an annotation (or on several of them).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAnnotationInteractionDelegate_")
@protocol TMBAnnotationInteractionDelegate
/// This method is invoked when a tap gesture is detected on an annotation
/// \param manager The <code>AnnotationManager</code> that detected this tap gesture
///
/// \param annotations A list of <code>Annotations</code> that were tapped
///
- (void)annotationManager:(id <TMBAnnotationManager> _Nonnull)manager didDetectTappedAnnotations:(NSArray<id <TMBAnnotation>> * _Nonnull)annotations;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBAnnotationManager_")
@protocol TMBAnnotationManager
/// The id of this annotation manager.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the <code>GeoJSONSource</code> that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
/// The id of the layer that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@end

@class TMBLayerPosition;
@class TMBClusterOptions;
@class TMBPointAnnotationManager;
@class TMBPolygonAnnotationManager;
@class TMBPolylineAnnotationManager;
@class TMBCircleAnnotationManager;

/// <code>AnnotationOrchestrator</code> provides a way to create annotation managers of different types.
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBAnnotationOrchestrator")
@interface TMBAnnotationOrchestrator : NSObject
/// Dictionary of annotation managers keyed by their identifiers.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <TMBAnnotationManager>> * _Nonnull annotationManagersById;
/// Creates a <code>PointAnnotationManager</code> which is used to manage a collection of
/// <code>PointAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PointAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
/// \param clusterOptions Optionally set the <code>ClusterOptions</code> to cluster the Point Annotations
///
///
/// returns:
/// An instance of <code>PointAnnotationManager</code>
- (TMBPointAnnotationManager * _Nonnull)makePointAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition clusterOptions:(TMBClusterOptions * _Nullable)clusterOptions SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolygonAnnotationManager</code> which is used to manage a collection of
/// <code>PolygonAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolygonAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager..
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolygonAnnotationManager</code>
- (TMBPolygonAnnotationManager * _Nonnull)makePolygonAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PolylineAnnotationManager</code> which is used to manage a collection of
/// <code>PolylineAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>PolylineAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>PolylineAnnotationManager</code>
- (TMBPolylineAnnotationManager * _Nonnull)makePolylineAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>CircleAnnotationManager</code> which is used to manage a collection of
/// <code>CircleAnnotation</code>s. Annotations persist across style changes. If an annotation manager with
/// the same <code>id</code> has already been created, the old one will be removed as if
/// <code>removeAnnotationManager(withId:)</code> had been called. <code>AnnotationOrchestrator</code>
/// keeps a strong reference to any <code>CircleAnnotationManager</code> until it is removed.
/// \param id Optional string identifier for this manager.
///
/// \param layerPosition Optionally set the <code>LayerPosition</code> of the layer managed.
///
///
/// returns:
/// An instance of <code>CircleAnnotationManager</code>
- (TMBCircleAnnotationManager * _Nonnull)makeCircleAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(TMBLayerPosition * _Nullable)layerPosition SWIFT_WARN_UNUSED_RESULT;
/// Removes an annotation manager, this will remove the underlying layer and source from the style.
/// A removed annotation manager will not be able to reuse anymore, you will need to create new annotation manger to add annotations.
/// \param id Identifer of annotation manager to remove
///
- (void)removeAnnotationManagerWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBValue;
@class TMBStyleTransition;

/// A style’s fog property is a global effect that improves depth perception by fading out distant objects.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBAtmosphere")
@interface TMBAtmosphere : NSObject
/// The color of the atmosphere region immediately below the horizon and within the <code>range</code> and above the horizon and within <code>horizon-blend</code>. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.
@property (nonatomic, strong) TMBValue * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// The color of the atmosphere region above the horizon, <code>high-color</code> extends further above the horizon than the <code>color</code> property and its spread can be controlled with <code>horizon-blend</code>. The opacity can be set to <code>0</code> to remove the high atmosphere color contribution.
@property (nonatomic, strong) TMBValue * _Nullable highColor;
/// Transition property for <code>highColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable highColorTransition;
/// Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.
@property (nonatomic, strong) TMBValue * _Nullable horizonBlend;
/// Transition property for <code>horizonBlend</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable horizonBlendTransition;
/// The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.
@property (nonatomic, strong) TMBValue * _Nullable range;
/// Transition property for <code>range</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable rangeTransition;
/// The color of the region above the horizon and after the end of the <code>horizon-blend</code> contribution. The opacity can be set to <code>0</code> to have a transparent background.
@property (nonatomic, strong) TMBValue * _Nullable spaceColor;
/// Transition property for <code>spaceColor</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable spaceColorTransition;
/// A value controlling the star intensity where <code>0</code> will show no stars and <code>1</code> will show stars at their maximum intensity.
@property (nonatomic, strong) TMBValue * _Nullable starIntensity;
/// Transition property for <code>starIntensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable starIntensityTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum TMBOrnamentPosition : NSInteger;

/// Used to configure position, margin, and visibility for the map’s attribution button.
SWIFT_CLASS("_TtC13MapboxMapObjC27TMBAttributionButtonOptions")
@interface TMBAttributionButtonOptions : NSObject
/// The position of the attribution button.
/// The default value for this property is <code>.bottomTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the attribution button.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// A protocol to open attribution URLs.
/// Use this protocol when the map view is used in non-application target(e.g. application extension target).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC23TMBAttributionURLOpener_")
@protocol TMBAttributionURLOpener
/// Asks the opener to open the provided URL.
/// \param url The URL to be opened.
///
- (void)openAttributionURL:(NSURL * _Nonnull)url;
@end

@class TMBExpression;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC8TMBLayer_")
@protocol TMBLayer
/// Unique layer name
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Rendering type of this layer.
@property (nonatomic, readonly) enum TMBLayerType type;
/// An expression specifying conditions on source features.
/// Only features that match the filter are displayed.
@property (nonatomic, strong) TMBExpression * _Nullable filter;
/// Name of a source description to be used for this layer.
/// Required for all layer types except background.
@property (nonatomic, copy) NSString * _Nullable source;
/// Layer to use from a vector tile source.
/// Required for vector tile sources.
/// Prohibited for all other source types, including GeoJSON sources.
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
/// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
/// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
@end


/// The background color or pattern of the map.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-background">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBBackgroundLayer")
@interface TMBBackgroundLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The color with which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundColor;
/// Transition options for <code>backgroundColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundColorTransition;
/// The opacity at which the background will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable backgroundOpacity;
/// Transition options for <code>backgroundOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundOpacityTransition;
/// Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable backgroundPattern;
/// Transition options for <code>backgroundPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable backgroundPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class TMBCameraAnimator;
@protocol UITimingCurveProvider;
@class TMBCameraTransition;
@class BasicCameraAnimator;

/// APIs for animating the camera.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCameraAnimationsManager")
@interface TMBCameraAnimationsManager : NSObject
/// List of animators currently alive
@property (nonatomic, readonly, copy) NSArray<TMBCameraAnimator *> * _Nonnull cameraAnimators;
/// Interrupts all <code>active</code> animation.
/// The camera remains at the last point before the cancel request was invoked, i.e.,
/// the camera is not reset or fast-forwarded to the end of the transition.
/// Canceled animations cannot be restarted / resumed. The animator must be recreated.
- (void)cancelAnimations;
/// Moves the viewpoint to a different location using a transition animation that
/// evokes powered flight and an optional transition duration and timing function.
/// It seamlessly incorporates zooming and panning to help
/// the user find his or her bearings even after traversing a great distance.
/// \param to The camera options at the end of the animation. Any camera parameters that are nil will
/// not be animated.
///
/// \param duration Duration of the animation, measured in seconds. If nil, a suitable calculated
/// duration is used.
///
/// \param completion Completion handler called when the animation stops
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nullable)flyTo:(MBMCameraOptions * _Nonnull)to duration:(NSNumber * _Nullable)duration completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Ease the camera to a destination
/// \param to the target camera after animation; if <code>camera.anchor</code> is non-nil, it is use for both
/// the <code>fromValue</code> and the <code>toValue</code> of the underlying animation such that the
/// value specified will not be interpolated, but will be passed as-is to each camera update
/// during the animation. To animate <code>anchor</code> itself, use the <code>makeAnimator</code> APIs.
///
/// \param duration duration of the animation
///
/// \param curve the easing curve for the animation
///
/// \param completion completion to be called after animation
///
///
/// returns:
/// An instance of <code>Cancelable</code> which can be canceled if necessary
- (TMBCancelable * _Nullable)easeTo:(MBMCameraOptions * _Nonnull)to duration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param timingParameters The object providing the timing information. This object must adopt
/// the <code>UITimingCurveProvider</code> protocol.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration timingParameters:(id <UITimingCurveProvider> _Nonnull)timingParameters animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param curve One of UIKit’s predefined timing curves to apply to the animation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration curve:(enum UIViewAnimationCurve)curve animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param controlPoint1 The first control point for the cubic Bézier timing curve.
///
/// \param controlPoint2 The second control point for the cubic Bézier timing curve.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2 animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>BasicCameraAnimator</code>.
/// note:
/// <code>CameraAnimationsManager</code> only keeps animators alive while their
/// <code>CameraAnimator/state</code> is <code>.active</code>.
/// \param duration The duration of the animation.
///
/// \param dampingRatio The damping ratio to apply to the initial acceleration and oscillation. To
/// smoothly decelerate the animation without oscillation, specify a value of 1.
/// Specify values closer to 0 to create less damping and more oscillation.
///
/// \param animationOwner An <code>AnimationOwner</code> that can be used to identify what component
/// initiated an animation.
///
/// \param animations a closure that configures the animation’s to and from values via a
/// <code>CameraTransition</code>.
///
///
/// returns:
/// A new <code>BasicCameraAnimator</code>.
- (BasicCameraAnimator * _Nonnull)makeAnimatorWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)dampingRatio animationOwner:(TMBAnimationOwner * _Nullable)animationOwner animations:(void (^ _Nonnull)(TMBCameraTransition * _Nonnull))animations SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBCameraAnimator")
@interface TMBCameraAnimator : NSObject
@property (nonatomic, readonly) UIViewAnimatingState state;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBCameraTransitionChange;

/// Structure used to represent a desired change to the map’s camera
SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCameraTransition")
@interface TMBCameraTransition : NSObject
/// Represents a change to the center coordinate of the map.
/// NOTE: Setting the <code>toValue</code> of <code>center</code> overrides any <code>anchor</code> animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull center;
/// Represents a change to the zoom of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull zoom;
/// Represents a change to the padding of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull padding;
/// Represents a change to the anchor of the map
/// NOTE: Incompatible with concurrent center animations
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull anchor;
/// Represents a change to the bearing of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull bearing;
/// Ensures that bearing transitions are optimized to take the shortest path. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldOptimizeBearingPath;
/// Represents a change to the pitch of the map.
@property (nonatomic, readonly, strong) TMBCameraTransitionChange * _Nonnull pitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Generic struct used to represent a change in a value from a starting point (i.e. <code>fromValue</code>) to an end point (i.e. <code>toValue</code>).
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBCameraTransitionChange")
@interface TMBCameraTransitionChange : NSObject
@property (nonatomic, strong) NSValue * _Nonnull fromValue;
@property (nonatomic, strong) NSValue * _Nullable toValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBCancelable")
@interface TMBCancelable : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCircleAnnotation")
@interface TMBCircleAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBCircleAnnotation * _Nonnull)fromCenter:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) NSNumber * _Nullable circleBlur;
/// The fill color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleColor;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable circleOpacity;
/// Circle radius.
@property (nonatomic, strong) NSNumber * _Nullable circleRadius;
/// The stroke color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleStrokeColor;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeOpacity;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCircleAnnotationManager")
@interface TMBCircleAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBCircleAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable circlePitchScale;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable circleTranslate;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A filled circle.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-circle">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBCircleLayer")
@interface TMBCircleLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) TMBValue * _Nullable circleBlur;
/// Transition options for <code>circleBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleBlurTransition;
/// The fill color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// Transition options for <code>circleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleColorTransition;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable circleOpacity;
/// Transition options for <code>circleOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleOpacityTransition;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable circlePitchScale;
/// Circle radius.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// Transition options for <code>circleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleRadiusTransition;
/// The stroke color of the circle.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeColor;
/// Transition options for <code>circleStrokeColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeColorTransition;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeOpacity;
/// Transition options for <code>circleStrokeOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeOpacityTransition;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleStrokeWidth;
/// Transition options for <code>circleStrokeWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleStrokeWidthTransition;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslate;
/// Transition options for <code>circleTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable circleTranslateTransition;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Orientation of circle when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBCirclePitchAlignment, open) {
/// The circle is aligned to the plane of the map.
  TMBCirclePitchAlignmentMap = 0,
/// The circle is aligned to the plane of the viewport.
  TMBCirclePitchAlignmentViewport = 1,
};

/// Controls the scaling behavior of the circle when the map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBCirclePitchScale, open) {
/// Circles are scaled according to their apparent distance to the camera.
  TMBCirclePitchScaleMap = 0,
/// Circles are not scaled.
  TMBCirclePitchScaleViewport = 1,
};

/// Controls the frame of reference for <code>circle-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBCircleTranslateAnchor, open) {
/// The circle is translated relative to the map.
  TMBCircleTranslateAnchorMap = 0,
/// The circle is translated relative to the viewport.
  TMBCircleTranslateAnchorViewport = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBClusterOptions")
@interface TMBClusterOptions : NSObject
/// The circle radius of the cluster items, 18 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable circleRadius;
/// The circle color, black by default.
@property (nonatomic, strong) TMBValue * _Nullable circleColor;
/// The text color of cluster item, white by default
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// The text size of cluster item, 12 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Value to use for a text label of the cluster. <code>get("point_count")</code> by default which
/// will show the count of points in the cluster
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal
/// to the width of a tile, 50 by default. Value must be greater than or equal to 0.
@property (nonatomic) double clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less
/// than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom
/// levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic) double clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from
/// clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>.
/// <code>operator</code> is any expression function that accepts at
/// least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the
/// cluster contains; <code>map_expression</code> produces the value of a single point. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp(.sum) {
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": ["+", ["get", "scalerank"]]}</code>
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp {
///     Exp(.sum) {
///         Exp(.accumulated)
///         Exp(.get) { "sum" }
///     }
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Define a set of cluster options to determine how to cluster annotations.
/// Providing clusterOptions when initializing a <code>PointAnnotationManager</code>
/// will turn on clustering for that <code>PointAnnotationManager</code>.
- (nonnull instancetype)initWithCircleRadius:(TMBValue * _Nullable)circleRadius circleColor:(TMBValue * _Nullable)circleColor textColor:(TMBValue * _Nullable)textColor textSize:(TMBValue * _Nullable)textSize textField:(TMBValue * _Nullable)textField clusterRadius:(double)clusterRadius clusterMaxZoom:(double)clusterMaxZoom clusterProperties:(NSDictionary<NSString *, TMBExpression *> * _Nullable)clusterProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBCollatorOptions")
@interface TMBCollatorOptions : NSObject
/// Whether comparison option is case sensitive.
@property (nonatomic, strong) NSNumber * _Nullable caseSensitive;
/// Whether the comparison operation is diacritic sensitive
@property (nonatomic, strong) NSNumber * _Nullable diacriticSensitive;
/// The locale argument specifies the IETF language tag of the locale to use.
/// If none is provided, the default locale is used.
@property (nonatomic, copy) NSString * _Nullable locale;
- (nonnull instancetype)initWithCaseSensitive:(NSNumber * _Nullable)caseSensitive diacriticSensitive:(NSNumber * _Nullable)diacriticSensitive locale:(NSString * _Nullable)locale OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
enum TMBOrnamentVisibility : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC21TMBCompassViewOptions")
@interface TMBCompassViewOptions : NSObject
/// The position of the compass view.
/// The default value for this property is <code>.topTrailing</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the compass view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The image used for displaying the compass.
/// The default value for this property is nil, default compass image will be drawn.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The visibility of the compass view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBDefaultViewportTransitionOptions;

/// A default <code>ViewportTransition</code> implementation.
/// Use <code>Viewport/makeDefaultViewportTransition(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC28TMBDefaultViewportTransition")
@interface TMBDefaultViewportTransition : NSObject
/// Configuration options.
/// New values will take effect the next time <code>ViewportTransition/run(to:completion:)</code>
/// is invoked
@property (nonatomic, strong) TMBDefaultViewportTransitionOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TMBViewportState;

/// to and from different <code>ViewportState</code>s.
/// MapboxMaps provides implementations of <code>ViewportTransition</code> that can be created and
/// configured via methods on <code>Viewport</code>. Applications may also define their own implementations to
/// handle advanced use cases not covered by the provided implementations.
/// seealso:
///
/// <ul>
///   <li>
///     <code>DefaultViewportTransition</code>
///   </li>
///   <li>
///     <code>ImmediateViewportTransition</code>
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP13MapboxMapObjC21TMBViewportTransition_")
@protocol TMBViewportTransition
/// Runs the transition to <code>toState</code>.
/// The completion block must be invoked with <code>true</code> if the transition completes successfully. If the
/// transition fails, invoke the completion block with <code>false</code>.
/// If the returned <code>Cancelable</code> is canceled, it not necessary to invoke the completion block (but
/// is safe to do so — it will just be ignored).
/// Transitions should handle the possibility that the “to” state might fail to provide a target camera in a
/// timely manner or might update the target camera multiple times during the transition (a “moving
/// target”).
/// \param toState The target state for the transition.
///
/// \param completion A block that must be invoked when the transition is complete. Must be invoked
/// on the main queue.
///
/// \param success A flag to indicate whether the transition was successful.
///
///
/// returns:
/// a <code>Cancelable</code> that can be used to terminate the transition. If
/// <code>Cancelable/cancel()</code> is invoked, the transition must immediately stop
/// updating the camera and cancel any animations that it started.
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBDefaultViewportTransition (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportTransition>
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration options for <code>DefaultViewportTransition</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC35TMBDefaultViewportTransitionOptions")
@interface TMBDefaultViewportTransitionOptions : NSObject
/// The maximum duration of the transition.
@property (nonatomic) NSTimeInterval maxDuration;
/// Memberwise initializer for <code>DefaultViewportTransitionOptions</code>.
/// \param maxDuration Defaults to 3.5.
///
- (nonnull instancetype)initWithMaxDuration:(NSTimeInterval)maxDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The encoding used by this source. Mapbox Terrain RGB is used by default
typedef SWIFT_ENUM(NSInteger, TMBEncoding, open) {
/// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
  TMBEncodingTerrarium = 0,
/// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
  TMBEncodingMapbox = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBExpression")
@interface TMBExpression : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic, readonly) enum TMBExpressionOperator expressionOperator;
/// Length of time before a transition begins in seconds.
@property (nonatomic, readonly, copy) NSArray * _Nonnull arguments;
+ (TMBExpression * _Nonnull)createWithOperator:(enum TMBExpressionOperator)operator_ SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithOperator:(enum TMBExpressionOperator)operator_ arguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)args:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface TMBExpression (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBExpression * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)subtract:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)not:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)neq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)product:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)division:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)mod:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pow:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sum:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)eq:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)gte:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)abs:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)accumulated:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)acos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)all:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)any:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)array:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)asin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)at:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)atan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)boolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)switchCase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ceil:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)coalesce:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)collator:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)concat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cos:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distance:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)distanceFromCenter:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)downcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)e:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)featureState:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)floor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)format:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)geometryType:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)get:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)has:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)heatmapDensity:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)id:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)image:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)inExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)indexOf:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)interpolate:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)isSupportedScript:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)length:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)letExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)lineProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)literal:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)ln2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log10:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)log2:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)match:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)max:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)min:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)number:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)numberFormat:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)objectExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pi:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)pitch:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)properties:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)resolvedLocale:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgb:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)rgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)round:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sin:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)skyRadialProgress:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)slice:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)sqrt:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)step:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)string:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)tan:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toBoolean:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toColor:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toNumber:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toRgba:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)toString:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)typeofExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)upcase:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)varExpression:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)within:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)zoom:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)linear:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)exponential:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)cubicBezier:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, TMBExpressionOperator, open) {
/// For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.
  TMBExpressionOperatorSubtract = 0,
/// Logical negation. Returns <code>true</code> if the input is <code>false</code>, and <code>false</code> if the input is <code>true</code>.
  TMBExpressionOperatorNot = 1,
/// Returns <code>true</code> if the input values are not equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorNeq = 2,
/// Returns the product of the inputs.
  TMBExpressionOperatorProduct = 3,
/// Returns the result of floating point division of the first input by the second.
  TMBExpressionOperatorDivision = 4,
/// Returns the remainder after integer division of the first input by the second.
  TMBExpressionOperatorMod = 5,
/// Returns the result of raising the first input to the power specified by the second.
  TMBExpressionOperatorPow = 6,
/// Returns the sum of the inputs.
  TMBExpressionOperatorSum = 7,
/// Returns <code>true</code> if the first input is strictly less than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorLt = 8,
/// Returns <code>true</code> if the first input is less than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorLte = 9,
/// Returns <code>true</code> if the input values are equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorEq = 10,
/// Returns <code>true</code> if the first input is strictly greater than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorGt = 11,
/// Returns <code>true</code> if the first input is greater than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
  TMBExpressionOperatorGte = 12,
/// Returns the absolute value of the input.
  TMBExpressionOperatorAbs = 13,
/// Returns the value of a cluster property accumulated so far. Can only be used in the <code>clusterProperties</code> option of a clustered GeoJSON source.
  TMBExpressionOperatorAccumulated = 14,
/// Returns the arccosine of the input.
  TMBExpressionOperatorAcos = 15,
/// Returns <code>true</code> if all the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>false</code>, the result is <code>false</code> and no further input expressions are evaluated.
  TMBExpressionOperatorAll = 16,
/// Returns <code>true</code> if any of the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>true</code>, the result is <code>true</code> and no further input expressions are evaluated.
  TMBExpressionOperatorAny = 17,
/// Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.
  TMBExpressionOperatorArray = 18,
/// Returns the arcsine of the input.
  TMBExpressionOperatorAsin = 19,
/// Retrieves an item from an array.
  TMBExpressionOperatorAt = 20,
/// Returns the arctangent of the input.
  TMBExpressionOperatorAtan = 21,
/// Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.
  TMBExpressionOperatorBoolean = 22,
/// Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.
  TMBExpressionOperatorSwitchCase = 23,
/// Returns the smallest integer that is greater than or equal to the input.
  TMBExpressionOperatorCeil = 24,
/// Evaluates each expression in turn until the first valid value is obtained. Invalid values are <code>null</code> and <a href="#types-image"><code>'image'</code></a> expressions that are unavailable in the style. If all values are invalid, <code>coalesce</code> returns the first value listed.
  TMBExpressionOperatorCoalesce = 25,
/// Returns a <code>collator</code> for use in locale-dependent comparison operations. The <code>case-sensitive</code> and <code>diacritic-sensitive</code> options default to <code>false</code>. The <code>locale</code> argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the <code>collator</code> will use a system-defined fallback locale. Use <code>resolved-locale</code> to test the results of locale fallback behavior.
  TMBExpressionOperatorCollator = 26,
/// Returns a <code>string</code> consisting of the concatenation of the inputs. Each input is converted to a string as if by <code>to-string</code>.
  TMBExpressionOperatorConcat = 27,
/// Returns the cosine of the input.
  TMBExpressionOperatorCos = 28,
/// Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.
  TMBExpressionOperatorDistance = 29,
/// Returns the distance of a <code>symbol</code> instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. <code>["distance-from-center"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
  TMBExpressionOperatorDistanceFromCenter = 30,
/// Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
  TMBExpressionOperatorDowncase = 31,
/// Returns the mathematical constant e.
  TMBExpressionOperatorE = 32,
/// Retrieves a property value from the current feature’s state. Returns <code>null</code> if the requested property is not present on the feature’s state. A feature’s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their <code>id</code> attribute, which must be an integer or a string that can be cast to an integer. Note that [“feature-state”] can only be used with paint properties that support data-driven styling.
  TMBExpressionOperatorFeatureState = 33,
/// Returns the largest integer that is less than or equal to the input.
  TMBExpressionOperatorFloor = 34,
/// Returns a <code>formatted</code> string for displaying mixed-format text in the <code>text-field</code> property. The input may contain a string literal or expression, including an <a href="#types-image"><code>'image'</code></a> expression. Strings may be followed by a style override object that supports the following properties:
/// <ul>
///   <li>
///     <code>"text-font"</code>: Overrides the font stack specified by the root layout property.
///   </li>
///   <li>
///     <code>"text-color"</code>: Overrides the color specified by the root paint property.
///   </li>
///   <li>
///     <code>"font-scale"</code>: Applies a scaling factor on <code>text-size</code> as specified by the root layout property.
///   </li>
/// </ul>
  TMBExpressionOperatorFormat = 35,
/// Returns the feature’s geometry type: <code>Point</code>, <code>LineString</code> or <code>Polygon</code>. <code>Multi*</code> feature types return the singular forms.
  TMBExpressionOperatorGeometryType = 36,
/// Retrieves a property value from the current feature’s properties, or from another object if a second argument is provided. Returns <code>null</code> if the requested property is missing.
  TMBExpressionOperatorGet = 37,
/// Tests for the presence of an property value in the current feature’s properties, or from another object if a second argument is provided.
  TMBExpressionOperatorHas = 38,
/// Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the <code>heatmap-color</code> property.
  TMBExpressionOperatorHeatmapDensity = 39,
/// Returns the feature’s id, if it has one.
  TMBExpressionOperatorId = 40,
/// Returns a <a href="/mapbox-gl-js/style-spec/types/#resolvedimage"><code>ResolvedImage</code></a> for use in <a href="/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image"><code>icon-image</code></a>, <code>*-pattern</code> entries, and as a section in the <a href="#types-format"><code>'format'</code></a> expression. A <a href="#coalesce"><code>'coalesce'</code></a> expression containing <code>image</code> expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the <code>'image'</code> argument.
  TMBExpressionOperatorImage = 41,
/// Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a <a href="#types-literal"><code>literal</code></a> expression to hint correct interpretation to the <a href="#type-system">type system</a>.
  TMBExpressionOperatorInExpression = 42,
/// Returns the first position at which an item can be found in an array or a substring can be found in a string, or <code>-1</code> if the input cannot be found. Accepts an optional index from where to begin the search.
  TMBExpressionOperatorIndexOf = 43,
/// Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. The output type must be <code>number</code>, <code>array<number></code>, or <code>color</code>.
/// Interpolation types:
/// <ul>
///   <li>
///     <code>["linear"]</code>: Interpolates linearly between the pair of stops just less than and just greater than the input.
///   </li>
///   <li>
///     <code>["exponential", base]</code>: Interpolates exponentially between the stops just less than and just greater than the input. <code>base</code> controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.
///   </li>
///   <li>
///     <code>["cubic-bezier", x1, y1, x2, y2]</code>: Interpolates using the cubic bezier curve defined by the given control points.
///   </li>
/// </ul>
  TMBExpressionOperatorInterpolate = 44,
/// Returns <code>true</code> if the input string is expected to render legibly. Returns <code>false</code> if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the <code>mapbox-gl-rtl-text</code> plugin is not in use in Mapbox GL JS).
  TMBExpressionOperatorIsSupportedScript = 45,
/// Returns the length of an array or string.
  TMBExpressionOperatorLength = 46,
/// Binds expressions to named variables, which can then be referenced in the result expression using [“var”, “variable_name”].
  TMBExpressionOperatorLetExpression = 47,
/// Returns the progress along a gradient line. Can only be used in the <code>line-gradient</code> property.
  TMBExpressionOperatorLineProgress = 48,
/// Provides a literal array or object value.
  TMBExpressionOperatorLiteral = 49,
/// Returns the natural logarithm of the input.
  TMBExpressionOperatorLn = 50,
/// Returns mathematical constant ln(2).
  TMBExpressionOperatorLn2 = 51,
/// Returns the base-ten logarithm of the input.
  TMBExpressionOperatorLog10 = 52,
/// Returns the base-two logarithm of the input.
  TMBExpressionOperatorLog2 = 53,
/// Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, <code>["get", "building_type"]</code>). Each label must be unique, and must be either:
/// <ul>
///   <li>
///     a single literal value; or
///   </li>
///   <li>
///     an array of literal values, the values of which must be all strings or all numbers (for example <code>[100, 101]</code> or <code>["c", "b"]</code>).
///   </li>
/// </ul>
/// The input matches if any of the values in the array matches using strict equality, similar to the <code>"in"</code> operator.
/// If the input type does not match the type of the labels, the result will be the fallback value.
  TMBExpressionOperatorMatch = 54,
/// Returns the maximum value of the inputs.
  TMBExpressionOperatorMax = 55,
/// Returns the minimum value of the inputs.
  TMBExpressionOperatorMin = 56,
/// Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.
  TMBExpressionOperatorNumber = 57,
/// Converts the input number into a string representation using the providing formatting rules. If set, the <code>locale</code> argument specifies the locale to use, as a BCP 47 language tag. If set, the <code>currency</code> argument specifies an ISO 4217 code to use for currency-style formatting. If set, the <code>unit</code> argument specifies a <a href="https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier">simple ECMAScript unit</a> to use for unit-style formatting. If set, the <code>min-fraction-digits</code> and <code>max-fraction-digits</code> arguments specify the minimum and maximum number of fractional digits to include.
  TMBExpressionOperatorNumberFormat = 58,
/// Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.
  TMBExpressionOperatorObjectExpression = 59,
/// Returns the mathematical constant pi.
  TMBExpressionOperatorPi = 60,
/// Returns the current pitch in degrees. <code>["pitch"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
  TMBExpressionOperatorPitch = 61,
/// Returns the feature properties object.  Note that in some cases, it may be more efficient to use <code>["get", "property_name"]</code> directly.
  TMBExpressionOperatorProperties = 62,
/// Returns the IETF language tag of the locale being used by the provided <code>collator</code>. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.
  TMBExpressionOperatorResolvedLocale = 63,
/// Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.
  TMBExpressionOperatorRgb = 64,
/// Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.
  TMBExpressionOperatorRgba = 65,
/// Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, <code>["round", -1.5]</code> evaluates to -2.
  TMBExpressionOperatorRound = 66,
/// Returns the sine of the input.
  TMBExpressionOperatorSin = 67,
/// Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches <code>sky-gradient-radius</code>. Can only be used in the <code>sky-gradient</code> property.
  TMBExpressionOperatorSkyRadialProgress = 68,
/// Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.
  TMBExpressionOperatorSlice = 69,
/// Returns the square root of the input.
  TMBExpressionOperatorSqrt = 70,
/// Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.
  TMBExpressionOperatorStep = 71,
/// Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.
  TMBExpressionOperatorString = 72,
/// Returns the tangent of the input.
  TMBExpressionOperatorTan = 73,
/// Converts the input value to a boolean. The result is <code>false</code> when then input is an empty string, 0, <code>false</code>, <code>null</code>, or <code>NaN</code>; otherwise it is <code>true</code>.
  TMBExpressionOperatorToBoolean = 74,
/// Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
  TMBExpressionOperatorToColor = 75,
/// Converts the input value to a number, if possible. If the input is <code>null</code> or <code>false</code>, the result is 0. If the input is <code>true</code>, the result is 1. If the input is a string, it is converted to a number as specified by the <a href="https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type">“ToNumber Applied to the String Type” algorithm</a> of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
  TMBExpressionOperatorToNumber = 76,
/// Returns a four-element array containing the input color’s red, green, blue, and alpha components, in that order.
  TMBExpressionOperatorToRgba = 77,
/// Converts the input value to a string. If the input is <code>null</code>, the result is <code>""</code>. If the input is a <a href="#types-boolean"><code>boolean</code></a>, the result is <code>"true"</code> or <code>"false"</code>. If the input is a number, it is converted to a string as specified by the <a href="https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type">“NumberToString” algorithm</a> of the ECMAScript Language Specification. If the input is a <a href="#color"><code>color</code></a>, it is converted to a string of the form <code>"rgba(r,g,b,a)"</code>, where <code>r</code>, <code>g</code>, and <code>b</code> are numerals ranging from 0 to 255, and <code>a</code> ranges from 0 to 1. If the input is an <a href="#types-image"><code>'image'</code></a> expression, <code>'to-string'</code> returns the image name. Otherwise, the input is converted to a string in the format specified by the <a href="https://tc39.github.io/ecma262/#sec-json.stringify"><code>JSON.stringify</code></a> function of the ECMAScript Language Specification.
  TMBExpressionOperatorToString = 78,
/// Returns a string describing the type of the given value.
  TMBExpressionOperatorTypeofExpression = 79,
/// Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
  TMBExpressionOperatorUpcase = 80,
/// References variable bound using “let”.
  TMBExpressionOperatorVarExpression = 81,
/// Returns <code>true</code> if the evaluated feature is fully contained inside a boundary of the input geometry, <code>false</code> otherwise. The input value can be a valid GeoJSON of type <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Supported features for evaluation:
/// <ul>
///   <li>
///     <code>Point</code>: Returns <code>false</code> if a point is on the boundary or falls outside the boundary.
///   </li>
///   <li>
///     <code>LineString</code>: Returns <code>false</code> if any part of a line falls outside the boundary, the line intersects the boundary, or a line’s endpoint is on the boundary.
///   </li>
/// </ul>
  TMBExpressionOperatorWithin = 82,
/// Returns the current zoom level.  Note that in style layout and paint properties, [“zoom”] may only appear as the input to a top-level “step” or “interpolate” expression.
  TMBExpressionOperatorZoom = 83,
/// Interpolates linearly between the pair of stops just less than and just greater than the input
  TMBExpressionOperatorLinear = 84,
/// <code>["exponential", base]</code>
/// Interpolates exponentially between the stops just less than and just
/// greater than the input. base controls the rate at which the output increases: higher values make the output
/// increase more towards the high end of the range.
/// With values close to 1 the output increases linearly.
  TMBExpressionOperatorExponential = 85,
/// <code>["cubic-bezier", x1, y1, x2, y2]</code>
/// Interpolates using the cubic bezier curve defined by the given control points.
  TMBExpressionOperatorCubicBezier = 86,
};

enum TMBExpressionOptionsType : NSInteger;
@class TMBFormatOptions;
@class TMBNumberFormatOptions;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBExpressionOptions")
@interface TMBExpressionOptions : NSObject
@property (nonatomic, readonly) enum TMBExpressionOptionsType type;
@property (nonatomic, readonly) id _Nonnull options;
+ (TMBExpressionOptions * _Nonnull)formatWithOptions:(TMBFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)numberFormatWithOptions:(TMBNumberFormatOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpressionOptions * _Nonnull)collatorWithOptions:(TMBCollatorOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBExpressionOptionsType, open) {
  TMBExpressionOptionsTypeFormat = 0,
  TMBExpressionOptionsTypeNumberFormat = 1,
  TMBExpressionOptionsTypeCollator = 2,
};


/// An extruded (3D) polygon.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill-extrusion">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC21TMBFillExtrusionLayer")
@interface TMBFillExtrusionLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Controls the intensity of shading near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionIntensity;
/// Transition options for <code>fillExtrusionAmbientOcclusionIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionIntensityTransition;
/// Shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to height of one floor and brings the most plausible results for buildings.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionAmbientOcclusionRadius;
/// Transition options for <code>fillExtrusionAmbientOcclusionRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionAmbientOcclusionRadiusTransition;
/// The height with which to extrude the base of this layer. Must be less than or equal to <code>fill-extrusion-height</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionBase;
/// Transition options for <code>fillExtrusionBase</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionBaseTransition;
/// The base color of the extruded fill. The extrusion’s surfaces will be shaded differently based on this color in combination with the root <code>light</code> settings. If this color is specified as <code>rgba</code> with an alpha component, the alpha component will be ignored; use <code>fill-extrusion-opacity</code> to set layer opacity.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionColor;
/// Transition options for <code>fillExtrusionColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionColorTransition;
/// The height with which to extrude this layer.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionHeight;
/// Transition options for <code>fillExtrusionHeight</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionHeightTransition;
/// The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionOpacity;
/// Transition options for <code>fillExtrusionOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionOpacityTransition;
/// Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionPattern;
/// Transition options for <code>fillExtrusionPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslate;
/// Transition options for <code>fillExtrusionTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillExtrusionTranslateTransition;
/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionTranslateAnchor;
/// Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.
@property (nonatomic, strong) TMBValue * _Nullable fillExtrusionVerticalGradient;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-extrusion-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBFillExtrusionTranslateAnchor, open) {
/// The fill extrusion is translated relative to the map.
  TMBFillExtrusionTranslateAnchorMap = 0,
/// The fill extrusion is translated relative to the viewport.
  TMBFillExtrusionTranslateAnchorViewport = 1,
};


/// A filled polygon with an optional stroked border.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-fill">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBFillLayer")
@interface TMBFillLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable fillSortKey;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) TMBValue * _Nullable fillAntialias;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) TMBValue * _Nullable fillColor;
/// Transition options for <code>fillColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillColorTransition;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) TMBValue * _Nullable fillOpacity;
/// Transition options for <code>fillOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOpacityTransition;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) TMBValue * _Nullable fillOutlineColor;
/// Transition options for <code>fillOutlineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillOutlineColorTransition;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable fillPattern;
/// Transition options for <code>fillPattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillPatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslate;
/// Transition options for <code>fillTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable fillTranslateTransition;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable fillTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>fill-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBFillTranslateAnchor, open) {
/// The fill is translated relative to the map.
  TMBFillTranslateAnchorMap = 0,
/// The fill is translated relative to the viewport.
  TMBFillTranslateAnchorViewport = 1,
};

@class TMBFollowPuckViewportStateOptions;

/// A <code>ViewportState</code> implementation that tracks the location puck (to show a puck, use
/// <code>LocationOptions/puckType</code>)
/// Use <code>Viewport/makeFollowPuckViewportState(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC26TMBFollowPuckViewportState")
@interface TMBFollowPuckViewportState : NSObject
/// Configuration options for this state.
@property (nonatomic, strong) TMBFollowPuckViewportStateOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ViewportState</code> is a protocol that <code>Viewport</code> depends on as it orchestrates transitions to and
/// from different states.
/// A <code>ViewportState</code> is a reference type and must not be shared among multiple <code>Viewport</code>
/// instances simultaneously.
/// The <code>ViewportState/observeDataSource(with:)</code> method allows
/// <code>ViewportTransition</code>s to consume a stream of camera updates from a target state while
/// executing a transition. <code>ViewportState/startUpdatingCamera()</code> and
/// <code>ViewportState/stopUpdatingCamera()</code> are invoked to tell the state that it should assume or
/// relinquish control of the map’s camera. These are typically used by <code>Viewport</code> itself after a
/// successful transition into a state and when exiting a state, respectively.
/// MapboxMaps provides implementations of <code>ViewportState</code> that can be created and configured
/// via methods on <code>Viewport</code>. Applications may also define their own implementations to handle
/// advanced use cases not covered by the provided implementations.
/// States should generally pre-warm their data sources as soon as they are created to minimize delays when
/// they become current. For this reason, only states that are currently (or soon-to-be) needed should be kept
/// alive so that unneeded resources (e.g. location services) can be released.
/// seealso:
///
/// <ul>
///   <li>
///     <code>FollowPuckViewportState</code>
///   </li>
///   <li>
///     <code>OverviewViewportState</code>
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP13MapboxMapObjC16TMBViewportState_")
@protocol TMBViewportState
/// Registers a <code>handler</code> to receive the cameras being generated by this <code>ViewportState</code>.
/// This method is commonly used by <code>ViewportTransition</code> implementations to obtain the
/// target camera for transition animations. Transitions typically cannot start their animations until after
/// <code>handler</code> is invoked for the first time, so it’s a good idea for states to invoke <code>handler</code> with
/// the current camera if it’s not too stale rather than waiting for the next camera change to occur. To
/// increase the likelihood that a valid camera exists when a handler is registered, design
/// <code>ViewportState</code> implementations so that they start updating their internal state prior to when
/// they are passed to <code>Viewport/transition(to:transition:completion:)</code>.
/// The caller may either cancel the returned <code>Cancelable</code> <em>or</em> return <code>false</code> from
/// <code>handler</code> to indicate that it wishes to stop receiving updates. Following either of these events,
/// implemenations must no longer invoke <code>handler</code> and must release all strong references to it.
/// \param handler A closure that is invoked by the state whenever its camera changes. Returns
/// <code>true</code> to stay subscribed and <code>false</code> to unsubscribe. <code>handler</code> must be
/// invoked on the main queue.
///
/// \param camera The <code>ViewportState</code>’s most recent camera.
///
///
/// returns:
/// A <code>Cancelable</code> that the caller can use to unsubscribe.
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Tells this state that it is now responsible for updating the camera.
/// <code>Viewport</code> calls this method at the end of a successful transition into this state.
/// Implementations typically have a dependency on either <code>MapboxMap</code> so that they can use its
/// <code>MapboxMap/setCamera(to:)</code> method to change the camea or on
/// <code>CameraAnimationsManager</code> so that they can run camera animations.
- (void)startUpdatingCamera;
/// Tells this state that it is no longer responsible for updating the camera.
/// <code>Viewport</code> calls this method at the beginning of the transition out of this state.
/// Implementations must stop updating the camera immediately and should typically cancel any
/// ongoing animations that they started when this method is invoked.
- (void)stopUpdatingCamera;
@end


@interface TMBFollowPuckViewportState (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportState>
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (void)startUpdatingCamera;
- (void)stopUpdatingCamera;
@end


/// Expresses the different ways that <code>FollowPuckViewportState</code> can obtain values to use when
/// setting <code>CameraOptions/bearing</code>.
/// seealso:
/// <code>LocationOptions/puckBearingSource</code>
SWIFT_CLASS("_TtC13MapboxMapObjC33TMBFollowPuckViewportStateBearing")
@interface TMBFollowPuckViewportStateBearing : NSObject
@property (nonatomic, readonly, strong) NSNumber * _Nullable bearing;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> to a constant value.
/// \param bearing the constant value that should be used to set the camera bearing.
///
+ (TMBFollowPuckViewportStateBearing * _Nonnull)constant:(CLLocationDirection)bearing SWIFT_WARN_UNUSED_RESULT;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> based on the current
/// heading.
/// seealso:
///
/// <ul>
///   <li>
///     <code>LocationManager</code>
///   </li>
///   <li>
///     <code>Location/heading</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFollowPuckViewportStateBearing * _Nonnull heading;)
+ (TMBFollowPuckViewportStateBearing * _Nonnull)heading SWIFT_WARN_UNUSED_RESULT;
/// <code>FollowPuckViewportState</code> sets <code>CameraOptions/bearing</code> based on the current
/// course.
/// seealso:
///
/// <ul>
///   <li>
///     <code>LocationManager</code>
///   </li>
///   <li>
///     <code>Location/course</code>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFollowPuckViewportStateBearing * _Nonnull course;)
+ (TMBFollowPuckViewportStateBearing * _Nonnull)course SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configuration options for <code>FollowPuckViewportState</code>.
/// Each of the <code>CameraOptions</code>-related properties is optional, so that the state can be configured to
/// only modify certain aspects of the camera if desired. This can be used, to achieve effects like allowing
/// zoom gestures to work simultaneously with <code>FollowPuckViewportState</code>.
/// seealso:
/// <code>ViewportOptions/transitionsToIdleUponUserInteraction</code>
SWIFT_CLASS("_TtC13MapboxMapObjC33TMBFollowPuckViewportStateOptions")
@interface TMBFollowPuckViewportStateOptions : NSObject
/// The value to use for <code>CameraOptions/padding</code> when setting the camera. If <code>nil</code>, padding
/// will not be modified.
@property (nonatomic, strong) NSValue * _Nullable padding;
/// The value to use for <code>CameraOptions/zoom</code> when setting the camera. If <code>nil</code>, zoom will
/// not be modified.
@property (nonatomic, strong) NSNumber * _Nullable zoom;
/// Indicates how to obtain the value to use for <code>CameraOptions/bearing</code> when setting the
/// camera. If <code>nil</code>, bearing will not be modified.
@property (nonatomic, strong) TMBFollowPuckViewportStateBearing * _Nullable bearing;
/// The value to use for <code>CameraOptions/pitch</code> when setting the camera. If <code>nil</code>, pitch will
/// not be modified.
@property (nonatomic, strong) NSNumber * _Nullable pitch;
/// Memberwise initializer for <code>FollowPuckViewportStateOptions</code>.
/// All parameters have default values.
/// \param padding Defaults to <code>UIEdgeInsets.zero</code>.
///
/// \param zoom Defaults to 16.35.
///
/// \param bearing Defaults to <code>FollowPuckViewportStateBearing/heading</code>.
///
/// \param pitch Defaults to 45.
///
- (nonnull instancetype)initWithPadding:(NSValue * _Nullable)padding zoom:(NSNumber * _Nullable)zoom bearing:(TMBFollowPuckViewportStateBearing * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBFormatOptions")
@interface TMBFormatOptions : NSObject
/// Applies a scaling factor on text-size as specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable fontScaleValue;
/// Applies a scaling factor on text-size as specified by the root layout property.
@property (nonatomic, strong) NSNumber * _Nullable fontScale;
/// Overrides the font stack specified by the root layout property.
@property (nonatomic, strong) TMBValue * _Nullable textFontValue;
/// Overrides the font stack specified by the root layout property.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// Overrides the color specified by the root paint property.
@property (nonatomic, strong) TMBValue * _Nullable textColorValue;
/// Overrides the color specified by the root paint property.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC9TMBSource_")
@protocol TMBSource
/// Rendering type of this source.
@property (nonatomic, readonly) enum TMBSourceType type;
@end

@class TMBGeoJSONSourceData;
@class TMBPromoteId;

/// A GeoJSON data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geo_json">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC16TMBGeoJSONSource")
@interface TMBGeoJSONSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a GeoJSON file, or inline GeoJSON.
@property (nonatomic, strong) TMBGeoJSONSourceData * _Nullable data;
/// Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels).
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance.
@property (nonatomic, strong) NSNumber * _Nullable buffer;
/// Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
@property (nonatomic, strong) NSNumber * _Nullable tolerance;
/// If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new <code>Point</code> features in the source with additional properties:
/// <ul>
///   <li>
///     <code>cluster</code> Is <code>true</code> if the point is a cluster
///   </li>
///   <li>
///     <code>cluster_id</code> A unqiue id for the cluster to be used in conjunction with the <a href="https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom">cluster inspection methods</a>
///   </li>
///   <li>
///     <code>point_count</code> Number of original points grouped into this cluster
///   </li>
///   <li>
///     <code>point_count_abbreviated</code> An abbreviated point count
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nullable cluster;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile.
@property (nonatomic, strong) NSNumber * _Nullable clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic, strong) NSNumber * _Nullable clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>. <code>operator</code> is any expression function that accepts at least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the cluster contains; <code>map_expression</code> produces the value of a single point.
/// Example: <code>{"sum": ["+", ["get", "scalerank"]]}</code>.
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value, e.g.:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Whether to calculate line distance metrics. This is required for line layers that specify <code>line-gradient</code> values.
@property (nonatomic, strong) NSNumber * _Nullable lineMetrics;
/// Whether to generate ids for the geojson features. When enabled, the <code>feature.id</code> property will be auto assigned based on its index in the <code>features</code> array, over-writing any previous values.
@property (nonatomic, strong) NSNumber * _Nullable generateId;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>.
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum TMBGeoJSONSourceType : NSInteger;
@class MBXFeature;

SWIFT_CLASS("_TtC13MapboxMapObjC20TMBGeoJSONSourceData")
@interface TMBGeoJSONSourceData : NSObject
@property (nonatomic, readonly) enum TMBGeoJSONSourceType type;
+ (TMBGeoJSONSourceData * _Nonnull)urlWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureWithFeature:(MBXFeature * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)featureCollectionWithFeatures:(NSArray<MBXFeature *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)geometryWithGeometry:(MBXGeometry * _Nonnull)geometry SWIFT_WARN_UNUSED_RESULT;
+ (TMBGeoJSONSourceData * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Captures potential values of the <code>data</code> property of a GeoJSONSource
typedef SWIFT_ENUM(NSInteger, TMBGeoJSONSourceType, open) {
/// The <code>data</code> property can be a url
  TMBGeoJSONSourceTypeUrl = 0,
/// The <code>data</code> property can be a feature
  TMBGeoJSONSourceTypeFeature = 1,
/// The <code>data</code> property can be a feature collection
  TMBGeoJSONSourceTypeFeatureCollection = 2,
/// The <code>data</code> property can be a geometry with no associated properties.
  TMBGeoJSONSourceTypeGeometry = 3,
/// Empty data to be used for initialization
  TMBGeoJSONSourceTypeEmpty = 4,
};

@protocol TMBGestureManagerDelegate;
@class TMBGestureOptions;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureManager")
@interface TMBGestureManager : NSObject
@property (nonatomic, weak) id <TMBGestureManagerDelegate> _Nullable delegate;
- (TMBGestureOptions * _Nonnull)gestureOptions SWIFT_WARN_UNUSED_RESULT;
/// The gesture recognizer for the pan gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull panGestureRecognizer;
/// The gesture recognizer for the “pinch to zoom” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pinchGestureRecognizer;
/// The gesture recognizer for the rotate gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull rotateGestureRecognizer;
/// The gesture recognizer for the pitch gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull pitchGestureRecognizer;
/// The gesture recognizer for the “double tap to zoom in” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTapToZoomInGestureRecognizer;
/// The gesture recognizer for the “double touch to zoom out” gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull doubleTouchToZoomOutGestureRecognizer;
/// The gesture recognizer for the quickZoom gesture
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull quickZoomGestureRecognizer;
/// The gesture recognizer for the single tap gesture
/// note:
/// The single tap gesture recognizer is primarily used to route tap events to the
/// <code>*AnnotationManager</code>s. You can add a target-action pair to this gesture recognizer
/// to be notified when a single tap occurs on the map.
@property (nonatomic, readonly, strong) UIGestureRecognizer * _Nonnull singleTapGestureRecognizer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBGestureType : NSInteger;

SWIFT_PROTOCOL("_TtP13MapboxMapObjC25TMBGestureManagerDelegate_")
@protocol TMBGestureManagerDelegate
/// Informs the delegate that a gesture has begun.
- (void)gestureManagerWithDidBegin:(enum TMBGestureType)gestureType;
/// Informs the delegate that a gesture has ended and whether there will be additional animations after the gesture
/// has completed. Does not indicate whether gesture-based animations have completed.
- (void)gestureManagerWithDidEnd:(enum TMBGestureType)gestureType willAnimate:(BOOL)willAnimate;
/// Informs the delegate that animations triggered due to a gesture have ended.
- (void)gestureManagerWithDidEndAnimatingFor:(enum TMBGestureType)gestureType;
@end

enum TMBPanMode : NSInteger;

/// Configuration options for the built-in gestures
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBGestureOptions")
@interface TMBGestureOptions : NSObject
/// Whether the single-touch pan gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL panEnabled;
/// Whether the pinch gesture is enabled. Allows panning, rotating, and zooming.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchEnabled;
/// Whether rotation gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL rotateEnabled;
/// Whether rotation is enabled for the pinch to zoom gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL simultaneousRotateAndPinchZoomEnabled;
/// Whether zoom is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchZoomEnabled;
/// Whether pan is enabled for the pinch gesture.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pinchPanEnabled;
/// Whether the pitch gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL pitchEnabled;
/// Whether double tapping the map with one touch results in a zoom-in animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTapToZoomInEnabled;
/// Whether single tapping the map with two touches results in a zoom-out animation.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL doubleTouchToZoomOutEnabled;
/// Whether the quick zoom gesture is enabled.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL quickZoomEnabled;
/// Configures the directions in which the map is allowed to move during a pan gesture.
/// Defaults to <code>PanMode.horizontalAndVertical</code>. Called <code>scrollMode</code> in
/// the Android SDK for consistency with platform conventions.
@property (nonatomic) enum TMBPanMode panMode;
/// A constant factor that determines how quickly pan deceleration animations happen.
/// Multiplied with the velocity vector once per millisecond during deceleration animations.
/// Defaults to <code>UIScrollView.DecelerationRate.normal.rawValue</code>
@property (nonatomic) CGFloat panDecelerationFactor;
/// By default, gestures rotate and zoom around the center of the gesture. Set this property to rotate and zoom around a fixed point instead.
/// This property will be ignored by the pinch gesture if <code>GestureOptions/pinchPanEnabled</code> is set to <code>true</code>.
@property (nonatomic, strong) NSValue * _Nullable focalPoint;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBGestureType, open) {
/// The pan gesture
  TMBGestureTypePan = 0,
/// The pinch gesture
  TMBGestureTypePinch = 1,
/// The pitch gesture
  TMBGestureTypePitch = 2,
/// The double tap to zoom in gesture
  TMBGestureTypeDoubleTapToZoomIn = 3,
/// The double touch to zoom out gesture
  TMBGestureTypeDoubleTouchToZoomOut = 4,
/// The quick zoom gesture
  TMBGestureTypeQuickZoom = 5,
/// The single tap gesture
  TMBGestureTypeSingleTap = 6,
};


/// A heatmap.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-heatmap">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBHeatmapLayer")
@interface TMBHeatmapLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses <code>["heatmap-density"]</code> as input.
@property (nonatomic, strong) TMBValue * _Nullable heatmapColor;
/// Similar to <code>heatmap-weight</code> but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.
@property (nonatomic, strong) TMBValue * _Nullable heatmapIntensity;
/// Transition options for <code>heatmapIntensity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapIntensityTransition;
/// The global opacity at which the heatmap layer will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable heatmapOpacity;
/// Transition options for <code>heatmapOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapOpacityTransition;
/// Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. <code>queryRenderedFeatures</code> on heatmap layers will return points within this radius.
@property (nonatomic, strong) TMBValue * _Nullable heatmapRadius;
/// Transition options for <code>heatmapRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable heatmapRadiusTransition;
/// A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.
@property (nonatomic, strong) TMBValue * _Nullable heatmapWeight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Direction of light source when map is rotated.
typedef SWIFT_ENUM(NSInteger, TMBHillshadeIlluminationAnchor, open) {
/// The hillshade illumination is relative to the north direction.
  TMBHillshadeIlluminationAnchorMap = 0,
/// The hillshade illumination is relative to the top of the viewport.
  TMBHillshadeIlluminationAnchorViewport = 1,
};


/// Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-hillshade">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBHillshadeLayer")
@interface TMBHillshadeLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The shading color used to accentuate rugged terrain like sharp cliffs and gorges.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeAccentColor;
/// Transition options for <code>hillshadeAccentColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeAccentColorTransition;
/// Intensity of the hillshade
@property (nonatomic, strong) TMBValue * _Nullable hillshadeExaggeration;
/// Transition options for <code>hillshadeExaggeration</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeExaggerationTransition;
/// The shading color of areas that faces towards the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeHighlightColor;
/// Transition options for <code>hillshadeHighlightColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeHighlightColorTransition;
/// Direction of light source when map is rotated.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationAnchor;
/// The direction of the light source used to generate the hillshading with 0 as the top of the viewport if <code>hillshade-illumination-anchor</code> is set to <code>viewport</code> and due north if <code>hillshade-illumination-anchor</code> is set to <code>map</code>.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeIlluminationDirection;
/// The shading color of areas that face away from the light source.
@property (nonatomic, strong) TMBValue * _Nullable hillshadeShadowColor;
/// Transition options for <code>hillshadeShadowColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable hillshadeShadowColorTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Part of the icon placed closest to the anchor.
typedef SWIFT_ENUM(NSInteger, TMBIconAnchor, open) {
/// The center of the icon is placed closest to the anchor.
  TMBIconAnchorCenter = 0,
/// The left side of the icon is placed closest to the anchor.
  TMBIconAnchorLeft = 1,
/// The right side of the icon is placed closest to the anchor.
  TMBIconAnchorRight = 2,
/// The top of the icon is placed closest to the anchor.
  TMBIconAnchorTop = 3,
/// The bottom of the icon is placed closest to the anchor.
  TMBIconAnchorBottom = 4,
/// The top left corner of the icon is placed closest to the anchor.
  TMBIconAnchorTopLeft = 5,
/// The top right corner of the icon is placed closest to the anchor.
  TMBIconAnchorTopRight = 6,
/// The bottom left corner of the icon is placed closest to the anchor.
  TMBIconAnchorBottomLeft = 7,
/// The bottom right corner of the icon is placed closest to the anchor.
  TMBIconAnchorBottomRight = 8,
};

/// Orientation of icon when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBIconPitchAlignment, open) {
/// The icon is aligned to the plane of the map.
  TMBIconPitchAlignmentMap = 0,
/// The icon is aligned to the plane of the viewport.
  TMBIconPitchAlignmentViewport = 1,
/// Automatically matches the value of {@link ICON_ROTATION_ALIGNMENT}.
  TMBIconPitchAlignmentAuto = 2,
};

/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
typedef SWIFT_ENUM(NSInteger, TMBIconRotationAlignment, open) {
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns icons east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns icon x-axes with the line.
  TMBIconRotationAlignmentMap = 0,
/// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
  TMBIconRotationAlignmentViewport = 1,
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_MAP}.
  TMBIconRotationAlignmentAuto = 2,
};

/// Scales the icon to fit around the associated text.
typedef SWIFT_ENUM(NSInteger, TMBIconTextFit, open) {
/// The icon is displayed at its intrinsic aspect ratio.
  TMBIconTextFitNone = 0,
/// The icon is scaled in the x-dimension to fit the width of the text.
  TMBIconTextFitWidth = 1,
/// The icon is scaled in the y-dimension to fit the height of the text.
  TMBIconTextFitHeight = 2,
/// The icon is scaled in both x- and y-dimensions.
  TMBIconTextFitBoth = 3,
};

/// Controls the frame of reference for <code>icon-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBIconTranslateAnchor, open) {
/// Icons are translated relative to the map.
  TMBIconTranslateAnchorMap = 0,
/// Icons are translated relative to the viewport.
  TMBIconTranslateAnchorViewport = 1,
};


/// An image data source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#image">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBImageSource")
@interface TMBImageSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// URL that points to an image.
@property (nonatomic, copy) NSString * _Nullable url;
/// Corners of image specified in longitude, latitude pairs.
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable coordinates;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// A <code>ViewportTransition</code> implementation that transitions immediately without any animation.
/// Use <code>Viewport/makeImmediateViewportTransition()</code> to create instances of this class.
SWIFT_CLASS("_TtC13MapboxMapObjC30TMBImmediateViewportTransition")
@interface TMBImmediateViewportTransition : NSObject <TMBViewportTransition>
- (TMBCancelable * _Nonnull)runTo:(id <TMBViewportState> _Nonnull)toState completion:(void (^ _Nonnull)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Information about a layer
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLayerInfo")
@interface TMBLayerInfo : NSObject
/// The identifier of the layer
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the layer
@property (nonatomic) enum TMBLayerType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBLayerPositionType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC16TMBLayerPosition")
@interface TMBLayerPosition : NSObject
@property (nonatomic, readonly, strong) id _Nonnull arg;
@property (nonatomic, readonly) enum TMBLayerPositionType type;
- (nonnull instancetype)init:(enum TMBLayerPositionType)type arg:(id _Nonnull)arg OBJC_DESIGNATED_INITIALIZER;
+ (TMBLayerPosition * _Nonnull)atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)belowLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
+ (TMBLayerPosition * _Nonnull)aboveLayerId:(NSString * _Nonnull)layerId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBLayerPositionType, open) {
  TMBLayerPositionTypeAt = 0,
  TMBLayerPositionTypeAbove = 1,
  TMBLayerPositionTypeBelow = 2,
};

/// Layer rendering types
typedef SWIFT_ENUM(NSInteger, TMBLayerType, open) {
/// A filled polygon with an optional stroked border.
  TMBLayerTypeFill = 0,
/// A stroked line.
  TMBLayerTypeLine = 1,
/// An icon or a text label.
  TMBLayerTypeSymbol = 2,
/// A filled circle.
  TMBLayerTypeCircle = 3,
/// A heatmap.
  TMBLayerTypeHeatmap = 4,
/// An extruded (3D) polygon.
  TMBLayerTypeFillExtrusion = 5,
/// Raster map textures such as satellite imagery.
  TMBLayerTypeRaster = 6,
/// Client-side hillshading visualization based on DEM data.
/// Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.
  TMBLayerTypeHillshade = 7,
/// The background color or pattern of the map.
  TMBLayerTypeBackground = 8,
/// Layer representing the location indicator
  TMBLayerTypeLocationIndicator = 9,
/// Layer representing the sky
  TMBLayerTypeSky = 10,
  TMBLayerTypeModel = 11,
};


/// The global light source.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#light">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBLight")
@interface TMBLight : NSObject
/// Whether extruded geometries are lit relative to the map or viewport.
@property (nonatomic, strong) NSNumber * _Nullable anchor;
/// Color tint for lighting extruded geometries.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Transition property for <code>color</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable colorTransition;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
@property (nonatomic, strong) NSNumber * _Nullable intensity;
/// Transition property for <code>intensity</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable intensityTransition;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when <code>light.anchor</code> is set to <code>viewport</code> corresponds to the top of the viewport, or 0 degree when <code>light.anchor</code> is set to <code>map</code> corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable position;
/// Transition property for <code>position</code>
@property (nonatomic, strong) TMBStyleTransition * _Nullable positionTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The display of line endings.
typedef SWIFT_ENUM(NSInteger, TMBLineCap, open) {
/// A cap with a squared-off end which is drawn to the exact endpoint of the line.
  TMBLineCapButt = 0,
/// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
  TMBLineCapRound = 1,
/// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
  TMBLineCapSquare = 2,
};

/// The display of lines when joining.
typedef SWIFT_ENUM(NSInteger, TMBLineJoin, open) {
/// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
  TMBLineJoinBevel = 0,
/// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
  TMBLineJoinRound = 1,
/// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
  TMBLineJoinMiter = 2,
};


/// A stroked line.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-line">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBLineLayer")
@interface TMBLineLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// The display of line endings.
@property (nonatomic, strong) TMBValue * _Nullable lineCap;
/// The display of lines when joining.
@property (nonatomic, strong) TMBValue * _Nullable lineJoin;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) TMBValue * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) TMBValue * _Nullable lineRoundLimit;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) TMBValue * _Nullable lineBlur;
/// Transition options for <code>lineBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineBlurTransition;
/// The color with which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineColor;
/// Transition options for <code>lineColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineColorTransition;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable lineDasharray;
/// Transition options for <code>lineDasharray</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineDasharrayTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) TMBValue * _Nullable lineGapWidth;
/// Transition options for <code>lineGapWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineGapWidthTransition;
/// Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify <code>"lineMetrics": true</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineGradient;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) TMBValue * _Nullable lineOffset;
/// Transition options for <code>lineOffset</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOffsetTransition;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable lineOpacity;
/// Transition options for <code>lineOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineOpacityTransition;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, strong) TMBValue * _Nullable linePattern;
/// Transition options for <code>linePattern</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable linePatternTransition SWIFT_DEPRECATED_MSG("This property is deprecated and will be removed in the future. Setting this will have no effect.");
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslate;
/// Transition options for <code>lineTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineTranslateTransition;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, strong) TMBValue * _Nullable lineTrimOffset;
/// Stroke thickness.
@property (nonatomic, strong) TMBValue * _Nullable lineWidth;
/// Transition options for <code>lineWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable lineWidthTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Controls the frame of reference for <code>line-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBLineTranslateAnchor, open) {
/// The line is translated relative to the map.
  TMBLineTranslateAnchorMap = 0,
/// The line is translated relative to the viewport.
  TMBLineTranslateAnchorViewport = 1,
};


/// Location Indicator layer.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-location-indicator">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBLocationIndicatorLayer")
@interface TMBLocationIndicatorLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Name of image in sprite to use as the middle of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearingImage;
/// Name of image in sprite to use as the background of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable shadowImage;
/// Name of image in sprite to use as the top of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable topImage;
/// The accuracy, in meters, of the position source used to retrieve the position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadius;
/// Transition options for <code>accuracyRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusTransition;
/// The color for drawing the accuracy radius border. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusBorderColor;
/// Transition options for <code>accuracyRadiusBorderColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusBorderColorTransition;
/// The color for drawing the accuracy radius, as a circle. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable accuracyRadiusColor;
/// Transition options for <code>accuracyRadiusColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable accuracyRadiusColorTransition;
/// The bearing of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable bearing;
/// Transition options for <code>bearing</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingTransition;
/// The size of the bearing image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable bearingImageSize;
/// Transition options for <code>bearingImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable bearingImageSizeTransition;
/// The color of the circle emphasizing the indicator. To adjust transparency, set the alpha component of the color accordingly.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleColor;
/// Transition options for <code>emphasisCircleColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleColorTransition;
/// The radius, in pixel, of the circle emphasizing the indicator, drawn between the accuracy radius and the indicator shadow.
@property (nonatomic, strong) TMBValue * _Nullable emphasisCircleRadius;
/// Transition options for <code>emphasisCircleRadius</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable emphasisCircleRadiusTransition;
/// The displacement off the center of the top image and the shadow image when the pitch of the map is greater than 0. This helps producing a three-dimensional appearence.
@property (nonatomic, strong) TMBValue * _Nullable imagePitchDisplacement;
/// An array of [latitude, longitude, altitude] position of the location indicator.
@property (nonatomic, strong) TMBValue * _Nullable location;
/// Transition options for <code>location</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationTransition;
/// The opacity of the entire location indicator layer.
@property (nonatomic, strong) TMBValue * _Nullable locationIndicatorOpacity;
/// Transition options for <code>locationIndicatorOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable locationIndicatorOpacityTransition;
/// The amount of the perspective compensation, between 0 and 1. A value of 1 produces a location indicator of constant width across the screen. A value of 0 makes it scale naturally according to the viewing projection.
@property (nonatomic, strong) TMBValue * _Nullable perspectiveCompensation;
/// The size of the shadow image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable shadowImageSize;
/// Transition options for <code>shadowImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable shadowImageSizeTransition;
/// The size of the top image, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable topImageSize;
/// Transition options for <code>topImageSize</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable topImageSizeTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class Location;
@protocol TMBLocationPermissionsDelegate;
@protocol TMBLocationProvider;
@protocol LocationConsumer;
@class TMBLocationOptions;
@protocol PuckLocationConsumer;

/// An object responsible for notifying the map view about location-related events,
/// such as a change in the device’s location.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationManager")
@interface TMBLocationManager : NSObject
/// Represents the latest location received from the location provider.
@property (nonatomic, readonly, strong) Location * _Nullable latestLocation;
/// The object that acts as the delegate of the location manager.
@property (nonatomic, weak) id <TMBLocationPermissionsDelegate> _Nullable delegate;
/// The current underlying location provider. Use <code>overrideLocationProvider(with:)</code> to substitute a different provider.
/// Avoid manipulating the location provider directly. LocationManager assumes full responsibility for starting and stopping location
/// and heading updates as needed.
@property (nonatomic, readonly, strong) id <TMBLocationProvider> _Null_unspecified locationProvider;
/// The set of objects that are currently consuming location updates.
/// The returned object is a copy of the underlying one, so mutating it will have no effect.
@property (nonatomic, readonly, strong) NSHashTable<id <LocationConsumer>> * _Nonnull consumers;
/// Configuration options for the location manager.
@property (nonatomic, strong) TMBLocationOptions * _Nonnull options;
- (void)overrideLocationProviderWith:(id <TMBLocationProvider> _Nonnull)customLocationProvider;
/// The location manager holds weak references to consumers, client code should retain these references.
- (void)addLocationConsumer:(id <LocationConsumer> _Nonnull)consumer;
/// Removes a location consumer from the location manager.
- (void)removeLocationConsumer:(id <LocationConsumer> _Nonnull)consumer;
/// Adds <code>PuckLocationConsumer</code> to the location manager.
/// An instance of <code>PuckLocationConsumer</code> will get the accurate (interpolated) location of the puck as it moves,
/// as opposed to the <code>LocationConsumer</code> that gets updated only when the <code>LocationProvider</code> has emitted a new location.
/// important:
/// The location manager holds a weak reference to the consumer, thus client should retain these references.
- (void)addPuckLocationConsumer:(id <PuckLocationConsumer> _Nonnull)consumer;
/// Removes a <code>PuckLocationConsumer</code> from the location manager.
- (void)removePuckLocationConsumer:(id <PuckLocationConsumer> _Nonnull)consumer;
/// Allows a custom case to request full accuracy
- (void)requestTemporaryFullAccuracyPermissionsWithPurposeKey:(NSString * _Nonnull)purposeKey SWIFT_AVAILABILITY(ios,introduced=14.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LocationManager;

@interface TMBLocationManager (SWIFT_EXTENSION(MapboxMapObjC)) <LocationPermissionsDelegate>
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(LocationManager * _Nonnull)locationManager SWIFT_WARN_UNUSED_RESULT;
- (void)locationManager:(LocationManager * _Nonnull)locationManager didChangeAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuthorization;
- (void)locationManager:(LocationManager * _Nonnull)locationManager didFailToLocateUserWithError:(NSError * _Nonnull)error;
@end

enum TMBPuckType : NSInteger;
@class TMBPuck2DConfiguration;
@class TMBPuck3DConfiguration;
enum TMBPuckBearingSource : NSInteger;

/// A struct to configure a <code>LocationManager</code>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLocationOptions")
@interface TMBLocationOptions : NSObject
/// Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
/// The default value of this property is <code>kCLDistanceFilterNone</code>.
@property (nonatomic) CLLocationDistance distanceFilter;
/// Specifies the accuracy of the location data.
/// The default value is <code>kCLLocationAccuracyBest</code>.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/// Sets the type of user activity associated with the location updates.
/// The default value is <code>CLActivityType.other</code>.
@property (nonatomic) CLActivityType activityType;
@property (nonatomic, readonly) enum TMBPuckType puckType;
/// Sets the type of puck that should be used
@property (nonatomic, strong) TMBPuck2DConfiguration * _Nullable puck2DConfiguration;
@property (nonatomic, strong) TMBPuck3DConfiguration * _Nullable puck3DConfiguration;
/// Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
/// The default value is <code>PuckBearingSource.heading</code>.
@property (nonatomic) enum TMBPuckBearingSource puckBearingSource;
/// Whether the puck rotates to track the bearing source.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL puckBearingEnabled;
/// Initializes a <code>LocationOptions</code>.
/// \param distanceFilter Specifies the minimum distance (measured in meters) a device must move horizontally
/// before a location update is generated.
///
/// \param desiredAccuracy Specifies the accuracy of the location data.
///
/// \param activityType Sets the type of user activity associated with the location.
///
/// \param puckType Sets the type of puck that should be used.
///
/// \param puckBearingSource Specifies if a <code>Puck</code> should use <code>Heading</code> or <code>Course</code> for the bearing.
///
/// \param puckBearingEnabled Whether the puck rotates to track the bearing source.
///
- (nonnull instancetype)initWithDistanceFilter:(CLLocationDistance)distanceFilter desiredAccuracy:(CLLocationAccuracy)desiredAccuracy activityType:(CLActivityType)activityType puck2DConfiguration:(TMBPuck2DConfiguration * _Nullable)puck2DConfiguration puck3DConfiguration:(TMBPuck3DConfiguration * _Nullable)puck3DConfiguration puckBearingSource:(enum TMBPuckBearingSource)puckBearingSource puckBearingEnabled:(BOOL)puckBearingEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>LocationPermissionsDelegate</code> protocol defines a set of optional methods that you
/// can use to receive events from an associated location manager object.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC30TMBLocationPermissionsDelegate_")
@protocol TMBLocationPermissionsDelegate
@optional
/// Tells the delegate that an attempt to locate the user’s position failed.
/// \param locationManager The location manager that is tracking the user’s location.
///
/// \param error An error object containing the reason why location tracking failed.
///
- (void)locationManager:(TMBLocationManager * _Nonnull)locationManager didFailToLocateUserWithError:(NSError * _Nonnull)error;
/// Tells the delegate that the accuracy authorization has changed.
/// \param locationManager The location manager that is tracking the user’s location.
///
/// \param accuracyAuthorization The updated accuracy authorization value.
///
- (void)locationManager:(TMBLocationManager * _Nonnull)locationManager didChangeAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuthorization;
/// Asks the delegate whether the heading calibration alert should be displayed.
/// \param locationManager The location manager object coordinating the display of the heading calibration alert.
///
///
/// returns:
/// <code>true</code> if you want to allow the heading calibration alert to be displayed; <code>false</code> if you do not.
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(TMBLocationManager * _Nonnull)locationManager SWIFT_WARN_UNUSED_RESULT;
@end

@class CLHeading;
@protocol TMBLocationProviderDelegate;

/// The <code>LocationProvider</code> protocol defines a set of methods that a class must
/// implement in order to serve as the location events provider.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC19TMBLocationProvider_")
@protocol TMBLocationProvider
/// Configures the location provider.
@property (nonatomic, strong) TMBLocationOptions * _Nonnull locationProviderOptions;
/// Returns the current localization authorization status.
@property (nonatomic, readonly) CLAuthorizationStatus authorizationStatus;
/// Returns the current accuracy authorization that the user has granted.
/// The default value is <code>CLAccuracyAuthorization.fullAccuracy</code> on iOS versions prior to iOS 14.
@property (nonatomic, readonly) CLAccuracyAuthorization accuracyAuthorization;
/// Returns the latest heading update received, or <code>nil</code> if none is available.
@property (nonatomic, readonly, strong) CLHeading * _Nullable heading;
/// Sets the delegate for <code>LocationProvider</code>. The implementation should hold a weak reference to the
/// provided delegate to avoid creating a strong reference cycle with <code>LocationManager</code>.
/// note:
/// This method should only be called by <code>LocationManager</code>. To allow other objects to
/// participate in location updates, add a <code>LocationConsumer</code> to the <code>LocationManager</code>
/// instead.
- (void)setDelegate:(id <TMBLocationProviderDelegate> _Nonnull)delegate;
/// Requests permission to use the location services whenever the app is running.
- (void)requestAlwaysAuthorization;
/// Requests permission to use the location services while the app is in
/// the foreground.
- (void)requestWhenInUseAuthorization;
/// Requests temporary permission for full accuracy
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(NSString * _Nonnull)purposeKey SWIFT_AVAILABILITY(ios,introduced=14.0);
/// Starts the generation of location updates that reports the device’s current location.
- (void)startUpdatingLocation;
/// Stops the generation of location updates.
- (void)stopUpdatingLocation;
/// Specifies a physical device orientation.
@property (nonatomic) CLDeviceOrientation headingOrientation;
/// Starts the generation of heading updates that reports the devices’s current heading.
- (void)startUpdatingHeading;
/// Stops the generation of heading updates.
- (void)stopUpdatingHeading;
/// Dismisses immediately the heading calibration view from screen.
- (void)dismissHeadingCalibrationDisplay;
@end

@class CLLocation;

/// The <code>LocationProviderDelegate</code> protocol defines a set of methods that respond
/// to location updates from an <code>LocationProvider</code>.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC27TMBLocationProviderDelegate_")
@protocol TMBLocationProviderDelegate
/// Notifies the delegate with the new location data.
/// \param provider The location provider reporting the update.
///
/// \param locations An array of <code>CLLocation</code> objects in chronological order,
/// with the last object representing the most recent location.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Notifies the delegate with the new heading data.
/// \param provider The location provider reporting the update.
///
/// \param newHeading The new heading update.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didUpdateHeading:(CLHeading * _Nonnull)newHeading;
/// Notifies the delegate that the location provider was unable to retrieve
/// location updates.
/// \param provider The location provider reporting the error.
///
/// \param error An error object containing the error code that indicates
/// why the location provider failed.
///
- (void)locationProvider:(id <TMBLocationProvider> _Nonnull)provider didFailWithError:(NSError * _Nonnull)error;
/// Notifies the delegate that the location provider changed accuracy authorization
/// \param provider The location provider reporting the error.
///
/// \param manager The location manager that is reporting the change
///
- (void)locationProviderDidChangeAuthorization:(id <TMBLocationProvider> _Nonnull)provider;
@end


/// Used to configure position, margin, and visibility for the map’s logo view.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBLogoViewOptions")
@interface TMBLogoViewOptions : NSObject
/// The position of the logo view.
/// The default value for this property is <code>.bottomLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the logo view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBStyle;
@class MBMCoordinateBounds;
@class MBMCoordinateBoundsZoom;
@class MBMFreeCameraOptions;
@class MBMCameraBounds;
@class MBMCameraBoundsOptions;

/// MapboxMap provides access to the map model, including the camera, style, observable map events,
/// and querying rendered features. Obtain the MapboxMap instance for a <code>MapView</code> via MapView.mapboxMap.
/// important:
/// MapboxMap should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC12TMBMapboxMap")
@interface TMBMapboxMap : NSObject
/// The <code>style</code> object supports run time styling.
@property (nonatomic, readonly, strong) TMBStyle * _Nonnull style;
/// Triggers a repaint of the map. Calling this method is typically unnecessary but
/// may be needed if using a custom layer that needs to be redrawn independently
/// of other map changes.
- (void)triggerRepaint;
/// Loads a <code>style</code> from a StyleURI, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI StyleURI to load
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleURI:(NSString * _Nonnull)styleUri completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
/// Loads a <code>style</code> from a JSON string, calling a completion closure when the
/// style is fully loaded or there has been an error during load.
/// \param styleURI Style JSON string
///
/// \param completion Closure called when the style has been fully loaded. The
/// <code>Result</code> type encapsulates the <code>Style</code> or error that occurred. See
/// <code>MapLoadingError</code>
///
- (void)loadStyleJSON:(NSString * _Nonnull)JSON completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
/// When loading a map, if <code>prefetchZoomDelta</code> is set to any number greater
/// than 0, the map will first request a tile for <code>zoom - prefetchZoomDelta</code>
/// in an attempt to display a full map at lower resolution as quick as
/// possible.
/// It will get clamped at the tile source minimum zoom. The default delta
/// is 4.
@property (nonatomic) uint8_t prefetchZoomDelta;
/// Defines whether multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude.
/// If disabled, when the map is zoomed out far enough that a single representation of the world does not fill the map’s entire container,
/// there will be blank space beyond 180 and -180 degrees longitude.
/// In this case, features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map
/// and the other on the left edge of the map) at every zoom level.
/// By default, <code>shouldRenderWorldCopies</code> is set to <code>true</code>.
@property (nonatomic) BOOL shouldRenderWorldCopies;
/// Gets the resource options for the map.
/// All optional fields of the returned object are initialized with the
/// actual values.
/// note:
/// The result of this property is different from the <code>ResourceOptions</code>
/// that were provided to the map’s initializer.
@property (nonatomic, readonly, strong) MBMResourceOptions * _Nonnull resourceOptions;
/// Clears temporary map data.
/// Clears temporary map data from the data path defined in the given resource
/// options. Useful to reduce the disk usage or in case the disk cache contains
/// invalid data.
/// note:
/// Calling this API will affect all maps that use the same data path
/// and does not affect persistent map data like offline style packages.
/// \param resourceOptions The <code>resource options</code> that contain the map data path
/// to be used
///
/// \param completion Called once the request is complete
///
+ (void)clearDataFor:(MBMResourceOptions * _Nonnull)resourceOptions completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Gets elevation for the given coordinate.
/// note:
/// Elevation is only available for the visible region on the screen.
/// \param coordinate Coordinate for which to return the elevation.
///
///
/// returns:
/// Elevation (in meters) multiplied by current terrain
/// exaggeration, or empty if elevation for the coordinate is not available.
- (NSNumber * _Nullable)elevationAt:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Transforms a view’s frame into a set of coordinate bounds
/// \param rect The <code>rect</code> whose bounds will be transformed into a set of map coordinate bounds.
///
///
/// returns:
/// A <code>CoordinateBounds</code> object that represents the southwest and northeast corners of the view’s bounds.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsFor:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Transforms a set of map coordinate bounds to a <code>CGRect</code> relative to the <code>MapView</code>.
/// \param coordinateBounds The <code>coordinateBounds</code> that will be converted into a rect relative to the <code>MapView</code>
///
///
/// returns:
/// A <code>CGRect</code> whose corners represent the vertices of a set of <code>CoordinateBounds</code>.
- (CGRect)rectFor:(MBMCoordinateBounds * _Nonnull)coordinateBounds SWIFT_WARN_UNUSED_RESULT;
/// The array of <code>MapDebugOptions</code>. Setting this property to an empty array
/// disables previously enabled <code>MapDebugOptions</code>.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull debugOptions;
/// Returns the map’s options
@property (nonatomic, readonly, strong) MBMMapOptions * _Nonnull options;
/// Calculates a <code>CameraOptions</code> to fit a <code>CoordinateBounds</code>
/// This API isn’t supported by Globe projection.
/// \param coordinateBounds The coordinate bounds that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraForCoordinateBounds:(MBMCoordinateBounds * _Nonnull)coordinateBounds padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates.
/// This API isn’t supported by Globe projection.
/// \param coordinates Array of coordinates that should fit within the new viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraForCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a list of coordinates into a sub-rect of the map.
/// Adjusts the zoom of <code>camera</code> to fit <code>coordinates</code> into <code>rect</code>.
/// Returns the provided camera with zoom adjusted to fit coordinates into
/// <code>rect</code>, so that the coordinates on the left, top and right of the effective
/// camera center at the principal point of the projection (defined by padding)
/// fit into the rect.
/// This API isn’t supported by Globe projection.
/// note:
///
/// This method may fail if the principal point of the projection is not
/// inside <code>rect</code> or if there is insufficient screen space, defined by
/// principal point and rect, to fit the geometry.
/// \param coordinates The coordinates to frame within <code>rect</code>.
///
/// \param camera The camera for which the zoom should be adjusted to fit <code>coordinates</code>. <code>camera.center</code> must be non-nil.
///
/// \param rect The rectangle inside of the map that should be used to frame <code>coordinates</code>.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints, or <code>cameraOptions</code> if an error occurs.
- (MBMCameraOptions * _Nonnull)cameraFor:(NSArray<NSValue *> * _Nonnull)coordinates camera:(MBMCameraOptions * _Nonnull)camera rect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Calculates a <code>CameraOptions</code> to fit a geometry
/// This API isn’t supported by Globe projection.
/// \param geometry The geoemtry that will be displayed within the viewport.
///
/// \param padding The new padding to be used by the camera.
///
/// \param bearing The new bearing to be used by the camera.
///
/// \param pitch The new pitch to be used by the camera.
///
///
/// returns:
/// A <code>CameraOptions</code> that fits the provided constraints
- (MBMCameraOptions * _Nonnull)cameraFor:(MBXGeometry * _Nonnull)geometry padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds corresponding to a given <code>CameraOptions</code>
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsForCameraBounds:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds to a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the coordinate bounds will be returned.
///
///
/// returns:
/// <code>CoordinateBounds</code> for the given <code>CameraOptions</code>.
- (MBMCoordinateBounds * _Nonnull)coordinateBoundsUnwrappedFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Returns the unwrapped coordinate bounds and zoom for a given <code>CameraOptions</code>.
/// This function is particularly useful, if the camera shows the antimeridian.
/// This API isn’t supported by Globe projection.
/// \param camera The camera for which the <code>CoordinateBoundsZoom</code> will
/// be returned.
///
///
/// returns:
/// <code>CoordinateBoundsZoom</code> for the given <code>CameraOptions</code>
- (MBMCoordinateBoundsZoom * _Nonnull)coordinateBoundsZoomUnwrappedFor:(MBMCameraOptions * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Converts a point in the mapView’s coordinate system to a geographic coordinate.
/// The point must exist in the coordinate space of the <code>MapView</code>
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (CLLocationCoordinate2D)coordinateFor:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Converts a map coordinate to a <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinate The coordinate to convert.
///
///
/// returns:
/// A <code>CGPoint</code> relative to the <code>UIView</code>. If the point is outside of the bounds
/// of <code>MapView</code> the returned point contains <code>-1.0</code> for both coordinates.
- (CGPoint)pointFor:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Converts map coordinates to an array of <code>CGPoint</code>, relative to the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param coordinates The coordinate to convert.
///
///
/// returns:
/// An array of <code>CGPoint</code> relative to the <code>UIView. If a coordinate's point is outside of map view's bounds, it will be </code>(-1, -1)`
- (NSArray<NSValue *> * _Nonnull)pointsFor:(NSArray<NSValue *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// Converts points in the mapView’s coordinate system to geographic coordinates.
/// The points must exist in the coordinate space of the <code>MapView</code>.
/// This API isn’t supported by Globe projection.
/// \param point The point to convert. Must exist in the coordinate space
/// of the <code>MapView</code>
///
///
/// returns:
/// A <code>CLLocationCoordinate</code> that represents the geographic location
/// of the point.
- (NSArray<NSValue *> * _Nonnull)coordinatesFor:(NSArray<NSValue *> * _Nonnull)points SWIFT_WARN_UNUSED_RESULT;
/// Changes the map view by any combination of center, zoom, bearing, and pitch,
/// without an animated transition. The map will retain its current values
/// for any details not passed via the camera options argument. It is not
/// guaranteed that the provided <code>CameraOptions</code> will be set, the map may apply
/// constraints resulting in a different <code>CameraState</code>.
/// important:
///
/// This method does not cancel existing animations. Call
/// <code>CameraAnimationsManager.cancelAnimations()</code>to cancel existing animations.
/// \param cameraOptions New camera options
///
- (void)setCameraTo:(MBMCameraOptions * _Nonnull)cameraOptions;
/// Returns the current camera state
@property (nonatomic, readonly, strong) MBMCameraState * _Nonnull cameraState;
/// Sets/get the map view with the free camera options.
/// FreeCameraOptions provides more direct access to the underlying camera entity.
/// For backwards compatibility the state set using this API must be representable
/// with <code>CameraOptions</code> as well. Parameters are clamped to a valid range or
/// discarded as invalid if the conversion to the pitch and bearing presentation
/// is ambiguous. For example orientation can be invalid if it leads to the
/// camera being upside down or the quaternion has zero length.
/// \param freeCameraOptions The free camera options to set.
///
@property (nonatomic, strong) MBMFreeCameraOptions * _Nonnull freeCameraOptions;
/// Returns the bounds of the map.
@property (nonatomic, readonly, strong) MBMCameraBounds * _Nonnull cameraBounds;
/// Sets the bounds of the map.
/// \param options New camera bounds. Nil values will not take effect.
///
///
/// throws:
/// <code>MapError</code>
- (void)setCameraBoundsWith:(MBMCameraBoundsOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Prepares the drag gesture to use the provided screen coordinate as a pivot
/// point. This function should be called each time when user starts a
/// dragging action (e.g. by clicking on the map). The following dragging
/// will be relative to the pivot.
/// \param point Screen point
///
- (void)dragStartFor:(CGPoint)point;
/// Calculates target point where camera should move after drag. The method
/// should be called after <code>dragStart</code> and before <code>dragEnd</code>.
/// \param fromPoint The point from which the map is dragged.
///
/// \param toPoint The point to which the map is dragged.
///
///
/// returns:
///
/// The camera options object showing end point.
- (MBMCameraOptions * _Nonnull)dragCameraOptionsFrom:(CGPoint)from to:(CGPoint)to SWIFT_WARN_UNUSED_RESULT;
/// Ends the ongoing drag gesture. This function should be called always after
/// the user has ended a drag gesture initiated by <code>dragStart</code>.
- (void)dragEnd;
/// If implementing a custom animation mechanism, call this method when the animation begins.
/// Must always be paired with a corresponding call to <code>endAnimation()</code>
- (void)beginAnimation;
/// If implementing a custom animation mechanism, call this method when the animation ends.
/// Must always be paired with a corresponding call to <code>beginAnimation()</code>
- (void)endAnimation;
/// If implementing a custom gesture, call this method when the gesture begins.
/// Must always be paired with a corresponding call to <code>endGesture()</code>
- (void)beginGesture;
/// If implementing a custom gesture, call this method when the gesture ends.
/// Must always be paired with a corresponding call to <code>beginGesture()</code>
- (void)endGesture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Clears temporary map data.
/// Clears temporary map data from the data path defined in the given resource
/// options. Useful to reduce the disk usage or in case the disk cache contains
/// invalid data.
/// note:
/// Calling this API will affect all maps that use the same data path
/// and does not affect persistent map data like offline style packages.
/// \param completion Called once the request is complete
///
- (void)clearDataWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end

@protocol MBMObserver;

@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Subscribes an observer to a list of events.
/// <code>MapboxMap</code> holds a strong reference to <code>observer</code> while it is subscribed. To stop receiving
/// notifications, pass the same <code>observer</code> to <code>unsubscribe(_:events:)</code>.
/// note:
///
/// Prefer <code>onNext(eventTypes:handler:)</code>, <code>onNext(_:handler:)</code>, and
/// <code>onEvery(_:handler:)</code> to using this lower-level APIs
/// \param observer An object that will receive events of the types specified by <code>events</code>
///
/// \param events Array of event types to deliver to <code>observer</code>
///
- (void)subscribe:(id <MBMObserver> _Nonnull)observer events:(NSArray<NSString *> * _Nonnull)events;
/// Unsubscribes an observer from a provided list of event types.
/// <code>MapboxMap</code> holds a strong reference to <code>observer</code> while it is subscribed. To stop receiving
/// notifications, pass the same <code>observer</code> to this method as was passed to
/// <code>subscribe(_:events:)</code>.
/// \param observer The object to unsubscribe
///
/// \param events Array of event types to unsubscribe from. Pass an
/// empty array (the default) to unsubscribe from all events.
///
- (void)unsubscribe:(id <MBMObserver> _Nonnull)observer events:(NSArray<NSString *> * _Nonnull)events;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// Update the state map of a feature within a style source.
/// Update entries in the state map of a given feature within a style source. Only entries listed in the state map
/// will be updated. An entry in the feature state map that is not listed in <code>state</code> will retain its previous value.
/// \param sourceId Style source identifier
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId Identifier of the feature whose state should be updated
///
/// \param state Map of entries to update with their respective new values
///
- (void)setFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId state:(NSDictionary<NSString *, id> * _Nonnull)state;
/// Get the state map of a feature within a style source.
/// \param sourceId Style source identifier.
///
/// \param sourceLayerId Style source layer identifier (for multi-layer sources such as vector sources).
///
/// \param featureId Identifier of the feature whose state should be queried.
///
/// \param callback Feature’s state map or an empty map if the feature could not be found.
///
- (void)getFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId callback:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))callback;
/// Removes entries from a feature state object.
/// Remove a specified property or all property from a feature’s state object, depending on the value of <code>stateKey</code>.
/// \param sourceId The style source identifier
///
/// \param sourceLayerId The style source layer identifier (for multi-layer sources such as vector sources). Defaults to <code>nil</code>.
///
/// \param featureId The feature identifier of the feature whose state should be removed.
///
/// \param stateKey The key of the property to remove. If <code>nil</code>, all feature’s state object properties are removed. Defaults to <code>nil</code>.
///
- (void)removeFeatureStateWithSourceId:(NSString * _Nonnull)sourceId sourceLayerId:(NSString * _Nullable)sourceLayerId featureId:(NSString * _Nonnull)featureId stateKey:(NSString * _Nullable)stateKey;
@end

@class MBMRenderedQueryOptions;
@class MBMQueriedFeature;
@class MBMSourceQueryOptions;
@class MBMFeatureExtensionValue;

@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithShape:(NSArray<NSValue *> * _Nonnull)shape options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithRect:(CGRect)rect options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
- (TMBCancelable * _Nonnull)queryRenderedFeaturesWithPoint:(CGPoint)point options:(MBMRenderedQueryOptions * _Nullable)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
/// Queries the map for source features.
/// \param sourceId Style source identifier used to query for source features.
///
/// \param options Options for querying source features.
///
/// \param completion Callback called when the query completes
///
- (void)querySourceFeaturesFor:(NSString * _Nonnull)sourceId options:(MBMSourceQueryOptions * _Nonnull)options completion:(void (^ _Nullable)(NSArray<MBMQueriedFeature *> * _Nullable, NSError * _Nullable))completion;
/// Queries for feature extension values in a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param extension Currently supports keyword <code>supercluster</code>.
///
/// \param extensionField Currently supports following three extensions:
/// <ol>
///   <li>
///     <code>children</code>: returns the children of a cluster (on the next zoom
///     level).
///   </li>
///   <li>
///     <code>leaves</code>: returns all the leaves of a cluster (given its cluster_id)
///   </li>
///   <li>
///     <code>expansion-zoom</code>: returns the zoom on which the cluster expands
///     into several children (useful for “click to zoom” feature).
///   </li>
/// </ol>
///
/// \param args Used for further query specification when using ‘leaves’
/// extensionField. Now only support following two args:
/// <ol>
///   <li>
///     <code>limit</code>: the number of points to return from the query (must
///     use type ‘UInt64’, set to maximum for all points)
///   </li>
///   <li>
///     <code>offset</code>: the amount of points to skip (for pagination, must
///     use type ‘UInt64’)
///   </li>
/// </ol>
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
/// Deprecated. Use getGeoJsonClusterLeaves/getGeoJsonClusterChildren/getGeoJsonClusterExpansionZoom to instead.
///
- (void)queryFeatureExtensionFor:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature extension:(NSString * _Nonnull)extension extensionField:(NSString * _Nonnull)extensionField args:(NSDictionary<NSString *, id> * _Nullable)args completion:(void (^ _Nullable)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns all the leaves (original points) of a cluster (given its cluster_id) from a GeoJSON source, with pagination support: limit is the number of leaves
/// to return (set to Infinity for all points), and offset is the amount of points to skip (for pagination).
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param limit the number of points to return from the query, default to 10
///
/// \param offset the amount of points to skip, default to 0
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterLeavesForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature limit:(uint64_t)limit offset:(uint64_t)offset completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the children (original points or clusters) of a cluster (on the next zoom level)
/// given its id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterChildrenForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
/// Returns the zoom on which the cluster expands into several children (useful for “click to zoom” feature)
/// given the cluster’s cluster_id (cluster_id value from feature properties) from a GeoJSON source.
/// \param sourceId The identifier of the source to query.
///
/// \param feature Feature to look for in the query.
///
/// \param completion The result could be a feature extension value containing
/// either a value (expansion-zoom) or a feature collection (children
/// or leaves). An error is passed if the operation was not successful.
///
- (void)getGeoJsonClusterExpansionZoomForSourceId:(NSString * _Nonnull)sourceId feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nonnull)(MBMFeatureExtensionValue * _Nullable, NSError * _Nullable))completion;
@end


@interface TMBMapboxMap (SWIFT_EXTENSION(MapboxMapObjC))
/// The style has been fully loaded, and the map has rendered all visible tiles.
- (TMBCancelable * _Nonnull)onMapLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// Describes an error that has occurred while loading the Map. The <code>type</code> property defines what resource could
/// not be loaded and the <code>message</code> property will contain a descriptive error message.
/// In case of <code>source</code> or <code>tile</code> loading errors, <code>source-id</code> will contain the id of the source failing.
/// In case of <code>tile</code> loading errors, <code>tile-id</code> will contain the id of the tile.
- (TMBCancelable * _Nonnull)onMapLoadingError:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map has entered the idle state. The map is in the idle state when there are no ongoing transitions
/// and the map has rendered all requested non-volatile tiles. The event will not be emitted if <code>setUserAnimationInProgress</code>
/// and / or <code>setGestureInProgress</code> is set to <code>true</code>.
- (TMBCancelable * _Nonnull)onMapIdle:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style data has been loaded. The <code>type</code> property defines what kind of style data has been loaded.
/// Event may be emitted synchronously, for example, when <code>setStyleJSON</code> is used to load style.
/// Based on an event data <code>type</code> property value, following use-cases may be implemented:
/// <ul>
///   <li>
///     <code>style</code>: Style is parsed, style layer properties could be read and modified, style layers and sources could be
///     added or removed before rendering is started.
///   </li>
///   <li>
///     <code>sprite</code>: Style’s sprite sheet is parsed and it is possible to add or update images.
///   </li>
///   <li>
///     <code>sources</code>: All sources defined by the style are loaded and their properties could be read and updated if needed.
///   </li>
/// </ul>
- (TMBCancelable * _Nonnull)onStyleDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style has been fully loaded, including the style, specified sprite and sources’ metadata.
/// Note: The style specified sprite would be marked as loaded even with sprite loading error (An error will be emitted via <code>.mapLoadingError</code>).
/// Sprite loading error is not fatal and we don’t want it to block the map rendering, thus this event will still be emitted if style and sources are fully loaded.
- (TMBCancelable * _Nonnull)onStyleLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// A style has a missing image. This event is emitted when the map renders visible tiles and
/// one of the required images is missing in the sprite sheet. Subscriber has to provide the missing image
/// by calling <code>Style/addImage(_:id:sdf:contentInsets:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageMissing:(void (^ _Nonnull)(id _Nonnull))handler;
/// An image added to the style is no longer needed and can be removed using <code>Style/removeImage(withId:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageRemoveUnused:(void (^ _Nonnull)(id _Nonnull))handler;
/// A source data has been loaded.
/// Event may be emitted synchronously in cases when source’s metadata is available when source is added to the style.
/// The <code>id</code> property defines the source id.
/// The <code>type</code> property defines if source’s metadata (e.g., TileJSON) or tile has been loaded. The property of <code>metadata</code>
/// value might be useful to identify when particular source’s metadata is loaded, thus all source’s properties are
/// readable and can be updated before map will start requesting data to be rendered.
/// The <code>loaded</code> property will be set to <code>true</code> if all source’s data required for visible viewport of the map, are loaded.
/// The <code>tile-id</code> property defines the tile id if the <code>type</code> field equals <code>tile</code>.
- (TMBCancelable * _Nonnull)onSourceDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been added with <code>Style/addSource(_:id:)</code> or <code>Style/addSource(withId:properties:)</code>.
/// The event is emitted synchronously, therefore, it is possible to immediately
/// read added source’s properties.
- (TMBCancelable * _Nonnull)onSourceAdded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been removed with <code>Style/removeSource(withId:)</code>.
/// The event is emitted synchronously, thus, <code>Style/allSourceIdentifiers</code> will be
/// in sync when the observer receives the notification.
- (TMBCancelable * _Nonnull)onSourceRemoved:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map finished rendering a frame.
/// The <code>render-mode</code> property tells whether the map has all data (<code>full</code>) required to render the visible viewport.
/// The <code>needs-repaint</code> property provides information about ongoing transitions that trigger map repaint.
/// The <code>placement-changed</code> property tells if the symbol placement has been changed in the visible viewport.
- (TMBCancelable * _Nonnull)onRenderFrameStarted:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onRenderFrameFinished:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onEvenCameraChanged:(void (^ _Nonnull)(id _Nonnull))handler;
/// The <code>ResourceRequest</code> event allows client to observe resource requests made by a
/// map or snapshotter.
- (TMBCancelable * _Nonnull)onResourceRequest:(void (^ _Nonnull)(id _Nonnull))handler;
@end


/// A structure represeting a Model
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBModel")
@interface TMBModel : NSObject
/// URL to a <code>gltf</code> 3D asset in the application bundle
@property (nonatomic, copy) NSURL * _Nullable uri;
/// Coordinates of the model in <code>[longitude, latitude]</code>format
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable position;
/// Orientation of the model
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable orientation;
- (nonnull instancetype)initWithUri:(NSURL * _Nullable)uri position:(NSArray<NSNumber *> * _Nullable)position orientation:(NSArray<NSNumber *> * _Nullable)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBNumberFormatOptions")
@interface TMBNumberFormatOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBScaleBarViewOptions;

/// Used to configure Ornament-specific capabilities of the map
/// All margin values are relative to the <code>MapView</code>’s safe area. To allow the safe area
/// (and thereby ornaments) to track the presence of navigation bars and tab bars,
/// make MapView the root view of a view controller.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBOrnamentOptions")
@interface TMBOrnamentOptions : NSObject
/// The ornament options for the map’s scale bar.
@property (nonatomic, strong) TMBScaleBarViewOptions * _Nonnull scaleBar;
/// The ornament options for the map’s compass view.
@property (nonatomic, strong) TMBCompassViewOptions * _Nonnull compass;
/// The ornament options for the map’s logo view.
/// Per our terms of service, a Mapbox map is required to display both
/// a Mapbox logo as well as an information icon that contains attribution
/// information. See https://docs.mapbox.com/help/how-mapbox-works/attribution/
/// for details.
@property (nonatomic, strong) TMBLogoViewOptions * _Nonnull logo;
/// The ornament options for the map’s attribution button.
@property (nonatomic, strong) TMBAttributionButtonOptions * _Nonnull attributionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBOrnamentPosition, open) {
  TMBOrnamentPositionTopLeft = 0,
  TMBOrnamentPositionTopRight = 1,
  TMBOrnamentPositionBottomRight = 2,
  TMBOrnamentPositionBottomLeft = 3,
  TMBOrnamentPositionTopLeading = 4,
  TMBOrnamentPositionTopTrailing = 5,
  TMBOrnamentPositionBottomLeading = 6,
  TMBOrnamentPositionBottomTrailing = 7,
};

typedef SWIFT_ENUM(NSInteger, TMBOrnamentVisibility, open) {
  TMBOrnamentVisibilityAdaptive = 0,
  TMBOrnamentVisibilityHidden = 1,
  TMBOrnamentVisibilityVisible = 2,
};

@class UIView;

SWIFT_CLASS("_TtC13MapboxMapObjC19TMBOrnamentsManager")
@interface TMBOrnamentsManager : NSObject
/// The <code>OrnamentOptions</code> object that is used to set up and update the required ornaments on the map.
@property (nonatomic, strong) TMBOrnamentOptions * _Nonnull options;
/// The view for the logo ornament. This view can be used to position other views relative to the logo
/// ornament, but it should not be manipulated. Use <code>OrnamentOptions/logo</code> to configure the
/// logo presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull logoView;
/// The view for the scale bar ornament. This view can be used to position other views relative to the
/// scale bar ornament, but it should not be manipulated. Use <code>OrnamentOptions/scaleBar</code>
/// to configure the scale bar presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull scaleBarView;
/// The view for the compass ornament. This view can be used to position other views relative to the
/// compass ornament, but it should not be manipulated. Use <code>OrnamentOptions/compass</code> to
/// configure the compass presentation if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull compassView;
/// The view for the attribution button ornament. This view can be used to position other views relative
/// to the attribution button ornament, but it should not be manipulated. Use
/// <code>OrnamentOptions/attributionButton</code> to configure the attribution button presentation
/// if customization is needed.
@property (nonatomic, readonly, strong) UIView * _Nonnull attributionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBOverviewViewportStateOptions;

/// A <code>ViewportState</code> implementation that shows an overview of the geometry specified by its
/// <code>OverviewViewportStateOptions/geometry</code>.
/// Use <code>Viewport/makeOverviewViewportState(options:)</code> to create instances of this
/// class.
SWIFT_CLASS("_TtC13MapboxMapObjC24TMBOverviewViewportState")
@interface TMBOverviewViewportState : NSObject
/// Configuration options.
/// When set, the viewport reframes the geometry using the new options and updates its camera with
/// an <code>CameraAnimationsManager/ease(to:duration:curve:completion:)</code>
/// animation with a linear timing curve and duration specified by the new value’s
/// <code>OverviewViewportStateOptions/animationDuration</code>.
@property (nonatomic, strong) TMBOverviewViewportStateOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBOverviewViewportState (SWIFT_EXTENSION(MapboxMapObjC)) <TMBViewportState>
- (TMBCancelable * _Nonnull)observeDataSourceWith:(BOOL (^ _Nonnull)(MBMCameraOptions * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (void)startUpdatingCamera;
- (void)stopUpdatingCamera;
@end


/// Configuration options for <code>OverviewViewportState</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC31TMBOverviewViewportStateOptions")
@interface TMBOverviewViewportStateOptions : NSObject
/// The geometry that the <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic, strong) MBXGeometry * _Nonnull geometry;
/// The padding that <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic) UIEdgeInsets padding;
/// The bearing that <code>OverviewViewportState</code> should use when calcualting its camera.
@property (nonatomic, strong) NSNumber * _Nullable bearing;
/// The pitch that <code>OverviewViewportState</code> should use when calculating its camera.
@property (nonatomic, strong) NSNumber * _Nullable pitch;
/// The length of the animation performed by <code>OverviewViewportState</code> when it starts updating
/// the camera and any time <code>OverviewViewportState/options</code> is set. See
/// <code>OverviewViewportState/options</code> for details.
@property (nonatomic) NSTimeInterval animationDuration;
/// Memberwise initializer for <code>OverviewViewportStateOptions</code>.
/// <code>geometry</code> is required, but all other parameters have default values.
/// \param geometry the geometry for which an overview should be shown.
///
/// \param padding Defaults to <code>UIEdgeInsets.zero</code>.
///
/// \param bearing Defaults to 0.
///
/// \param pitch Defaults to 0.
///
/// \param animationDuration Defaults to 1.
///
- (nonnull instancetype)initWithGeometry:(MBXGeometry * _Nonnull)geometry padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch animationDuration:(NSTimeInterval)animationDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options used to configure the direction in which the map is allowed to move
/// during a pan gesture. Called <code>ScrollMode</code> in the Android SDK for
/// consistency with platform conventions.
typedef SWIFT_ENUM(NSInteger, TMBPanMode, open) {
/// The map may only move horizontally.
  TMBPanModeHorizontal = 0,
/// The map may only move vertically.
  TMBPanModeVertical = 1,
/// The map may move both horizontally and vertically.
  TMBPanModeHorizontalAndVertical = 2,
};


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBPointAnnotation")
@interface TMBPointAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
- (void)image:(UIImage * _Nonnull)image name:(NSString * _Nonnull)name;
+ (TMBPointAnnotation * _Nonnull)fromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) NSNumber * _Nullable iconAnchor;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, copy) NSString * _Nullable iconImage;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconOffset;
/// Rotates the icon clockwise.
@property (nonatomic, strong) NSNumber * _Nullable iconRotate;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) NSNumber * _Nullable iconSize;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable symbolSortKey;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) NSNumber * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, copy) NSString * _Nullable textField;
/// Text justification options.
@property (nonatomic, strong) NSNumber * _Nullable textJustify;
/// Text tracking amount.
@property (nonatomic, strong) NSNumber * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) NSNumber * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textOffset;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) NSNumber * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) NSNumber * _Nullable textRotate;
/// Font size.
@property (nonatomic, strong) NSNumber * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) NSNumber * _Nullable textTransform;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloBlur;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconHaloColor;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloWidth;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable iconOpacity;
/// The color with which the text will be drawn.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable textHaloBlur;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) UIColor * _Nullable textHaloColor;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) NSNumber * _Nullable textHaloWidth;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable textOpacity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC25TMBPointAnnotationManager")
@interface TMBPointAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPointAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable iconAllowOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) NSNumber * _Nullable iconIgnorePlacement;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable iconKeepUpright;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) NSNumber * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable iconPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) NSNumber * _Nullable iconRotationAlignment;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) NSNumber * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) NSNumber * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) NSNumber * _Nullable symbolPlacement;
/// Distance between two symbol anchors.
@property (nonatomic, strong) NSNumber * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) NSNumber * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable textAllowOverlap;
/// Font stack to use for displaying text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) NSNumber * _Nullable textIgnorePlacement;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable textKeepUpright;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) NSNumber * _Nullable textMaxAngle;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) NSNumber * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) NSNumber * _Nullable textPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) NSNumber * _Nullable textRotationAlignment;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textWritingMode;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTranslate;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable iconTranslateAnchor;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textTranslate;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable textTranslateAnchor;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight SWIFT_DEPRECATED_MSG("text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBPolygon")
@interface TMBPolygon : NSObject
- (nonnull instancetype)initWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
+ (TMBPolygon * _Nonnull)createWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates SWIFT_WARN_UNUSED_RESULT;
+ (TMBPolygon * _Nonnull)fromCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPolygonAnnotation")
@interface TMBPolygonAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
+ (TMBPolygonAnnotation * _Nonnull)polygon:(TMBPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable fillSortKey;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) UIColor * _Nullable fillColor;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) NSNumber * _Nullable fillOpacity;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) UIColor * _Nullable fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable fillPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC27TMBPolygonAnnotationManager")
@interface TMBPolygonAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolygonAnnotation *> * _Nonnull annotations;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) NSNumber * _Nullable fillAntialias;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable fillTranslate;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable fillTranslateAnchor;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBPolylineAnnotation")
@interface TMBPolylineAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBPolylineAnnotation * _Nonnull)fromId:(NSString * _Nonnull)id coordinates:(NSArray<NSValue *> * _Nonnull)coordinates isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable SWIFT_WARN_UNUSED_RESULT;
/// The display of lines when joining.
@property (nonatomic, strong) NSNumber * _Nullable lineJoin;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) NSNumber * _Nullable lineBlur;
/// The color with which the line will be drawn.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) NSNumber * _Nullable lineGapWidth;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) NSNumber * _Nullable lineOffset;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable lineOpacity;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable linePattern;
/// Stroke thickness.
@property (nonatomic, strong) NSNumber * _Nullable lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC28TMBPolylineAnnotationManager")
@interface TMBPolylineAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolylineAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// The display of line endings.
@property (nonatomic, strong) NSNumber * _Nullable lineCap;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) NSNumber * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) NSNumber * _Nullable lineRoundLimit;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDasharray;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTranslate;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) NSNumber * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTrimOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBPromoteIdType : NSInteger;

SWIFT_CLASS("_TtC13MapboxMapObjC12TMBPromoteId")
@interface TMBPromoteId : NSObject
@property (nonatomic, readonly) enum TMBPromoteIdType type;
+ (TMBPromoteId * _Nonnull)stringWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBPromoteId * _Nonnull)objectWithValue:(NSDictionary<NSString *, NSString *> * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, TMBPromoteIdType, open) {
  TMBPromoteIdTypeString = 0,
  TMBPromoteIdTypeObject = 1,
};

@class TMBPuck2DConfigurationPulsing;

SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck2DConfiguration")
@interface TMBPuck2DConfiguration : NSObject
/// The opacity of the entire location indicator.
@property (nonatomic) double opacity;
/// Image to use as the top of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable topImage;
/// Image to use as the middle of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable bearingImage;
/// Image to use as the background of the location indicator.
@property (nonatomic, strong) UIImage * _Nullable shadowImage;
/// The size of the images, as a scale factor applied to the size of the specified image.
@property (nonatomic, strong) TMBValue * _Nullable scale;
@property (nonatomic, strong) TMBPuck2DConfigurationPulsing * _Nullable pulsing;
/// Flag determining if the horizontal accuracy ring should be shown arround the <code>Puck</code>. default value is false
@property (nonatomic) BOOL showsAccuracyRing;
/// The color of the accuracy ring.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingColor;
/// The color of the accuracy ring border.
@property (nonatomic, strong) UIColor * _Nonnull accuracyRingBorderColor;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image..
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param accuracyRingColor The color of the accuracy ring.
///
/// \param accuracyRingBorderColor The color of the accuracy ring border.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale showsAccuracyRing:(BOOL)showsAccuracyRing accuracyRingColor:(UIColor * _Nonnull)accuracyRingColor accuracyRingBorderColor:(UIColor * _Nonnull)accuracyRingBorderColor opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
/// Initialize a <code>Puck2D</code> object with a top image, bearing image, shadow image, scale, opacity and accuracy ring visibility.
/// \param topImage The image to use as the top layer for the location indicator.
///
/// \param bearingImage The image used as the middle of the location indicator.
///
/// \param shadowImage The image that acts as a background of the location indicator.
///
/// \param scale The size of the images, as a scale factor applied to the size of the specified image.
///
/// \param showsAccuracyRing Indicates whether the location accurary ring should be shown.
///
/// \param opacity The opacity of the entire location indicator.
///
- (nonnull instancetype)initWithTopImage:(UIImage * _Nullable)topImage bearingImage:(UIImage * _Nullable)bearingImage shadowImage:(UIImage * _Nullable)shadowImage scale:(TMBValue * _Nullable)scale pulsing:(TMBPuck2DConfigurationPulsing * _Nullable)pulsing showsAccuracyRing:(BOOL)showsAccuracyRing opacity:(double)opacity OBJC_DESIGNATED_INITIALIZER;
/// Create a Puck2DConfiguration instance with or without an arrow bearing image. Default without the arrow bearing image.
+ (TMBPuck2DConfiguration * _Nonnull)makeDefaultWithShowBearing:(BOOL)showBearing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMBPuck2DConfigurationPulsingRadius : NSInteger;

/// The configration parameters for sonar-like pulsing circle animation shown around the 2D puck.
SWIFT_CLASS("_TtC13MapboxMapObjC29TMBPuck2DConfigurationPulsing")
@interface TMBPuck2DConfigurationPulsing : NSObject
/// Flag determining whether the pulsing circle animation. <code>true</code> by default.
@property (nonatomic) BOOL isEnabled;
/// The color of the pulsing circle.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The radius of the pulsing circle.
@property (nonatomic) enum TMBPuck2DConfigurationPulsingRadius radius;
@property (nonatomic) double radiusValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Circle radius configuration for the pulsing circle animation.
typedef SWIFT_ENUM(NSInteger, TMBPuck2DConfigurationPulsingRadius, open) {
/// Pulsing circle should animate with the constant radius.
  TMBPuck2DConfigurationPulsingRadiusConstant = 0,
/// Pulsing circle animates with the <code>horizontalAccuracy</code> form the latest puck location.
  TMBPuck2DConfigurationPulsingRadiusAccuracy = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBPuck3DConfiguration")
@interface TMBPuck3DConfiguration : NSObject
/// The model to use as the locaiton puck
@property (nonatomic, strong) TMBModel * _Nonnull model;
/// The scale of the model.
@property (nonatomic, strong) TMBValue * _Nullable modelScale;
/// The rotation of the model in euler angles [lon, lat, z].
@property (nonatomic, strong) TMBValue * _Nullable modelRotation;
/// The opacity of the model used as the location puck
@property (nonatomic, strong) TMBValue * _Nullable modelOpacity;
/// Initialize a <code>Puck3DConfiguration</code> with a model, scale and rotation.
/// \param model The <code>gltf</code> model to use for the puck.
///
/// \param modelScale The amount to scale the model by.
///
/// \param modelRotation The rotation of the model in euler angles <code>[lon, lat, z]</code>.
///
/// \param modelOpacity The opacity of the model used as the location puck
///
- (nonnull instancetype)initWithModel:(TMBModel * _Nonnull)model modelScale:(TMBValue * _Nullable)modelScale modelRotation:(TMBValue * _Nullable)modelRotation modelOpacity:(TMBValue * _Nullable)modelOpacity OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Controls how the puck is oriented
typedef SWIFT_ENUM(NSInteger, TMBPuckBearingSource, open) {
/// The puck should set its bearing using <code>heading: CLHeading</code>. Bearing will mimic user’s
/// spatial orientation.
  TMBPuckBearingSourceHeading = 0,
/// The puck should set its bearing using <code>course: CLLocationDirection</code>. Bearing will mimic
/// the general direction of travel.
  TMBPuckBearingSourceCourse = 1,
};

/// Represents the different types of pucks
typedef SWIFT_ENUM(NSInteger, TMBPuckType, open) {
/// A 2-dimensional puck. Optionally provide <code>Puck2DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck2D = 0,
/// A 3-dimensional puck. Provide a <code>Puck3DConfiguration</code> to configure the puck’s appearance.
  TMBPuckTypePuck3D = 1,
};


/// A RGB-encoded raster DEM source
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster_dem">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBRasterDemSource")
@interface TMBRasterDemSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// The encoding used by this source. Mapbox Terrain RGB is used by default
@property (nonatomic, strong) NSNumber * _Nullable encoding;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Raster map textures such as satellite imagery.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBRasterLayer")
@interface TMBRasterLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// Increase or reduce the brightness of the image. The value is the maximum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMax;
/// Transition options for <code>rasterBrightnessMax</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMaxTransition;
/// Increase or reduce the brightness of the image. The value is the minimum brightness.
@property (nonatomic, strong) TMBValue * _Nullable rasterBrightnessMin;
/// Transition options for <code>rasterBrightnessMin</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterBrightnessMinTransition;
/// Increase or reduce the contrast of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterContrast;
/// Transition options for <code>rasterContrast</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterContrastTransition;
/// Fade duration when a new tile is added.
@property (nonatomic, strong) TMBValue * _Nullable rasterFadeDuration;
/// Rotates hues around the color wheel.
@property (nonatomic, strong) TMBValue * _Nullable rasterHueRotate;
/// Transition options for <code>rasterHueRotate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterHueRotateTransition;
/// The opacity at which the image will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable rasterOpacity;
/// Transition options for <code>rasterOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterOpacityTransition;
/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
@property (nonatomic, strong) TMBValue * _Nullable rasterResampling;
/// Increase or reduce the saturation of the image.
@property (nonatomic, strong) TMBValue * _Nullable rasterSaturation;
/// Transition options for <code>rasterSaturation</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable rasterSaturationTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
typedef SWIFT_ENUM(NSInteger, TMBRasterResampling, open) {
/// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
  TMBRasterResamplingLinear = 0,
/// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
  TMBRasterResamplingNearest = 1,
};


/// A raster tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#raster">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBRasterSource")
@interface TMBRasterSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
@property (nonatomic, strong) NSNumber * _Nullable tileSize;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) NSNumber * _Nullable scheme;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13MapboxMapObjC16TMBResolvedImage")
@interface TMBResolvedImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBResolvedImage (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name available:(BOOL)available SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBResolvedImageData")
@interface TMBResolvedImageData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Convenience class that manages a global <code>ResourceOptions</code>
/// It’s possible to create <code>ResourceOptionsManager</code> instances as you need them,
/// however it’s convenient to use the default object (<code>default</code>).
/// For example, we recommend that the Mapbox access token be set in
/// <code>application(_:didFinishLaunchingWithOptions:)</code> rather than relying on the
/// value in your application’s Info.plist:
/// \code
/// ```
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     // Override point for customization after application launch.
///     ResourceOptionsManager.default.resourceOptions.accessToken = "overridden-access-token"
///     return true
/// }
/// ```
///
/// \endcode
SWIFT_CLASS("_TtC13MapboxMapObjC25TMBResourceOptionsManager")
@interface TMBResourceOptionsManager : NSObject
/// Default instance
/// This shared instance is used by the default initializers
/// for <code>ResourceOptions</code> and <code>MapInitOptions</code>.
/// The application’s Info.plist will be searched for a valid access token
/// under the key <code>MBXAccessToken</code>
/// A valid access token must be provided or found.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) TMBResourceOptionsManager * _Nonnull default_;)
+ (TMBResourceOptionsManager * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Convenience function to remove the default instance. Calling <code>default</code>
/// again will re-create the default instance.
+ (void)destroyDefault;
/// Return the current resource options.
@property (nonatomic, strong) MBMResourceOptions * _Nonnull resourceOptions;
/// Initializes a <code>ResourceOptionsManager</code> with an optional access token.
/// If the supplied token is nil (which is the case for the <code>default</code>) then
/// we will use appropriate defaults for the <code>ResourceOptions</code>, including
/// searching for an access token in the application’s Info.plist.
/// You can override the shared global access token, using
/// <code>ResourceOptionsManager.default</code>:
/// \code
/// ```
/// ResourceOptionsManager.default.resourceOptions.accessToken = "overridden-access-token"
/// ```
///
/// \endcode\param accessToken Valid access token or <code>nil</code>
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Initializes a <code>ResourceOptionsManager</code> with the specified <code>resourceOptions</code>.
/// \param resourceOptions Resource options to initialize the manager with.
///
- (nonnull instancetype)initWithResourceOptions:(MBMResourceOptions * _Nonnull)resourceOptions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Used to configure position, margin, and visibility for the map’s scale bar view.
SWIFT_CLASS("_TtC13MapboxMapObjC22TMBScaleBarViewOptions")
@interface TMBScaleBarViewOptions : NSObject
/// The position of the scale bar view.
/// The default value for this property is <code>.topLeading</code>.
@property (nonatomic) enum TMBOrnamentPosition position;
/// The margins of the scale bar view.
/// The default value for this property is <code>CGPoint(x: 8.0, y: 8.0)</code>.
@property (nonatomic) CGPoint margins;
/// The visibility of the scale bar view.
/// The default value for this property is <code>.adaptive</code>.
@property (nonatomic) enum TMBOrnamentVisibility visibility;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
typedef SWIFT_ENUM(NSInteger, TMBScheme, open) {
/// Slippy map tilenames scheme.
  TMBSchemeXyz = 0,
/// OSGeo spec scheme.
  TMBSchemeTms = 1,
};


/// A spherical dome around the map that is always rendered behind all other layers.
/// Warning: As of v10.6.0, <code>Atmosphere</code> is the preferred method for atmospheric styling. Sky layer is not supported by the globe projection, and will be phased out in future major release.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-sky">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBSkyLayer")
@interface TMBSkyLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereColor;
/// A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereHaloColor;
/// Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0 degree is directly above, at zenith, and 90 degree at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSun;
/// Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.
@property (nonatomic, strong) TMBValue * _Nullable skyAtmosphereSunIntensity;
/// Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using <code>sky-radial-progress</code>. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, <code>sky-gradient-radius</code>] centered at the position specified by <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradient;
/// Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0 degree north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0 degree is directly above, at zenith, and 90 degree at the horizon.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientCenter;
/// The angular distance (measured in degrees) from <code>sky-gradient-center</code> up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from <code>sky-gradient-center</code>.
@property (nonatomic, strong) TMBValue * _Nullable skyGradientRadius;
/// The opacity of the entire sky layer.
@property (nonatomic, strong) TMBValue * _Nullable skyOpacity;
/// Transition options for <code>skyOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable skyOpacityTransition;
/// The type of the sky
@property (nonatomic, strong) TMBValue * _Nullable skyType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The type of the sky
typedef SWIFT_ENUM(NSInteger, TMBSkyType, open) {
/// Renders the sky with a gradient that can be configured with {@link SKY_GRADIENT_RADIUS} and {@link SKY_GRADIENT}.
  TMBSkyTypeGradient = 0,
/// Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through {@link SKY_ATMOSPHERE_SUN}.
  TMBSkyTypeAtmosphere = 1,
};



/// Information about a layer
SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceInfo")
@interface TMBSourceInfo : NSObject
/// The identifier of the layer
@property (nonatomic, copy) NSString * _Nonnull id;
/// The type of the layer
@property (nonatomic) enum TMBSourceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum of Source Types
/// Docs : https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/
typedef SWIFT_ENUM(NSInteger, TMBSourceType, open) {
/// A vector tile source.
  TMBSourceTypeVector = 0,
/// A raster tile source.
  TMBSourceTypeRaster = 1,
/// A raster DEM source.
  TMBSourceTypeRasterDem = 2,
/// A GeoJSON source.
  TMBSourceTypeGeoJson = 3,
/// An image source.
  TMBSourceTypeImage = 4,
/// A model source
  TMBSourceTypeModel = 5,
};

@class MBMStyleManager;
@class MBMTransitionOptions;
@protocol MBMCustomLayerHost;
@class MBMStylePropertyValue;
@class MBMImageStretches;
@class MBMImageContent;
@class TMBTerrain;
@class MBMCustomGeometrySourceOptions;
@class MBMCanonicalTileID;

/// Style provides access to the APIs used to dynamically modify the map’s style. Use it
/// to read and write layers, sources, and images. Obtain the Style instance for a MapView
/// via MapView.mapboxMap.style.
/// important:
/// Style should only be used from the main thread.
SWIFT_CLASS("_TtC13MapboxMapObjC8TMBStyle")
@interface TMBStyle : NSObject
@property (nonatomic, readonly, weak) MBMStyleManager * _Null_unspecified styleManager;
/// Adds a <code>layer</code> to the map
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the given <code>layer</code> at the given <code>position</code>.
- (void)addLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a  persistent <code>layer</code> to the map.
/// Persistent layers are valid across <code>style</code> changes.
/// \param layer The layer to apply on the map
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the persistent layer.
- (void)addPersistentLayer:(id <TMBLayer> _Nonnull)layer layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Moves a <code>layer</code> to a new layer position in the style.
/// \param layerId The layer to move
///
/// \param position Position to move the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
/// <code>StyleError</code> on failure, or <code>NSError</code> with a _domain of “com.mapbox.bindgen”
- (void)moveLayerWithId:(NSString * _Nonnull)id to:(TMBLayerPosition * _Nonnull)position completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets a <code>layer</code> from the map
/// \param id The id of the layer to be fetched
///
/// \param type The type of the layer that will be fetched
///
///
/// throws:
/// <code>TypeConversionError</code> is there is a problem decoding the layer data to the given <code>type</code>.
///
/// returns:
/// The fully formed <code>layer</code> object of type equal to <code>type</code>
- (void)layerWithId:(NSString * _Nonnull)id type:(enum TMBLayerType)type completion:(void (^ _Nullable)(id <TMBLayer> _Nullable, NSError * _Nullable))completion;
/// Gets a <code>layer</code> from the map.
/// This function is useful if you do not know the concrete type of the layer
/// you are fetching, or don’t need to know for your situation.
/// \param layerID The id of the layer to be fetched
///
///
/// throws:
/// Type conversion errors
///
/// returns:
/// The fully formed <code>layer</code> object.
- (void)layerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(id <TMBLayer> _Nullable, NSError * _Nullable))completion;
/// Updates a <code>layer</code> that exists in the <code>style</code> already
/// \param id identifier of layer to update
///
/// \param type Type of the layer
///
/// \param update Closure that mutates a layer passed to it
///
///
/// throws:
/// An error when executing <code>update</code> block.
- (void)updateLayerWithId:(NSString * _Nonnull)id type:(enum TMBLayerType)type update:(SWIFT_NOESCAPE id <TMBLayer> _Nonnull (^ _Nonnull)(id <TMBLayer> _Nonnull))update completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a <code>source</code> to the map
/// \param source The source to add to the map.
///
/// \param identifier A unique source identifier.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem adding the <code>source</code>.
- (void)addSource:(id <TMBSource> _Nonnull)source id:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)addSourceWithId:(NSString * _Nonnull)id geometry:(MBXGeometry * _Nonnull)geometry completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves a <code>source</code> from the map
/// \param id The id of the source to retrieve
///
/// \param type The type of the source
///
///
/// throws:
/// <code>TypeConversionError</code> if there is a problem decoding the source data to the given <code>type</code>.
///
/// returns:
/// The fully formed <code>source</code> object of type equal to <code>type</code>.
- (void)sourceWithId:(NSString * _Nonnull)id type:(enum TMBSourceType)type completion:(void (^ _Nullable)(id <TMBSource> _Nullable, NSError * _Nullable))completion;
/// Retrieves a <code>source</code> from the map
/// This function is useful if you do not know the concrete type of the source
/// you are fetching, or don’t need to know for your situation.
/// \param id The id of the <code>source</code> to retrieve.
///
///
/// throws:
/// <code>TypeConversionError</code> if there is a problem decoding the source of given <code>id</code>.
///
/// returns:
/// The fully formed <code>source</code> object.
- (void)sourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(id <TMBSource> _Nullable, NSError * _Nullable))completion;
/// Updates the <code>data</code> property of a given <code>GeoJSONSource</code> with a new value
/// conforming to the <code>GeoJSONObject</code> protocol.
/// attention:
/// This method is only effective with sources of <code>GeoJSONSource</code>
/// type, and cannot be used to update other source types.
/// \param id The identifier representing the GeoJSON source.
///
/// \param geoJSON The new GeoJSON to be associated with the source data. i.e.
/// a feature or feature collection.
///
///
/// throws:
/// <code>StyleError</code> if there is a problem when updating GeoJSON source.
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geometry:(MBXGeometry * _Nonnull)geometry completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id feature:(MBXFeature * _Nonnull)feature completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <code>true</code> if and only if the style JSON contents, the style specified sprite,
/// and sources are all loaded, otherwise returns <code>false</code>.
@property (nonatomic, readonly) BOOL isLoaded;
/// Get or set the style URI
/// Setting a new style is asynchronous. In order to get the result of this
/// operation, listen to <code>MapEvents.styleDataLoaded</code>, <code>MapEvents.styleLoaded</code>.
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, copy) NSString * _Nullable uri;
/// Get or set the style via a JSON serialization string
/// attention:
///
/// This method should be called on the same thread where the MapboxMap
/// object is initialized.
@property (nonatomic, copy) NSString * _Nonnull JSON;
/// The map <code>style</code>’s default camera, if any, or a default camera otherwise.
/// The map <code>style</code> default camera is defined as follows:
/// <ul>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-center">center</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-zoom">zoom</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-bearing">bearing</a>
///   </li>
///   <li>
///     <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/#root-pitch">pitch</a>
///   </li>
/// </ul>
/// The <code>style</code> default camera is re-evaluated when a new <code>style</code> is loaded. Values default to 0.0 if they are not defined in the <code>style</code>.
@property (nonatomic, readonly, strong) MBMCameraOptions * _Nonnull defaultCamera;
/// Get or set the map <code>style</code>’s transition options.
/// By default, the style parser will attempt to read the style default
/// transition, if any, falling back to a 0.3 s transition otherwise.
/// Overridden transitions are reset once a new style has been loaded.
/// To customize the transition used when switching styles, set this
/// property after <code>MapEvents.EventKind.styleDataLoaded</code> where
/// <code>Event.type == "style"</code> and before
/// <code>MapEvents.EventKind.styleDataLoaded</code> where <code>Event.type == "sprite"</code>
/// and where <code>Event.type == "sources"</code>.
/// seealso:
/// <code>MapboxMap/onNext(_:handler:)</code>
@property (nonatomic, strong) MBMTransitionOptions * _Nonnull transition;
/// Adds a new style layer given its JSON properties
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param properties A JSON dictionary of style layer properties.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new persistent style layer given its JSON properties
/// Persistent style layers remain valid across style reloads.
/// \param properties A JSON dictionary of style layer properties
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful
- (void)addPersistentLayerWith:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Returns <code>true</code> if the id passed in is associated to a persistent layer
/// \param id The layer identifier to test
///
- (void)isPersistentLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
/// Adds a new persistent style custom layer.
/// Persistent style layers are valid across style reloads.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addPersistentCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style custom layer.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers
///   </li>
/// </ul>
/// \param id Style layer id.
///
/// \param layerHost Style custom layer host.
///
/// \param layerPosition Position to add the layer in the stack of layers on the map. Defaults to the top layer.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomLayerWithId:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(TMBLayerPosition * _Nullable)layerPosition completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style layer
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Identifier of the style layer to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeLayerWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style layer exists.
/// Runtime style layers are valid until they are either removed or a new
/// style is loaded.
/// \param id Style layer identifier.
///
///
/// returns:
/// <code>true</code> if the given style layer exists, <code>false</code> otherwise.
- (BOOL)layerExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style layers’ identifiers and types
@property (nonatomic, readonly, copy) NSArray<TMBLayerInfo *> * _Nonnull allLayerIdentifiers;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (id _Nonnull)layerPropertyValueFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The value of the property in the layer with layerId.
- (MBMStylePropertyValue * _Nonnull)layerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a JSON value to a style layer property.
/// \param layerId Style layer identifier.
///
/// \param property Style layer property name.
///
/// \param value Style layer property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertyFor:(NSString * _Nonnull)layerId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style layer property.
/// \param layerType Style layer type.
///
/// \param property Style layer property name.
///
///
/// returns:
///
/// The default value of the property for the layers with type layerType.
+ (MBMStylePropertyValue * _Nonnull)layerPropertyDefaultValueFor:(enum TMBLayerType)layerType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the properties for a style layer.
/// \param layerId layer id.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)layerPropertiesFor:(NSString * _Nonnull)layerId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style layer properties.
/// This method can be used to perform batch update for a style layer properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/">format for a corresponding layer type</a>.
/// Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#id">layer identifier</a>
/// and/or <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#type">layer type</a>
/// is not allowed.
/// \param layerId Style layer identifier.
///
/// \param properties JSON dictionary representing the updated layer properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLayerPropertiesFor:(NSString * _Nonnull)layerId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds a new style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources
///   </li>
/// </ul>
/// \param id An identifier for the style source.
///
/// \param properties A JSON dictionary of style source properties.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an existing style source.
/// \param id Identifier of the style source to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeSourceWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether a given style source exists.
/// \param id Style source identifier.
///
///
/// returns:
/// <code>true</code> if the given source exists, <code>false</code> otherwise.
- (BOOL)sourceExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// The ordered list of the current style sources’ identifiers and types. Identifiers for custom vector
/// sources will not be included
@property (nonatomic, readonly, copy) NSArray<TMBSourceInfo *> * _Nonnull allSourceIdentifiers;
/// Gets the value of style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
///
/// returns:
/// The value of the property in the source with sourceId.
- (MBMStylePropertyValue * _Nonnull)sourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a value to a style source property.
/// \param sourceId Style source identifier.
///
/// \param property Style source property name.
///
/// \param value Style source property value (JSON value)
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertyFor:(NSString * _Nonnull)sourceId property:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets style source properties.
/// \param sourceId Style source identifier
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
///
/// returns:
///
/// JSON dictionary representing the layer properties
- (void)sourcePropertiesFor:(NSString * _Nonnull)sourceId completion:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Sets style source properties.
/// This method can be used to perform batch update for a style source properties.
/// The structure of a provided <code>properties</code> value must conform to the
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/">format</a> for a
/// corresponding source type. Modification of a <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#type">source type</a>
/// is not allowed.
/// \param sourceId Style source identifier
///
/// \param properties A JSON dictionary of Style source properties
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setSourcePropertiesFor:(NSString * _Nonnull)sourceId properties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the default value of style source property.
/// \param sourceType Style source type.
///
/// \param property Style source property name.
///
///
/// returns:
///
/// The default value for the named property for the sources with type sourceType.
+ (MBMStylePropertyValue * _Nonnull)sourcePropertyDefaultValueFor:(NSString * _Nonnull)sourceType property:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Updates the image of an image style source.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image
///   </li>
/// </ul>
/// \param id Style source identifier.
///
/// \param image UIImage
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)updateImageSourceWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// This API can also be used for
/// updating an image. If the image id was already added, it gets replaced
/// by the new image.
/// The image can be used in
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-icon-image"><code>icon-image</code></a>,
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-fill-fill-pattern"><code>fill-pattern</code></a>, and
/// <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#paint-line-line-pattern"><code>line-pattern</code></a>.
/// For more information on how <code>stretchX</code> and <code>stretchY</code> parameters affect image stretching
/// see <a href="https://docs.mapbox.com/mapbox-gl-js/example/add-image-stretchable">this Mapbox GL-JS example</a>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param stretchX An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched horizontally.
///
/// \param stretchY An array of two-element arrays, consisting of two numbers
/// that represent the from position and the to position of areas
/// that can be stretched vertically.
///
/// \param content An array of four numbers, with the first two specifying the
/// left, top corner, and the last two specifying the right, bottom
/// corner. If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf stretchX:(NSArray<MBMImageStretches *> * _Nonnull)stretchX stretchY:(NSArray<MBMImageStretches *> * _Nonnull)stretchY content:(MBMImageContent * _Nullable)content completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds an image to be used in the style.
/// If the image has non-zero <code>UIImage.capInsets</code> it will be stretched accordingly,
/// regardless of the value in <code>UIImage.resizingMode</code>.
/// \param image Image to add.
///
/// \param id ID of the image.
///
/// \param sdf Option to treat whether image is SDF(signed distance field) or not.
/// Setting this to <code>true</code> allows template images to be recolored. The
/// default value is <code>false</code>.
///
/// \param contentInsets The distances the edges of content are inset from the image rectangle.
/// If present, and if the icon uses icon-text-fit, the
/// symbol’s text will be fit inside the content box.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addImage:(UIImage * _Nonnull)image id:(NSString * _Nonnull)id sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes an image from the style.
/// \param id ID of the image to remove.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Checks whether an image exists.
/// \param id The identifier of the image.
///
///
/// returns:
/// <code>true</code> if the given image exists, <code>false</code> otherwise.
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Get an image from the style.
/// \param id ID of the image.
///
///
/// returns:
/// UIImage representing the data associated with the given ID,
/// or nil if no image is associated with that ID.
- (UIImage * _Nullable)imageWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Sets a light on the style.
/// \param light The <code>Light</code> that should be applied.
///
///
/// throws:
/// An error describing why the operation was unsuccessful.
- (void)setLight:(TMBLight * _Nonnull)light completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the style global light source properties.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#light
///   </li>
/// </ul>
/// \param properties A dictionary of style light properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLightWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to the style light property.
/// \param property Style light property name.
///
/// \param value Style light property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setLightProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style light property.
/// \param property Style light property name.
///
///
/// returns:
/// Style light property value.
- (id _Nonnull)lightProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of a style light property.
/// \param property Style light property name.
///
///
/// returns:
/// Style light property value.
- (MBMStylePropertyValue * _Nonnull)lightStylePropertyValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Sets a terrain on the style
/// \param terrain The <code>Terrain</code> that should be rendered
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrain:(TMBTerrain * _Nonnull)terrain completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Removes terrain from style if it was set.
- (void)removeTerrain;
/// Sets the style global terrain source properties.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/#terrain
///   </li>
/// </ul>
/// \param properties A dictionary of style terrain properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets a value to the named style terrain property.
/// \param property Style terrain property name.
///
/// \param value Style terrain property value.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setTerrainProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (id _Nonnull)terrainProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Gets the value of a style terrain property.
/// \param property Style terrain property name.
///
///
/// returns:
/// Style terrain property value.
- (MBMStylePropertyValue * _Nonnull)terrainStylePropertyValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Set the atmosphere of the style
/// \param atmosphere <code>Atmosphere</code> object describing the fog, space and stars.
///
- (void)setAtmosphere:(TMBAtmosphere * _Nonnull)atmosphere completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Remove the atmosphere of the style. No fog, space or stars would be rendered.
- (void)removeAtmosphereWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set an explicit atmosphere properties
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param properties A dictionary of style fog (aka atmosphere) properties values,
/// with their names as key.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/">style-spec/fog</a>
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setAtmosphereProperty:(NSString * _Nonnull)property value:(id _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the value of a style atmosphere property.
/// <ul>
///   <li>
///     See Also: https://docs.mapbox.com/mapbox-gl-js/style-spec/fog/
///   </li>
/// </ul>
/// \param property Style atmosphere property name.
///
///
/// returns:
/// Style atmosphere property value.
- (MBMStylePropertyValue * _Nonnull)atmosphereProperty:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Adds a custom geometry to be used in the style.
/// To add the data, implement the fetchTileFunction callback in the options
/// and call <code>setCustomGeometrySourceTileData</code>.
/// \param id Style source identifier
///
/// \param options Settings for the custom geometry
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)addCustomGeometrySourceWithId:(NSString * _Nonnull)id options:(MBMCustomGeometrySourceOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Set tile data of a custom geometry.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
/// \param features An array of features to add
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)setCustomGeometrySourceTileDataForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId features:(NSArray<MBXFeature *> * _Nonnull)features completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate tile for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param tileId Identifier of the tile
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceTileForSourceId:(NSString * _Nonnull)sourceId tileId:(MBMCanonicalTileID * _Nonnull)tileId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invalidate region for provided custom geometry source.
/// \param sourceId Style source identifier
///
/// \param bounds Coordinate bounds.
///
///
/// throws:
///
/// An error describing why the operation was unsuccessful.
- (void)invalidateCustomGeometrySourceRegionForSourceId:(NSString * _Nonnull)sourceId bounds:(MBMCoordinateBounds * _Nonnull)bounds completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBStyle (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addGeoJSONSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
@end

@class TMBStyleProjection;

@interface TMBStyle (SWIFT_EXTENSION(MapboxMapObjC))
/// Sets the projection.
/// \param projection The <code>StyleProjection</code> to apply to the style.
///
///
/// throws:
/// <code>StyleError</code> if the projection could not be applied.
- (void)setProjection:(TMBStyleProjection * _Nonnull)projection completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// The current projection.
@property (nonatomic, readonly, strong) TMBStyleProjection * _Nonnull projection;
@end


/// Describes the projection used to render the map.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleProjection")
@interface TMBStyleProjection : NSObject
/// The name of the projection.
@property (nonatomic) enum TMBStyleProjectionName name;
/// Initializes a projection
- (nonnull instancetype)initWithName:(enum TMBStyleProjectionName)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The name of the projection to be used for rendering the map.
typedef SWIFT_ENUM(NSInteger, TMBStyleProjectionName, open) {
/// The Mercator projection is the default projection.
  TMBStyleProjectionNameMercator = 0,
/// A globe projection.
  TMBStyleProjectionNameGlobe = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleTransition")
@interface TMBStyleTransition : NSObject
/// Time allotted for transitions to complete in seconds.
@property (nonatomic) double duration;
/// Length of time before a transition begins in seconds.
@property (nonatomic) double delay;
- (nonnull instancetype)initWithDuration:(double)duration delay:(double)delay OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleTransition * _Nonnull zero;)
+ (TMBStyleTransition * _Nonnull)zero SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An icon or a text label.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers-symbol">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC14TMBSymbolLayer")
@interface TMBSymbolLayer : NSObject <TMBLayer>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum TMBLayerType type;
@property (nonatomic, strong) TMBExpression * _Nullable filter;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable sourceLayer;
@property (nonatomic, strong) NSNumber * _Nullable minZoom;
@property (nonatomic, strong) NSNumber * _Nullable maxZoom;
/// Whether this layer is displayed.
@property (nonatomic, strong) TMBValue * _Nullable visibility;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable iconAllowOverlap;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable iconAnchor;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) TMBValue * _Nullable iconIgnorePlacement;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, strong) TMBValue * _Nullable iconImage;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable iconKeepUpright;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, strong) TMBValue * _Nullable iconOffset;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) TMBValue * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable iconPitchAlignment;
/// Rotates the icon clockwise.
@property (nonatomic, strong) TMBValue * _Nullable iconRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBValue * _Nullable iconRotationAlignment;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) TMBValue * _Nullable iconSize;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, strong) TMBValue * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) TMBValue * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBValue * _Nullable symbolPlacement;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) TMBValue * _Nullable symbolSortKey;
/// Distance between two symbol anchors.
@property (nonatomic, strong) TMBValue * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBValue * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) TMBValue * _Nullable textAllowOverlap;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBValue * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, strong) TMBValue * _Nullable textField;
/// Font stack to use for displaying text.
@property (nonatomic, strong) TMBValue * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) TMBValue * _Nullable textIgnorePlacement;
/// Text justification options.
@property (nonatomic, strong) TMBValue * _Nullable textJustify;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) TMBValue * _Nullable textKeepUpright;
/// Text tracking amount.
@property (nonatomic, strong) TMBValue * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) TMBValue * _Nullable textLineHeight;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) TMBValue * _Nullable textMaxAngle;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) TMBValue * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, strong) TMBValue * _Nullable textOffset;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) TMBValue * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) TMBValue * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBValue * _Nullable textPitchAlignment;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) TMBValue * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) TMBValue * _Nullable textRotate;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBValue * _Nullable textRotationAlignment;
/// Font size.
@property (nonatomic, strong) TMBValue * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBValue * _Nullable textTransform;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, strong) TMBValue * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, strong) TMBValue * _Nullable textWritingMode;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconColor;
/// Transition options for <code>iconColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconColorTransition;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloBlur;
/// Transition options for <code>iconHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloBlurTransition;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloColor;
/// Transition options for <code>iconHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloColorTransition;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) TMBValue * _Nullable iconHaloWidth;
/// Transition options for <code>iconHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconHaloWidthTransition;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable iconOpacity;
/// Transition options for <code>iconOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconOpacityTransition;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslate;
/// Transition options for <code>iconTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable iconTranslateTransition;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable iconTranslateAnchor;
/// The color with which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textColor;
/// Transition options for <code>textColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textColorTransition;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) TMBValue * _Nullable textHaloBlur;
/// Transition options for <code>textHaloBlur</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloBlurTransition;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) TMBValue * _Nullable textHaloColor;
/// Transition options for <code>textHaloColor</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloColorTransition;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) TMBValue * _Nullable textHaloWidth;
/// Transition options for <code>textHaloWidth</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textHaloWidthTransition;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) TMBValue * _Nullable textOpacity;
/// Transition options for <code>textOpacity</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textOpacityTransition;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, strong) TMBValue * _Nullable textTranslate;
/// Transition options for <code>textTranslate</code>.
@property (nonatomic, strong) TMBStyleTransition * _Nullable textTranslateTransition;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBValue * _Nullable textTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Label placement relative to its geometry.
typedef SWIFT_ENUM(NSInteger, TMBSymbolPlacement, open) {
/// The label is placed at the point where the geometry is located.
  TMBSymbolPlacementPoint = 0,
/// The label is placed along the line of the geometry. Can only be used on LineString and Polygon geometries.
  TMBSymbolPlacementLine = 1,
/// The label is placed at the center of the line of the geometry. Can only be used on LineString and Polygon geometries. Note that a single feature in a vector tile may contain multiple line geometries.
  TMBSymbolPlacementLineCenter = 2,
};

/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
typedef SWIFT_ENUM(NSInteger, TMBSymbolZOrder, open) {
/// Sorts symbols by symbol sort key if set. Otherwise, sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
  TMBSymbolZOrderAuto = 0,
/// Sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
  TMBSymbolZOrderViewportY = 1,
/// Sorts symbols by symbol sort key if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
  TMBSymbolZOrderSource = 2,
};


/// The global terrain source.
/// seealso:
/// <a href="https://www.mapbox.com/mapbox-gl-style-spec/#terrain">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC10TMBTerrain")
@interface TMBTerrain : NSObject
- (nonnull instancetype)initWithSourceId:(NSString * _Nonnull)sourceId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, strong) TMBValue * _Nullable exaggeration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Part of the text placed closest to the anchor.
typedef SWIFT_ENUM(NSInteger, TMBTextAnchor, open) {
/// The center of the text is placed closest to the anchor.
  TMBTextAnchorCenter = 0,
/// The left side of the text is placed closest to the anchor.
  TMBTextAnchorLeft = 1,
/// The right side of the text is placed closest to the anchor.
  TMBTextAnchorRight = 2,
/// The top of the text is placed closest to the anchor.
  TMBTextAnchorTop = 3,
/// The bottom of the text is placed closest to the anchor.
  TMBTextAnchorBottom = 4,
/// The top left corner of the text is placed closest to the anchor.
  TMBTextAnchorTopLeft = 5,
/// The top right corner of the text is placed closest to the anchor.
  TMBTextAnchorTopRight = 6,
/// The bottom left corner of the text is placed closest to the anchor.
  TMBTextAnchorBottomLeft = 7,
/// The bottom right corner of the text is placed closest to the anchor.
  TMBTextAnchorBottomRight = 8,
};

/// Text justification options.
typedef SWIFT_ENUM(NSInteger, TMBTextJustify, open) {
/// The text is aligned towards the anchor position.
  TMBTextJustifyAuto = 0,
/// The text is aligned to the left.
  TMBTextJustifyLeft = 1,
/// The text is centered.
  TMBTextJustifyCenter = 2,
/// The text is aligned to the right.
  TMBTextJustifyRight = 3,
};

/// Orientation of text when map is pitched.
typedef SWIFT_ENUM(NSInteger, TMBTextPitchAlignment, open) {
/// The text is aligned to the plane of the map.
  TMBTextPitchAlignmentMap = 0,
/// The text is aligned to the plane of the viewport.
  TMBTextPitchAlignmentViewport = 1,
/// Automatically matches the value of {@link TEXT_ROTATION_ALIGNMENT}.
  TMBTextPitchAlignmentAuto = 2,
};

/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
typedef SWIFT_ENUM(NSInteger, TMBTextRotationAlignment, open) {
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns text east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns text x-axes with the line.
  TMBTextRotationAlignmentMap = 0,
/// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
  TMBTextRotationAlignmentViewport = 1,
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_MAP}.
  TMBTextRotationAlignmentAuto = 2,
};

/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
typedef SWIFT_ENUM(NSInteger, TMBTextTransform, open) {
/// The text is not altered.
  TMBTextTransformNone = 0,
/// Forces all letters to be displayed in uppercase.
  TMBTextTransformUppercase = 1,
/// Forces all letters to be displayed in lowercase.
  TMBTextTransformLowercase = 2,
};

/// Controls the frame of reference for <code>text-translate</code>.
typedef SWIFT_ENUM(NSInteger, TMBTextTranslateAnchor, open) {
/// The text is translated relative to the map.
  TMBTextTranslateAnchorMap = 0,
/// The text is translated relative to the viewport.
  TMBTextTranslateAnchorViewport = 1,
};

/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
typedef SWIFT_ENUM(NSInteger, TMBTextWritingMode, open) {
/// If a text’s language supports horizontal writing mode, symbols would be laid out horizontally.
  TMBTextWritingModeHorizontal = 0,
/// If a text’s language supports vertical writing mode, symbols would be laid out vertically.
  TMBTextWritingModeVertical = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBValue")
@interface TMBValue : NSObject
- (nonnull instancetype)initWithConstant:(id _Nullable)constant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpression:(TMBExpression * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
+ (TMBValue * _Nonnull)constant:(NSObject * _Nonnull)constant SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)intValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)doubleValue:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)expression:(TMBExpression * _Nonnull)expression SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchScale:(enum TMBCirclePitchScale)circlePitchScale SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)layerType:(enum TMBLayerType)layerType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circleTranslateAnchor:(enum TMBCircleTranslateAnchor)circleTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillExtrusionTranslateAnchor:(enum TMBFillExtrusionTranslateAnchor)fillExtrusionTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)circlePitchAlignment:(enum TMBCirclePitchAlignment)circlePitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTranslateAnchor:(enum TMBTextTranslateAnchor)textTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)rasterResampling:(enum TMBRasterResampling)rasterResampling SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)hillshadeIlluminationAnchor:(enum TMBHillshadeIlluminationAnchor)hillshadeIlluminationAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)skyType:(enum TMBSkyType)skyType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)anchor:(enum TMBAnchor)anchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)styleProjectionName:(enum TMBStyleProjectionName)styleProjectionName SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textWritingMode:(enum TMBTextWritingMode)textWritingMode SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTranslateAnchor:(enum TMBIconTranslateAnchor)iconTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineTranslateAnchor:(enum TMBLineTranslateAnchor)lineTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)fillTranslateAnchor:(enum TMBFillTranslateAnchor)fillTranslateAnchor SWIFT_WARN_UNUSED_RESULT;
@end



@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textRotationAlignment:(enum TMBTextRotationAlignment)textRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textPitchAlignment:(enum TMBTextPitchAlignment)textPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)encoding:(enum TMBEncoding)encoding SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textJustify:(enum TMBTextJustify)textJustify SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)expressionOperator:(enum TMBExpressionOperator)expressionOperator SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)scheme:(enum TMBScheme)scheme SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textAnchor:(enum TMBTextAnchor)textAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)visibility:(enum TMBVisibility)visibility SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineCap:(enum TMBLineCap)lineCap SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolZOrder:(enum TMBSymbolZOrder)symbolZOrder SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)lineJoin:(enum TMBLineJoin)lineJoin SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)symbolPlacement:(enum TMBSymbolPlacement)symbolPlacement SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconAnchor:(enum TMBIconAnchor)iconAnchor SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconTextFit:(enum TMBIconTextFit)iconTextFit SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)sourceType:(enum TMBSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconPitchAlignment:(enum TMBIconPitchAlignment)iconPitchAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)iconRotationAlignment:(enum TMBIconRotationAlignment)iconRotationAlignment SWIFT_WARN_UNUSED_RESULT;
@end


@interface TMBValue (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBValue * _Nonnull)textTransform:(enum TMBTextTransform)textTransform SWIFT_WARN_UNUSED_RESULT;
@end




































/// A vector tile source.
/// seealso:
/// <a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#vector">Mapbox Style Specification</a>
SWIFT_CLASS("_TtC13MapboxMapObjC15TMBVectorSource")
@interface TMBVectorSource : NSObject <TMBSource>
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@property (nonatomic, readonly) enum TMBSourceType type;
/// A URL to a TileJSON resource. Supported protocols are <code>http:</code>, <code>https:</code>, and <code>mapbox://<Tileset ID></code>.
@property (nonatomic, copy) NSString * _Nullable url;
/// An array of one or more tile source URLs, as in the TileJSON spec.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tiles;
/// An array containing the longitude and latitude of the southwest and northeast corners of the source’s bounding box in the following order: <code>[sw.lng, sw.lat, ne.lng, ne.lat]</code>. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable bounds;
/// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
@property (nonatomic, strong) NSNumber * _Nullable scheme;
/// Minimum zoom level for which tiles are available, as in the TileJSON spec.
@property (nonatomic, strong) NSNumber * _Nullable minzoom;
/// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
@property (nonatomic, strong) NSNumber * _Nullable maxzoom;
/// Contains an attribution to be displayed when the map is shown to a user.
@property (nonatomic, copy) NSString * _Nullable attribution;
/// A property to use as a feature id (for feature state). Either a property name, or an object of the form <code>{<sourceLayer>: <propertyName>}</code>. If specified as a string for a vector tile source, the same property is used across all its source layers. If specified as an object only specified source layers will have id overriden, others will fallback to original feature id
@property (nonatomic, strong) TMBPromoteId * _Nullable promoteId;
/// A setting to determine whether a source’s tiles are cached locally.
@property (nonatomic, strong, getter=volatile, setter=setVolatile:) NSNumber * _Nullable volatile_;
/// When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map will first request a tile at zoom level lower than zoom - delta, but so that the zoom level is multiple of delta, in an attempt to display a full map at lower resolution as quick as possible. It will get clamped at the tile source minimum zoom. The default delta is 4.
@property (nonatomic, strong) NSNumber * _Nullable prefetchZoomDelta;
/// Minimum tile update interval in seconds, which is used to throttle the tile update network requests. If the given source supports loading tiles from a server, sets the minimum tile update interval. Update network requests that are more frequent than the minimum tile update interval are suppressed.
@property (nonatomic, strong) NSNumber * _Nullable minimumTileUpdateInterval;
/// When a set of tiles for a current zoom level is being rendered and some of the ideal tiles that cover the screen are not yet loaded, parent tile could be used instead. This might introduce unwanted rendering side-effects, especially for raster tiles that are overscaled multiple times. This property sets the maximum limit for how much a parent tile can be overscaled.
@property (nonatomic, strong) NSNumber * _Nullable maxOverscaleFactorForParentTiles;
/// For the tiled sources, this property sets the tile requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading, parsing and rendering of the transient tiles and thus to improve the rendering performance, especially on low-end devices.
@property (nonatomic, strong) NSNumber * _Nullable tileRequestsDelay;
/// For the tiled sources, this property sets the tile network requests delay. The given delay comes in action only during an ongoing animation or gestures. It helps to avoid loading the transient tiles from the network and thus to avoid redundant network requests. Note that tile-network-requests-delay value is superseded with tile-requests-delay property value, if both are provided.
@property (nonatomic, strong) NSNumber * _Nullable tileNetworkRequestsDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class MBMViewAnnotationOptions;
@protocol TMBViewAnnotationUpdateObserver;

SWIFT_CLASS("_TtC13MapboxMapObjC24TMBViewAnnotationManager")
@interface TMBViewAnnotationManager : NSObject
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForAnnotationId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForAnnotationFeatureId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (MBMViewAnnotationOptions * _Nullable)optionsForAnnotationFeatureId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)addWithViewAnnotation:(UIView * _Nonnull)viewAnnotation id:(NSString * _Nullable)id options:(MBMViewAnnotationOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)updateWithViewAnnotation:(UIView * _Nonnull)viewAnnotation options:(MBMViewAnnotationOptions * _Nonnull)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeWithViewAnnotation:(UIView * _Nonnull)viewAnnotation;
- (void)removeAllViewAnnotations;
/// Add an observer for annotation views updates
/// Observers are held strongly.
/// \param observer The object to notify when updates occur.
///
- (void)addViewAnnotationUpdateObserver:(id <TMBViewAnnotationUpdateObserver> _Nonnull)observer;
/// Remove an observer for annotation views updates.
/// \param observer The object to stop sending notifications to.
///
- (void)removeViewAnnotationUpdateObserver:(id <TMBViewAnnotationUpdateObserver> _Nonnull)observer;
/// Calculates <code>CameraOptions</code> to fit the list of view annotations.
/// important:
/// This API isn’t supported by Globe projection.
/// \param ids The list of annotations ids to be framed.
///
/// \param padding See <code>CameraOptions/padding</code>.
///
/// \param bearing See <code>CameraOptions/bearing</code>.
///
/// \param pitch See <code>CameraOptions/pitch</code>.
///
- (MBMCameraOptions * _Nullable)cameraForAnnotations:(NSArray<NSString *> * _Nonnull)identifiers padding:(UIEdgeInsets)padding bearing:(NSNumber * _Nullable)bearing pitch:(NSNumber * _Nullable)pitch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBViewAnnotationManagerError, open) {
  TMBViewAnnotationManagerErrorViewIsAlreadyAdded = 0,
  TMBViewAnnotationManagerErrorAssociatedFeatureIdIsAlreadyInUse = 1,
  TMBViewAnnotationManagerErrorAnnotationNotFound = 2,
  TMBViewAnnotationManagerErrorGeometryFieldMissing = 3,
};


/// An interface you use to detect when the map view lays out or updates visibility of annotation views.
/// When visible portion of a map changes, e.g. responding to the user interaction, the map view adjusts the positions and visibility of its annotation views.
/// Implement methods of <code>ViewAnnotationUpdateObserver</code> to detect when the map view updates position/size for supplied annotation views.
/// As well as when annotation views get show/hidden when going in/out of visible portion of the map.
/// To register an observer for view annotation updates, call the <code>ViewAnnotationManager/addViewAnnotationUpdateObserver(_:)</code> method.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC31TMBViewAnnotationUpdateObserver_")
@protocol TMBViewAnnotationUpdateObserver
/// Tells the observer that the frames of the annotation views changed.
/// \param annotationViews The annotation views whose frames changed.
///
- (void)framesDidChangeFor:(NSArray<UIView *> * _Nonnull)annotationViews;
/// Tells the observer that the visibility of the annotation views changed.
/// Use <code>isHidden</code> property to determine whether a view is visible or not.
/// \param annotationsViews The annotation vies whose visibility changed.
///
- (void)visibilityDidChangeFor:(NSArray<UIView *> * _Nonnull)annotationViews;
@end

@class TMBViewportOptions;
@class TMBViewportStatus;
@protocol TMBViewportStatusObserver;

/// <code>Viewport</code> provides a structured approach to organizing camera management logic into states and
/// transitions between them.
/// At any given time, the viewport is either:
/// <ul>
///   <li>
///     idle (not updating the camera)
///   </li>
///   <li>
///     in a state (camera is being managed by a <code>ViewportState</code>)
///   </li>
///   <li>
///     transitioning (camera is being managed by a <code>ViewportTransition</code>)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13MapboxMapObjC11TMBViewport")
@interface TMBViewport : NSObject
/// Configuration options for adjusting the viewport’s behavior.
@property (nonatomic, strong) TMBViewportOptions * _Nonnull options;
/// The current <code>ViewportStatus</code>.
/// <code>status</code> cannot be set directly. Use
/// <code>Viewport/transition(to:transition:completion:)</code> and <code>Viewport/idle()</code> to
/// transition to a state or to idle.
/// Defaults to <code>ViewportStatus/idle</code>.
/// seealso:
///
/// <ul>
///   <li>
///     <code>Viewport/addStatusObserver(_:)</code>
///   </li>
///   <li>
///     <code>Viewport/removeStatusObserver(_:)</code>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) TMBViewportStatus * _Nonnull status;
/// Subscribes a <code>ViewportStatusObserver</code> to <code>Viewport/status</code> changes.
/// Viewport keeps a strong reference to registered observers. Adding the same observer again while it is already subscribed has no effect.
/// note:
/// Observers are notified of status changes asynchronously on the main queue. This means that by
/// the time the notification is delivered, the status may have already changed again. This behavior is necessary to allow
/// observers to trigger further transitions while avoiding out-of-order delivery of status changed notifications.
/// seealso:
/// <code>Viewport/removeStatusObserver(_:)</code>
/// \param observer An object that will be notified when the <code>Viewport/status</code> changes.
///
- (void)addStatusObserver:(id <TMBViewportStatusObserver> _Nonnull)observer;
/// Unsubscribes a <code>ViewportStatusObserver</code> from <code>Viewport/status</code> changes. This causes viewport
/// to release its strong reference to the observer. Removing an observer that is not subscribed has no effect.
/// seealso:
/// <code>Viewport/addStatusObserver(_:)</code>
/// \param observer An object that should no longer be notified when the <code>Viewport/status</code> changes.
///
- (void)removeStatusObserver:(id <TMBViewportStatusObserver> _Nonnull)observer;
/// Sets <code>Viewport/status</code> to <code>ViewportStatus/idle</code> synchronously.
/// This cancels any active <code>ViewportState</code> or <code>ViewportTransition</code>.
- (void)idle;
/// Executes a transition to the requested state.
/// If the transition fails, <code>Viewport/status</code> is set to <code>ViewportStatus/idle</code>.
/// Transitioning to state <code>x</code> when the status is <code>.state(x)</code> invokes <code>completion</code>
/// synchronously with <code>true</code> and does not modify <code>Viewport/status</code>.
/// Transitioning to state <code>x</code> when the status is <code>.transition(_, x)</code> invokes <code>completion</code>
/// synchronously with <code>false</code> and does not modify <code>Viewport/status</code>.
/// <code>Viewport</code> keeps a strong reference to active transitions and states. To reuse states and transitions,
/// keep strong references to them in the consuming project.
/// \param toState The target <code>ViewportState</code> to transition to.
///
/// \param transition The <code>ViewportTransition</code> that is used to transition to the target state.
/// If <code>nil</code>, <code>Viewport/defaultTransition</code> is used. Defaults to <code>nil</code>.
///
/// \param completion A closure that is invoked when the transition ends. Defaults to <code>nil</code>.
///
/// \param success Whether the transition ran to completion. Transitions may end early if they fail or
/// are interrupted (e.g. by another call to
/// <code>transition(to:transition:completion:)</code> or <code>Viewport/idle()</code>)
///
- (void)transitionTo:(id <TMBViewportState> _Nonnull)toState transition:(id <TMBViewportTransition> _Nullable)transition completion:(void (^ _Nullable)(BOOL))completion;
/// <code>Viewport/transition(to:transition:completion:)</code> uses this transition unless
/// some non-nil value is passed to its <code>transition</code> argument.
/// Defaults to <code>DefaultViewportTransition</code> with default options.
@property (nonatomic, strong) id <TMBViewportTransition> _Nonnull defaultTransition;
/// Creates a new instance of <code>FollowPuckViewportState</code> with the specified options.
/// \param options configuration options used when creating <code>FollowPuckViewportState</code>. Defaults to
/// <code>FollowPuckViewportStateOptions/init(padding:zoom:bearing:pitch:animationDuration:)</code>
/// with the default value specified for all parameters.
///
///
/// returns:
/// The newly-created <code>FollowPuckViewportState</code>.
- (TMBFollowPuckViewportState * _Nonnull)makeFollowPuckViewportStateWithOptions:(TMBFollowPuckViewportStateOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>OverviewViewportState</code> with the specified options.
/// \param options configuration options used when creating <code>OverviewViewportState</code>.
///
///
/// returns:
/// The newly-created <code>OverviewViewportState</code>.
- (TMBOverviewViewportState * _Nonnull)makeOverviewViewportStateWithOptions:(TMBOverviewViewportStateOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>DefaultViewportTransition</code>.
/// \param options configuration options used when creating <code>DefaultViewportTransition</code>. Defaults to
/// <code>DefaultViewportTransitionOptions/init(maxDuration:)</code> with the default value specified for all parameters
///
///
/// returns:
/// The newly-created <code>DefaultViewportTransition</code>.
- (TMBDefaultViewportTransition * _Nonnull)makeDefaultViewportTransitionWithOptions:(TMBDefaultViewportTransitionOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of <code>ImmediateViewportTransition</code>.
///
/// returns:
/// The newly-created <code>ImmediateViewportTransition</code>.
- (TMBImmediateViewportTransition * _Nonnull)makeImmediateViewportTransition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuraton options for <code>Viewport</code>.
SWIFT_CLASS("_TtC13MapboxMapObjC18TMBViewportOptions")
@interface TMBViewportOptions : NSObject
/// Indicates whether the <code>Viewport</code> should idle when the <code>MapView</code>
/// receives touch input.
/// Set this property to <code>false</code> to enable building custom <code>ViewportState</code>s that
/// can work simultaneously with certain types of gestures.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL transitionsToIdleUponUserInteraction;
/// Initializes <code>ViewportOptions</code>.
/// \param transitionsToIdleUponUserInteraction Defaults to <code>true</code>.
///
- (nonnull instancetype)initWithTransitionsToIdleUponUserInteraction:(BOOL)transitionsToIdleUponUserInteraction OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>ViewportStatus</code> contains 3 cases that express what the <code>Viewport</code> is doing at any given time.
/// The <code>ViewportStatus/state(_:)</code> and <code>ViewportStatus/transition(_:toState:)</code>
/// cases have associated values that are reference types, so equality and hash are implemented in terms of
/// the identities of those objects.
SWIFT_CLASS("_TtC13MapboxMapObjC17TMBViewportStatus")
@interface TMBViewportStatus : NSObject
/// The <code>idle</code> status indicates that <code>Viewport</code> is inactive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBViewportStatus * _Nonnull idle;)
+ (TMBViewportStatus * _Nonnull)idle SWIFT_WARN_UNUSED_RESULT;
/// The <code>state(_:)</code> status indicates that <code>Viewport</code> is running the associated value <code>state</code>.
+ (TMBViewportStatus * _Nonnull)state:(id <TMBViewportState> _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
/// The <code>transition(_:toState:)</code> status indicates that <code>Viewport</code> is running <code>transition</code>
/// and will start running <code>toState</code> upon success.
+ (TMBViewportStatus * _Nonnull)transition:(id <TMBViewportTransition> _Nonnull)transition toState:(id <TMBViewportState> _Nonnull)toState SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Constants that describe why <code>Viewport/status</code> changed.
SWIFT_CLASS("_TtC13MapboxMapObjC29TMBViewportStatusChangeReason")
@interface TMBViewportStatusChangeReason : NSObject <NamedString>
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <code>ViewportStatusObserver</code> must be implemented by objects that wish to register
/// themselves using <code>Viewport/addStatusObserver(_:)</code> so that they can observe
/// <code>Viewport/status</code> changes.
/// seealso:
/// <code>Viewport/addStatusObserver(_:)</code> for an important note about how
/// these notifications are delivered asynchronously.
SWIFT_PROTOCOL("_TtP13MapboxMapObjC25TMBViewportStatusObserver_")
@protocol TMBViewportStatusObserver
/// Called whenever <code>Viewport/status</code> changes.
/// \param fromStatus The value of <code>Viewport/status</code> prior to the change.
///
/// \param toStatus The value of <code>Viewport/status</code> after the change.
///
/// \param reason A <code>ViewportStatusChangeReason</code> that indicates what initiated the change.
///
- (void)viewportStatusDidChangeFrom:(TMBViewportStatus * _Nonnull)fromStatus to:(TMBViewportStatus * _Nonnull)toStatus reason:(TMBViewportStatusChangeReason * _Nonnull)reason;
@end


typedef SWIFT_ENUM(NSInteger, TMBVisibility, open) {
/// The layer is shown.
  TMBVisibilityVisible = 0,
/// The layer is not shown.
  TMBVisibilityNone = 1,
};

@class MBXTileRegionLoadOptions;
@class MBXTileRegion;

@interface MBXTileStore (SWIFT_EXTENSION(MapboxMapObjC))
+ (MBXTileStore * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
- (TMBCancelable * _Nonnull)loadTileRegionForId:(NSString * _Nonnull)id loadOptions:(MBXTileRegionLoadOptions * _Nonnull)loadOptions progress:(MBXTileRegionLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
- (void)allTileRegions:(void (^ _Nonnull)(NSArray<MBXTileRegion *> * _Nullable, NSError * _Nullable))completion;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
