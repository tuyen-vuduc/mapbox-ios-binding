#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MAPBOXMAPOBJC_SWIFT_H
#define MAPBOXMAPOBJC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapboxCommon;
@import MapboxCoreMaps;
@import MapboxMaps;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxMapObjC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MapboxMapObjC13BuiltInStyles")
@interface BuiltInStyles : NSObject
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull streets;)
+ (NSString * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull outdoors;)
+ (NSString * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light;)
+ (NSString * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dark;)
+ (NSString * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satellite;)
+ (NSString * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satelliteStreets;)
+ (NSString * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class TMBExpression;
@class NSNumber;
@class TMBValue;
@class TMBStyleTransition;

SWIFT_CLASS("_TtC13MapboxMapObjC25FillExtrusionLayerBuilder")
@interface FillExtrusionLayerBuilder : NSObject
+ (FillExtrusionLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionIntensity:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionIntensityTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionRadius:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionRadiusTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionBase:(TMBValue * _Nullable)value;
- (void)fillExtrusionBaseTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionColor:(TMBValue * _Nullable)value;
- (void)fillExtrusionColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionHeight:(TMBValue * _Nullable)value;
- (void)fillExtrusionHeightTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionOpacity:(TMBValue * _Nullable)value;
- (void)fillExtrusionOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionPattern:(TMBValue * _Nullable)value;
- (void)fillExtrusionPatternTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionTranslate:(TMBValue * _Nullable)value;
- (void)fillExtrusionTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionTranslateAnchor:(TMBValue * _Nonnull)value;
- (void)fillExtrusionVerticalGradient:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;
@class MBXGeometry;

SWIFT_CLASS("_TtC13MapboxMapObjC14GeometryHelper")
@interface GeometryHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MBXGeometry * _Nonnull)createPoint:(NSValue * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createLine:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiLine:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPoint:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPolygon:(NSArray<NSArray<NSArray<NSValue *> *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createPolygon:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)create:(NSArray<MBXGeometry *> * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMResourceOptions;

@interface MapInitOptions (SWIFT_EXTENSION(MapboxMapObjC))
- (MBMResourceOptions * _Nonnull)resourceOptions SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMMapOptions;
@class MBMCameraOptions;
@class NSURL;

SWIFT_CLASS("_TtC13MapboxMapObjC21MapInitOptionsBuilder")
@interface MapInitOptionsBuilder : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBMResourceOptions * _Nonnull defaultResourceOptions;)
+ (MBMResourceOptions * _Nonnull)defaultResourceOptions SWIFT_WARN_UNUSED_RESULT;
+ (MapInitOptionsBuilder * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptions * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)resourceOptions:(MBMResourceOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)accessToken:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)mapOptions:(MBMMapOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)cameraOptions:(MBMCameraOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)styleUriString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)styleUri:(NSURL * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SymbolLayerBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)updateSymbolLayer:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(SymbolLayerBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class SkyLayerBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)updateSkyLayer:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(SkyLayerBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class TMBTerrain;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setTerrain:(TMBTerrain * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end


@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setCameraTo:(MBMCameraOptions * _Nonnull)cameraOptions;
@end

@class RasterDemSourceBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addRasterDemSource:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(RasterDemSourceBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

enum TMBOrnamentVisibility : NSInteger;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)ornamentsOptionsScaleBarVisibility:(enum TMBOrnamentVisibility)value;
@end


@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)preferredFrameRateRange:(CAFrameRateRange)value;
- (NSArray<NSNumber *> * _Nonnull)mapboxMapDebugOptions SWIFT_WARN_UNUSED_RESULT;
- (void)mapboxMapDebugOptions:(NSArray<NSNumber *> * _Nonnull)value;
@end

enum TMBLayerPosition : NSInteger;
@class TMBPolygonAnnotationManager;
@class TMBCircleAnnotationManager;
@class TMBClusterOptions;
@class TMBPointAnnotationManager;
@class TMBPolylineAnnotationManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBPolygonAnnotationManager * _Nonnull)polygonAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
- (TMBCircleAnnotationManager * _Nonnull)circleAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
- (TMBPointAnnotationManager * _Nonnull)pointAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam clusterOptions:(TMBClusterOptions * _Nullable)clusterOptions SWIFT_WARN_UNUSED_RESULT;
- (TMBPolylineAnnotationManager * _Nonnull)polylineAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
@end

@protocol LocationPermissionsDelegate;
@class Puck2DConfigurationBuilder;
enum TMBPuckBearingSource : NSInteger;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)locationDelegate:(id <LocationPermissionsDelegate> _Nonnull)delegate;
- (void)locationRequestTemporaryFullAccuracyPermissions:(NSString * _Nonnull)customKey;
- (void)puck2D:(void (^ _Nullable)(Puck2DConfigurationBuilder * _Nonnull))build;
- (void)puckBearingSource:(enum TMBPuckBearingSource)source;
@end

@class TMBStyle;
@class UIImage;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setStyle:(NSString * _Nonnull)styleUri;
- (void)setStyleInJson:(NSString * _Nonnull)styleJson;
- (void)loadStyle:(NSString * _Nonnull)styleUri completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
- (void)addImageWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBGeometry;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addSource:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)removeSource:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (BOOL)sourceExists:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)setSourcePropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (NSDictionary<NSString *, id> * _Nonnull)getSourcePropertiesFor:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)addSourceWithId:(NSString * _Nonnull)id geometry:(TMBGeometry * _Nonnull)geometry onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addGeoJSONSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
@end

@class TMBAnchor;
@class UIColor;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
/// Color tint for lighting extruded geometries.
- (void)setLightProperty:(NSString * _Nonnull)name value:(id _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Color tint for lighting extruded geometries.
- (void)setLightWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Whether extruded geometries are lit relative to the map or viewport.
- (void)lightAnchor:(TMBAnchor * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Color tint for lighting extruded geometries.
- (void)lightColor:(UIColor * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>color</code>
- (void)lightColorTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
- (void)lightIntensity:(double)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>intensity</code>
- (void)lightIntensityTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when <code>light.anchor</code> is set to <code>viewport</code> corresponds to the top of the viewport, or 0 degree when <code>light.anchor</code> is set to <code>map</code> corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
- (void)lightPosition:(NSArray<NSNumber *> * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>position</code>
- (void)lightPositionTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@protocol MBMCustomLayerHost;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)removeLayerWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (BOOL)isPersistentLayerWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)layerExistsWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)setLayerPropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)updateLayerPropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (NSDictionary<NSString *, id> * _Nonnull)getLayerPropertiesFor:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)addPersistentLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addLayerWithTarget:(NSObject * _Nonnull)target selector:(SEL _Nonnull)selector layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addLayerWithBuilder:(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(void))builder layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addCustomLayer:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class TMBCancelable;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
/// The style has been fully loaded, and the map has rendered all visible tiles.
- (TMBCancelable * _Nonnull)onMapLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// Describes an error that has occurred while loading the Map. The <code>type</code> property defines what resource could
/// not be loaded and the <code>message</code> property will contain a descriptive error message.
/// In case of <code>source</code> or <code>tile</code> loading errors, <code>source-id</code> will contain the id of the source failing.
/// In case of <code>tile</code> loading errors, <code>tile-id</code> will contain the id of the tile.
- (TMBCancelable * _Nonnull)onMapLoadingError:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map has entered the idle state. The map is in the idle state when there are no ongoing transitions
/// and the map has rendered all requested non-volatile tiles. The event will not be emitted if <code>setUserAnimationInProgress</code>
/// and / or <code>setGestureInProgress</code> is set to <code>true</code>.
- (TMBCancelable * _Nonnull)onMapIdle:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style data has been loaded. The <code>type</code> property defines what kind of style data has been loaded.
/// Event may be emitted synchronously, for example, when <code>setStyleJSON</code> is used to load style.
/// Based on an event data <code>type</code> property value, following use-cases may be implemented:
/// <ul>
///   <li>
///     <code>style</code>: Style is parsed, style layer properties could be read and modified, style layers and sources could be
///     added or removed before rendering is started.
///   </li>
///   <li>
///     <code>sprite</code>: Style’s sprite sheet is parsed and it is possible to add or update images.
///   </li>
///   <li>
///     <code>sources</code>: All sources defined by the style are loaded and their properties could be read and updated if needed.
///   </li>
/// </ul>
- (TMBCancelable * _Nonnull)onStyleDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style has been fully loaded, including the style, specified sprite and sources’ metadata.
/// Note: The style specified sprite would be marked as loaded even with sprite loading error (An error will be emitted via <code>.mapLoadingError</code>).
/// Sprite loading error is not fatal and we don’t want it to block the map rendering, thus this event will still be emitted if style and sources are fully loaded.
- (TMBCancelable * _Nonnull)onStyleLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// A style has a missing image. This event is emitted when the map renders visible tiles and
/// one of the required images is missing in the sprite sheet. Subscriber has to provide the missing image
/// by calling <code>Style/addImage(_:id:sdf:contentInsets:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageMissing:(void (^ _Nonnull)(id _Nonnull))handler;
/// An image added to the style is no longer needed and can be removed using <code>Style/removeImage(withId:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageRemoveUnused:(void (^ _Nonnull)(id _Nonnull))handler;
/// A source data has been loaded.
/// Event may be emitted synchronously in cases when source’s metadata is available when source is added to the style.
/// The <code>id</code> property defines the source id.
/// The <code>type</code> property defines if source’s metadata (e.g., TileJSON) or tile has been loaded. The property of <code>metadata</code>
/// value might be useful to identify when particular source’s metadata is loaded, thus all source’s properties are
/// readable and can be updated before map will start requesting data to be rendered.
/// The <code>loaded</code> property will be set to <code>true</code> if all source’s data required for visible viewport of the map, are loaded.
/// The <code>tile-id</code> property defines the tile id if the <code>type</code> field equals <code>tile</code>.
- (TMBCancelable * _Nonnull)onSourceDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been added with <code>Style/addSource(_:id:)</code> or <code>Style/addSource(withId:properties:)</code>.
/// The event is emitted synchronously, therefore, it is possible to immediately
/// read added source’s properties.
- (TMBCancelable * _Nonnull)onSourceAdded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been removed with <code>Style/removeSource(withId:)</code>.
/// The event is emitted synchronously, thus, <code>Style/allSourceIdentifiers</code> will be
/// in sync when the observer receives the notification.
- (TMBCancelable * _Nonnull)onSourceRemoved:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map finished rendering a frame.
/// The <code>render-mode</code> property tells whether the map has all data (<code>full</code>) required to render the visible viewport.
/// The <code>needs-repaint</code> property provides information about ongoing transitions that trigger map repaint.
/// The <code>placement-changed</code> property tells if the symbol placement has been changed in the visible viewport.
- (TMBCancelable * _Nonnull)onRenderFrameStarted:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onRenderFrameFinished:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onEvenCameraChanged:(void (^ _Nonnull)(id _Nonnull))handler;
/// The <code>ResourceRequest</code> event allows client to observe resource requests made by a
/// map or snapshotter.
- (TMBCancelable * _Nonnull)onResourceRequest:(void (^ _Nonnull)(id _Nonnull))handler;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14MapViewFactory")
@interface MapViewFactory : NSObject
/// :nodoc:
/// See https://developer.apple.com/forums/thread/650054 for context
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame options:(MapInitOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC11NamedString_")
@protocol NamedString
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMStylePackLoadOptions;
@class MBMStylePack;

@interface MBMOfflineManager (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)loadStyleWithStyleUriString:(NSString * _Nonnull)styleUriString styleLoadOptions:(MBMStylePackLoadOptions * _Nonnull)styleLoadOptions progress:(MBMStylePackLoadProgressCallback _Nonnull)progress completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)allStylePacks:(void (^ _Nonnull)(NSArray<MBMStylePack *> * _Nullable, NSError * _Nullable))completion;
@end

@class Puck2DConfigurationPulsingBuilder;

SWIFT_CLASS("_TtC13MapboxMapObjC26Puck2DConfigurationBuilder")
@interface Puck2DConfigurationBuilder : NSObject
- (Puck2DConfigurationBuilder * _Nonnull)setPulsingBuilder:(Puck2DConfigurationPulsingBuilder * _Nullable)builder SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setPulsing:(SWIFT_NOESCAPE void (^ _Nonnull)(Puck2DConfigurationPulsingBuilder * _Nonnull))build SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setOpacity:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setTopImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setBearingImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setShadowImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setScale:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setShowsAccuracyRing:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setAccuracyRingColor:(UIColor * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setAccuracyRingBorderColor:(UIColor * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC33Puck2DConfigurationPulsingBuilder")
@interface Puck2DConfigurationPulsingBuilder : NSObject
- (Puck2DConfigurationPulsingBuilder * _Nonnull)setColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationPulsingBuilder * _Nonnull)setRadiusWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMBEncoding;

SWIFT_CLASS("_TtC13MapboxMapObjC22RasterDemSourceBuilder")
@interface RasterDemSourceBuilder : NSObject
- (RasterDemSourceBuilder * _Nonnull)url:(NSString * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)tiles:(NSArray<NSString *> * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)bounds:(NSArray<NSNumber *> * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)minzoom:(double)value;
- (RasterDemSourceBuilder * _Nonnull)maxzoom:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileSize:(double)value;
- (RasterDemSourceBuilder * _Nonnull)attribution:(NSString * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)encoding:(TMBEncoding * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)volatile:(BOOL)value;
- (RasterDemSourceBuilder * _Nonnull)prefetchZoomDelta:(double)value;
- (RasterDemSourceBuilder * _Nonnull)minimumTileUpdateInterval:(double)value;
- (RasterDemSourceBuilder * _Nonnull)maxOverscaleFactorForParentTiles:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileRequestsDelay:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileNetworkRequestsDelay:(double)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC13MapboxMapObjC15SkyLayerBuilder")
@interface SkyLayerBuilder : NSObject
+ (SkyLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)skyAtmosphereColor:(TMBValue * _Nullable)value;
- (void)skyAtmosphereHaloColor:(TMBValue * _Nullable)value;
- (void)skyAtmosphereSun:(TMBValue * _Nullable)value;
- (void)skyAtmosphereSunIntensity:(TMBValue * _Nullable)value;
- (void)skyGradient:(TMBValue * _Nullable)value;
- (void)skyGradientCenter:(TMBValue * _Nullable)value;
- (void)skyGradientRadius:(TMBValue * _Nullable)value;
- (void)skyOpacity:(TMBValue * _Nullable)value;
- (void)skyOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)skyType:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18SymbolLayerBuilder")
@interface SymbolLayerBuilder : NSObject
+ (SymbolLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)iconAllowOverlap:(TMBValue * _Nullable)value;
- (void)iconAnchor:(TMBValue * _Nullable)value;
- (void)iconIgnorePlacement:(TMBValue * _Nullable)value;
- (void)iconImage:(TMBValue * _Nullable)value;
- (void)iconKeepUpright:(TMBValue * _Nullable)value;
- (void)iconOffset:(TMBValue * _Nullable)value;
- (void)iconOptional:(TMBValue * _Nullable)value;
- (void)iconPadding:(TMBValue * _Nullable)value;
- (void)iconPitchAlignment:(TMBValue * _Nullable)value;
- (void)iconRotate:(TMBValue * _Nullable)value;
- (void)iconRotationAlignment:(TMBValue * _Nullable)value;
- (void)iconSize:(TMBValue * _Nullable)value;
- (void)iconTextFit:(TMBValue * _Nullable)value;
- (void)iconTextFitPadding:(TMBValue * _Nullable)value;
- (void)symbolAvoidEdges:(TMBValue * _Nullable)value;
- (void)symbolPlacement:(TMBValue * _Nullable)value;
- (void)symbolSortKey:(TMBValue * _Nullable)value;
- (void)symbolSpacing:(TMBValue * _Nullable)value;
- (void)symbolZOrder:(TMBValue * _Nullable)value;
- (void)textAllowOverlap:(TMBValue * _Nullable)value;
- (void)textAnchor:(TMBValue * _Nullable)value;
- (void)textField:(TMBValue * _Nullable)value;
- (void)textFont:(TMBValue * _Nullable)value;
- (void)textIgnorePlacement:(TMBValue * _Nullable)value;
- (void)textJustify:(TMBValue * _Nullable)value;
- (void)textKeepUpright:(TMBValue * _Nullable)value;
- (void)textLetterSpacing:(TMBValue * _Nullable)value;
- (void)textLineHeight:(TMBValue * _Nullable)value;
- (void)textMaxAngle:(TMBValue * _Nullable)value;
- (void)textMaxWidth:(TMBValue * _Nullable)value;
- (void)textOffset:(TMBValue * _Nullable)value;
- (void)textOptional:(TMBValue * _Nullable)value;
- (void)textPadding:(TMBValue * _Nullable)value;
- (void)textPitchAlignment:(TMBValue * _Nullable)value;
- (void)textRadialOffset:(TMBValue * _Nullable)value;
- (void)textRotate:(TMBValue * _Nullable)value;
- (void)textRotationAlignment:(TMBValue * _Nullable)value;
- (void)textSize:(TMBValue * _Nullable)value;
- (void)textTransform:(TMBValue * _Nullable)value;
- (void)textVariableAnchor:(TMBValue * _Nullable)value;
- (void)textWritingMode:(TMBValue * _Nullable)value;
- (void)iconColor:(TMBValue * _Nullable)value;
- (void)iconColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloBlur:(TMBValue * _Nullable)value;
- (void)iconHaloBlurTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloColor:(TMBValue * _Nullable)value;
- (void)iconHaloColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloWidth:(TMBValue * _Nullable)value;
- (void)iconHaloWidthTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconOpacity:(TMBValue * _Nullable)value;
- (void)iconOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconTranslate:(TMBValue * _Nullable)value;
- (void)iconTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconTranslateAnchor:(TMBValue * _Nullable)value;
- (void)textColor:(TMBValue * _Nullable)value;
- (void)textColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloBlur:(TMBValue * _Nullable)value;
- (void)textHaloBlurTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloColor:(TMBValue * _Nullable)value;
- (void)textHaloColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloWidth:(TMBValue * _Nullable)value;
- (void)textHaloWidthTransition:(TMBStyleTransition * _Nullable)value;
- (void)textOpacity:(TMBValue * _Nullable)value;
- (void)textOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)textTranslate:(TMBValue * _Nullable)value;
- (void)textTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)textTranslateAnchor:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC9TMBAnchor")
@interface TMBAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The position of the light source is aligned to the rotation of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull map;)
+ (TMBAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The position of the light source is aligned to the rotation of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull viewport;)
+ (TMBAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC13TMBAnnotation_")
@protocol TMBAnnotation
/// The unique identifier of the annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The geometry that is backing this annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
/// Properties associated with the annotation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@end

@protocol TMBAnnotationManager;

/// A delegate that is called when a tap is detected on an annotation (or on several of them).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAnnotationInteractionDelegate_")
@protocol TMBAnnotationInteractionDelegate
/// This method is invoked when a tap gesture is detected on an annotation
/// \param manager The <code>AnnotationManager</code> that detected this tap gesture
///
/// \param annotations A list of <code>Annotations</code> that were tapped
///
- (void)annotationManager:(id <TMBAnnotationManager> _Nonnull)manager didDetectTappedAnnotations:(NSArray<id <TMBAnnotation>> * _Nonnull)annotations;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBAnnotationManager_")
@protocol TMBAnnotationManager
/// The id of this annotation manager.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the <code>GeoJSONSource</code> that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
/// The id of the layer that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBCancelable")
@interface TMBCancelable : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCircleAnnotation")
@interface TMBCircleAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBCircleAnnotation * _Nonnull)fromCenter:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) NSNumber * _Nullable circleBlur;
/// The fill color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleColor;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable circleOpacity;
/// Circle radius.
@property (nonatomic, strong) NSNumber * _Nullable circleRadius;
/// The stroke color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleStrokeColor;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeOpacity;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBCirclePitchAlignment;
@class TMBCirclePitchScale;
@class TMBCircleTranslateAnchor;

SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCircleAnnotationManager")
@interface TMBCircleAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBCircleAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBCirclePitchAlignment * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBCirclePitchScale * _Nullable circlePitchScale;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable circleTranslate;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBCircleTranslateAnchor * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC23TMBCirclePitchAlignment")
@interface TMBCirclePitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The circle is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull map;)
+ (TMBCirclePitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull viewport;)
+ (TMBCirclePitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCirclePitchScale")
@interface TMBCirclePitchScale : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Circles are scaled according to their apparent distance to the camera.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull map;)
+ (TMBCirclePitchScale * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Circles are not scaled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull viewport;)
+ (TMBCirclePitchScale * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBCircleTranslateAnchor")
@interface TMBCircleTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The circle is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull map;)
+ (TMBCircleTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull viewport;)
+ (TMBCircleTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBClusterOptions")
@interface TMBClusterOptions : NSObject
/// The circle radius of the cluster items, 18 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nonnull circleRadius;
/// The circle color, black by default.
@property (nonatomic, strong) TMBValue * _Nonnull circleColor;
/// The text color of cluster item, white by default
@property (nonatomic, strong) TMBValue * _Nonnull textColor;
/// The text size of cluster item, 12 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nonnull textSize;
/// Value to use for a text label of the cluster. <code>get("point_count")</code> by default which
/// will show the count of points in the cluster
@property (nonatomic, strong) TMBValue * _Nonnull textField;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal
/// to the width of a tile, 50 by default. Value must be greater than or equal to 0.
@property (nonatomic) double clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less
/// than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom
/// levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic) double clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from
/// clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>.
/// <code>operator</code> is any expression function that accepts at
/// least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the
/// cluster contains; <code>map_expression</code> produces the value of a single point. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp(.sum) {
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": ["+", ["get", "scalerank"]]}</code>
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp {
///     Exp(.sum) {
///         Exp(.accumulated)
///         Exp(.get) { "sum" }
///     }
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Define a set of cluster options to determine how to cluster annotations.
/// Providing clusterOptions when initializing a <code>PointAnnotationManager</code>
/// will turn on clustering for that <code>PointAnnotationManager</code>.
- (nonnull instancetype)initWithCircleRadius:(TMBValue * _Nonnull)circleRadius circleColor:(TMBValue * _Nonnull)circleColor textColor:(TMBValue * _Nonnull)textColor textSize:(TMBValue * _Nonnull)textSize textField:(TMBValue * _Nonnull)textField clusterRadius:(double)clusterRadius clusterMaxZoom:(double)clusterMaxZoom clusterProperties:(NSDictionary<NSString *, TMBExpression *> * _Nullable)clusterProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBEncoding")
@interface TMBEncoding : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull terrarium;)
+ (TMBEncoding * _Nonnull)terrarium SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull mapbox;)
+ (TMBEncoding * _Nonnull)mapbox SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBOperator;

SWIFT_CLASS("_TtC13MapboxMapObjC13TMBExpression")
@interface TMBExpression : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBOperator * _Nonnull)operator_ SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBOperator * _Nonnull)operator_ arguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC31TMBFillExtrusionTranslateAnchor")
@interface TMBFillExtrusionTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The fill extrusion is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull map;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill extrusion is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull viewport;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBFillTranslateAnchor")
@interface TMBFillTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The fill is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull map;)
+ (TMBFillTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull viewport;)
+ (TMBFillTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC10TMBGeoData_")
@protocol TMBGeoData
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBGeometry")
@interface TMBGeometry : NSObject
+ (TMBGeometry * _Nonnull)fromData:(id <TMBGeoData> _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC30TMBHillshadeIlluminationAnchor")
@interface TMBHillshadeIlluminationAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The hillshade illumination is relative to the north direction.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull map;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The hillshade illumination is relative to the top of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull viewport;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBIconAnchor")
@interface TMBIconAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The center of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull center;)
+ (TMBIconAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull left;)
+ (TMBIconAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull right;)
+ (TMBIconAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull top;)
+ (TMBIconAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottom;)
+ (TMBIconAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topLeft;)
+ (TMBIconAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topRight;)
+ (TMBIconAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomLeft;)
+ (TMBIconAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomRight;)
+ (TMBIconAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBIconPitchAlignment")
@interface TMBIconPitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The icon is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull map;)
+ (TMBIconPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The icon is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull viewport;)
+ (TMBIconPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link ICON_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconPitchAlignment * _Nonnull auto_;)
+ (TMBIconPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBIconRotationAlignment")
@interface TMBIconRotationAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns icons east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns icon x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull map;)
+ (TMBIconRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull viewport;)
+ (TMBIconRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconRotationAlignment * _Nonnull auto_;)
+ (TMBIconRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14TMBIconTextFit")
@interface TMBIconTextFit : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The icon is displayed at its intrinsic aspect ratio.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull none;)
+ (TMBIconTextFit * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the x-dimension to fit the width of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull width;)
+ (TMBIconTextFit * _Nonnull)width SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the y-dimension to fit the height of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull height;)
+ (TMBIconTextFit * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in both x- and y-dimensions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull both;)
+ (TMBIconTextFit * _Nonnull)both SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBIconTranslateAnchor")
@interface TMBIconTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Icons are translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull map;)
+ (TMBIconTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Icons are translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull viewport;)
+ (TMBIconTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBLayerPosition, open) {
  TMBLayerPositionAt = 0,
  TMBLayerPositionBelow = 1,
  TMBLayerPositionAbove = 2,
  TMBLayerPositionUnowned = 3,
};


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBLineCap")
@interface TMBLineCap : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A cap with a squared-off end which is drawn to the exact endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull butt;)
+ (TMBLineCap * _Nonnull)butt SWIFT_WARN_UNUSED_RESULT;
/// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull round;)
+ (TMBLineCap * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull square;)
+ (TMBLineCap * _Nonnull)square SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBLineJoin")
@interface TMBLineJoin : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull bevel;)
+ (TMBLineJoin * _Nonnull)bevel SWIFT_WARN_UNUSED_RESULT;
/// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull round;)
+ (TMBLineJoin * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull miter;)
+ (TMBLineJoin * _Nonnull)miter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBLineTranslateAnchor")
@interface TMBLineTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The line is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull map;)
+ (TMBFillTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The line is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull viewport;)
+ (TMBFillTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBOperator")
@interface TMBOperator : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull subtract;)
+ (TMBOperator * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
/// Logical negation. Returns <code>true</code> if the input is <code>false</code>, and <code>false</code> if the input is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=not) TMBOperator * _Nonnull not_;)
+ (TMBOperator * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are not equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull neq;)
+ (TMBOperator * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
/// Returns the product of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull product;)
+ (TMBOperator * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of floating point division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull division;)
+ (TMBOperator * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
/// Returns the remainder after integer division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull mod;)
+ (TMBOperator * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of raising the first input to the power specified by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pow;)
+ (TMBOperator * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
/// Returns the sum of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sum;)
+ (TMBOperator * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly less than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lt;)
+ (TMBOperator * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is less than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lte;)
+ (TMBOperator * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull eq;)
+ (TMBOperator * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly greater than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull gt;)
+ (TMBOperator * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is greater than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull gte;)
+ (TMBOperator * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute value of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull abs;)
+ (TMBOperator * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
/// Returns the value of a cluster property accumulated so far. Can only be used in the <code>clusterProperties</code> option of a clustered GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull accumulated;)
+ (TMBOperator * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
/// Returns the arccosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull acos;)
+ (TMBOperator * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if all the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>false</code>, the result is <code>false</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull all;)
+ (TMBOperator * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if any of the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>true</code>, the result is <code>true</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull any;)
+ (TMBOperator * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull array;)
+ (TMBOperator * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// Returns the arcsine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull asin;)
+ (TMBOperator * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
/// Retrieves an item from an array.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull at;)
+ (TMBOperator * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
/// Returns the arctangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull atan;)
+ (TMBOperator * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull boolean;)
+ (TMBOperator * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
/// Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull switchCase;)
+ (TMBOperator * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
/// Returns the smallest integer that is greater than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ceil;)
+ (TMBOperator * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
/// Evaluates each expression in turn until the first valid value is obtained. Invalid values are <code>null</code> and <a href="#types-image"><code>'image'</code></a> expressions that are unavailable in the style. If all values are invalid, <code>coalesce</code> returns the first value listed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull coalesce;)
+ (TMBOperator * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>collator</code> for use in locale-dependent comparison operations. The <code>case-sensitive</code> and <code>diacritic-sensitive</code> options default to <code>false</code>. The <code>locale</code> argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the <code>collator</code> will use a system-defined fallback locale. Use <code>resolved-locale</code> to test the results of locale fallback behavior.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull collator;)
+ (TMBOperator * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>string</code> consisting of the concatenation of the inputs. Each input is converted to a string as if by <code>to-string</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull concat;)
+ (TMBOperator * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
/// Returns the cosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull cos;)
+ (TMBOperator * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
/// Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull distance;)
+ (TMBOperator * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a <code>symbol</code> instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. <code>["distance-from-center"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull distanceFromCenter;)
+ (TMBOperator * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull downcase;)
+ (TMBOperator * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant e.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull e;)
+ (TMBOperator * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s state. Returns <code>null</code> if the requested property is not present on the feature’s state. A feature’s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their <code>id</code> attribute, which must be an integer or a string that can be cast to an integer. Note that [“feature-state”] can only be used with paint properties that support data-driven styling.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull featureState;)
+ (TMBOperator * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
/// Returns the largest integer that is less than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull floor;)
+ (TMBOperator * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>formatted</code> string for displaying mixed-format text in the <code>text-field</code> property. The input may contain a string literal or expression, including an <a href="#types-image"><code>'image'</code></a> expression. Strings may be followed by a style override object that supports the following properties:
/// <ul>
///   <li>
///     <code>"text-font"</code>: Overrides the font stack specified by the root layout property.
///   </li>
///   <li>
///     <code>"text-color"</code>: Overrides the color specified by the root paint property.
///   </li>
///   <li>
///     <code>"font-scale"</code>: Applies a scaling factor on <code>text-size</code> as specified by the root layout property.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull format;)
+ (TMBOperator * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s geometry type: <code>Point</code>, <code>LineString</code> or <code>Polygon</code>. <code>Multi*</code> feature types return the singular forms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull geometryType;)
+ (TMBOperator * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s properties, or from another object if a second argument is provided. Returns <code>null</code> if the requested property is missing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull get;)
+ (TMBOperator * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
/// Tests for the presence of an property value in the current feature’s properties, or from another object if a second argument is provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull has;)
+ (TMBOperator * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
/// Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the <code>heatmap-color</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull heatmapDensity;)
+ (TMBOperator * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s id, if it has one.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull id;)
+ (TMBOperator * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Returns a <a href="/mapbox-gl-js/style-spec/types/#resolvedimage"><code>ResolvedImage</code></a> for use in <a href="/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image"><code>icon-image</code></a>, <code>*-pattern</code> entries, and as a section in the <a href="#types-format"><code>'format'</code></a> expression. A <a href="#coalesce"><code>'coalesce'</code></a> expression containing <code>image</code> expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the <code>'image'</code> argument.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull image;)
+ (TMBOperator * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a <a href="#types-literal"><code>literal</code></a> expression to hint correct interpretation to the <a href="#type-system">type system</a>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull inExpression;)
+ (TMBOperator * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the first position at which an item can be found in an array or a substring can be found in a string, or <code>-1</code> if the input cannot be found. Accepts an optional index from where to begin the search.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull indexOf;)
+ (TMBOperator * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
/// Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. The output type must be <code>number</code>, <code>array<number></code>, or <code>color</code>.
/// Interpolation types:
/// <ul>
///   <li>
///     <code>["linear"]</code>: Interpolates linearly between the pair of stops just less than and just greater than the input.
///   </li>
///   <li>
///     <code>["exponential", base]</code>: Interpolates exponentially between the stops just less than and just greater than the input. <code>base</code> controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.
///   </li>
///   <li>
///     <code>["cubic-bezier", x1, y1, x2, y2]</code>: Interpolates using the cubic bezier curve defined by the given control points.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull interpolate;)
+ (TMBOperator * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input string is expected to render legibly. Returns <code>false</code> if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the <code>mapbox-gl-rtl-text</code> plugin is not in use in Mapbox GL JS).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull isSupportedScript;)
+ (TMBOperator * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
/// Returns the length of an array or string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull length;)
+ (TMBOperator * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
/// Binds expressions to named variables, which can then be referenced in the result expression using [“var”, “variable_name”].
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull letExpression;)
+ (TMBOperator * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along a gradient line. Can only be used in the <code>line-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lineProgress;)
+ (TMBOperator * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
/// Provides a literal array or object value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull literal;)
+ (TMBOperator * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
/// Returns the natural logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ln;)
+ (TMBOperator * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
/// Returns mathematical constant ln(2).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ln2;)
+ (TMBOperator * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-ten logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull log10;)
+ (TMBOperator * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-two logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull log2;)
+ (TMBOperator * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
/// Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, <code>["get", "building_type"]</code>). Each label must be unique, and must be either:
/// <ul>
///   <li>
///     a single literal value; or
///   </li>
///   <li>
///     an array of literal values, the values of which must be all strings or all numbers (for example <code>[100, 101]</code> or <code>["c", "b"]</code>).
///   </li>
/// </ul>
/// The input matches if any of the values in the array matches using strict equality, similar to the <code>"in"</code> operator.
/// If the input type does not match the type of the labels, the result will be the fallback value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull match;)
+ (TMBOperator * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
/// Returns the maximum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull max;)
+ (TMBOperator * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
/// Returns the minimum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull min;)
+ (TMBOperator * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull number;)
+ (TMBOperator * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Converts the input number into a string representation using the providing formatting rules. If set, the <code>locale</code> argument specifies the locale to use, as a BCP 47 language tag. If set, the <code>currency</code> argument specifies an ISO 4217 code to use for currency-style formatting. If set, the <code>unit</code> argument specifies a <a href="https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier">simple ECMAScript unit</a> to use for unit-style formatting. If set, the <code>min-fraction-digits</code> and <code>max-fraction-digits</code> arguments specify the minimum and maximum number of fractional digits to include.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull numberFormat;)
+ (TMBOperator * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull objectExpression;)
+ (TMBOperator * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant pi.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pi;)
+ (TMBOperator * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
/// Returns the current pitch in degrees. <code>["pitch"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pitch;)
+ (TMBOperator * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature properties object.  Note that in some cases, it may be more efficient to use <code>["get", "property_name"]</code> directly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull properties;)
+ (TMBOperator * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns the IETF language tag of the locale being used by the provided <code>collator</code>. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull resolvedLocale;)
+ (TMBOperator * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull rgb;)
+ (TMBOperator * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull rgba;)
+ (TMBOperator * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
/// Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, <code>["round", -1.5]</code> evaluates to -2.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull round;)
+ (TMBOperator * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// Returns the sine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sin;)
+ (TMBOperator * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches <code>sky-gradient-radius</code>. Can only be used in the <code>sky-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull skyRadialProgress;)
+ (TMBOperator * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
/// Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull slice;)
+ (TMBOperator * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
/// Returns the square root of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sqrt;)
+ (TMBOperator * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
/// Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull step;)
+ (TMBOperator * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull string;)
+ (TMBOperator * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Returns the tangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull tan;)
+ (TMBOperator * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a boolean. The result is <code>false</code> when then input is an empty string, 0, <code>false</code>, <code>null</code>, or <code>NaN</code>; otherwise it is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toBoolean;)
+ (TMBOperator * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toColor;)
+ (TMBOperator * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a number, if possible. If the input is <code>null</code> or <code>false</code>, the result is 0. If the input is <code>true</code>, the result is 1. If the input is a string, it is converted to a number as specified by the <a href="https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type">“ToNumber Applied to the String Type” algorithm</a> of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toNumber;)
+ (TMBOperator * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
/// Returns a four-element array containing the input color’s red, green, blue, and alpha components, in that order.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toRgba;)
+ (TMBOperator * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a string. If the input is <code>null</code>, the result is <code>""</code>. If the input is a <a href="#types-boolean"><code>boolean</code></a>, the result is <code>"true"</code> or <code>"false"</code>. If the input is a number, it is converted to a string as specified by the <a href="https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type">“NumberToString” algorithm</a> of the ECMAScript Language Specification. If the input is a <a href="#color"><code>color</code></a>, it is converted to a string of the form <code>"rgba(r,g,b,a)"</code>, where <code>r</code>, <code>g</code>, and <code>b</code> are numerals ranging from 0 to 255, and <code>a</code> ranges from 0 to 1. If the input is an <a href="#types-image"><code>'image'</code></a> expression, <code>'to-string'</code> returns the image name. Otherwise, the input is converted to a string in the format specified by the <a href="https://tc39.github.io/ecma262/#sec-json.stringify"><code>JSON.stringify</code></a> function of the ECMAScript Language Specification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toString;)
+ (TMBOperator * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// Returns a string describing the type of the given value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull typeofExpression;)
+ (TMBOperator * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull upcase;)
+ (TMBOperator * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
/// References variable bound using “let”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull varExpression;)
+ (TMBOperator * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the evaluated feature is fully contained inside a boundary of the input geometry, <code>false</code> otherwise. The input value can be a valid GeoJSON of type <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Supported features for evaluation:
/// <ul>
///   <li>
///     <code>Point</code>: Returns <code>false</code> if a point is on the boundary or falls outside the boundary.
///   </li>
///   <li>
///     <code>LineString</code>: Returns <code>false</code> if any part of a line falls outside the boundary, the line intersects the boundary, or a line’s endpoint is on the boundary.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull within;)
+ (TMBOperator * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
/// Returns the current zoom level.  Note that in style layout and paint properties, [“zoom”] may only appear as the input to a top-level “step” or “interpolate” expression.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull zoom;)
+ (TMBOperator * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
/// Interpolates linearly between the pair of stops just less than and just greater than the input
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull linear;)
+ (TMBOperator * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// <code>["exponential", base]</code>
/// Interpolates exponentially between the stops just less than and just
/// greater than the input. base controls the rate at which the output increases: higher values make the output
/// increase more towards the high end of the range.
/// With values close to 1 the output increases linearly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull exponential;)
+ (TMBOperator * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
/// <code>["cubic-bezier", x1, y1, x2, y2]</code>
/// Interpolates using the cubic bezier curve defined by the given control points.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull cubicBezier;)
+ (TMBOperator * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBOrnamentVisibility, open) {
  TMBOrnamentVisibilityAdaptive = 0,
  TMBOrnamentVisibilityHidden = 1,
  TMBOrnamentVisibilityVisible = 2,
};


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBPoint")
@interface TMBPoint : NSObject <TMBGeoData>
+ (TMBPoint * _Nonnull)withCoordinates:(CLLocationCoordinate2D)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBTextAnchor;
@class TMBTextJustify;
@class TMBTextTransform;

SWIFT_CLASS("_TtC13MapboxMapObjC18TMBPointAnnotation")
@interface TMBPointAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
- (void)image:(UIImage * _Nonnull)image name:(NSString * _Nonnull)name;
+ (TMBPointAnnotation * _Nonnull)fromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBIconAnchor * _Nullable iconAnchor;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, copy) NSString * _Nullable iconImage;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconOffset;
/// Rotates the icon clockwise.
@property (nonatomic, strong) NSNumber * _Nullable iconRotate;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) NSNumber * _Nullable iconSize;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable symbolSortKey;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBTextAnchor * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, copy) NSString * _Nullable textField;
/// Text justification options.
@property (nonatomic, strong) TMBTextJustify * _Nullable textJustify;
/// Text tracking amount.
@property (nonatomic, strong) NSNumber * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) NSNumber * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textOffset;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) NSNumber * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) NSNumber * _Nullable textRotate;
/// Font size.
@property (nonatomic, strong) NSNumber * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBTextTransform * _Nullable textTransform;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloBlur;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconHaloColor;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloWidth;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable iconOpacity;
/// The color with which the text will be drawn.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable textHaloBlur;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) UIColor * _Nullable textHaloColor;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) NSNumber * _Nullable textHaloWidth;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable textOpacity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBSymbolPlacement;
@class TMBSymbolZOrder;
@class TMBTextPitchAlignment;
@class TMBTextRotationAlignment;
@class TMBTextWritingMode;
@class TMBTextTranslateAnchor;

SWIFT_CLASS("_TtC13MapboxMapObjC25TMBPointAnnotationManager")
@interface TMBPointAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPointAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable iconAllowOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) NSNumber * _Nullable iconIgnorePlacement;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable iconKeepUpright;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) NSNumber * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBIconPitchAlignment * _Nullable iconPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBIconRotationAlignment * _Nullable iconRotationAlignment;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBIconTextFit * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) NSNumber * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBSymbolPlacement * _Nullable symbolPlacement;
/// Distance between two symbol anchors.
@property (nonatomic, strong) NSNumber * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBSymbolZOrder * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable textAllowOverlap;
/// Font stack to use for displaying text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) NSNumber * _Nullable textIgnorePlacement;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable textKeepUpright;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) NSNumber * _Nullable textMaxAngle;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) NSNumber * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBTextPitchAlignment * _Nullable textPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBTextRotationAlignment * _Nullable textRotationAlignment;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, copy) NSArray<TMBTextAnchor *> * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, copy) NSArray<TMBTextWritingMode *> * _Nullable textWritingMode;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTranslate;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBIconTranslateAnchor * _Nullable iconTranslateAnchor;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textTranslate;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBTextTranslateAnchor * _Nullable textTranslateAnchor;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight SWIFT_DEPRECATED_MSG("text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBPolygon")
@interface TMBPolygon : NSObject
- (nonnull instancetype)initWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
+ (TMBPolygon * _Nonnull)createWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates SWIFT_WARN_UNUSED_RESULT;
+ (TMBPolygon * _Nonnull)fromCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPolygonAnnotation")
@interface TMBPolygonAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
+ (TMBPolygonAnnotation * _Nonnull)polygon:(TMBPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable fillSortKey;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) UIColor * _Nullable fillColor;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) NSNumber * _Nullable fillOpacity;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) UIColor * _Nullable fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable fillPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC27TMBPolygonAnnotationManager")
@interface TMBPolygonAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolygonAnnotation *> * _Nonnull annotations;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) NSNumber * _Nullable fillAntialias;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable fillTranslate;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBFillTranslateAnchor * _Nullable fillTranslateAnchor;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBPolylineAnnotation")
@interface TMBPolylineAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBPolylineAnnotation * _Nonnull)fromId:(NSString * _Nonnull)id coordinates:(NSArray<NSValue *> * _Nonnull)coordinates isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable SWIFT_WARN_UNUSED_RESULT;
/// The display of lines when joining.
@property (nonatomic, strong) TMBLineJoin * _Nullable lineJoin;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) NSNumber * _Nullable lineBlur;
/// The color with which the line will be drawn.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) NSNumber * _Nullable lineGapWidth;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) NSNumber * _Nullable lineOffset;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable lineOpacity;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable linePattern;
/// Stroke thickness.
@property (nonatomic, strong) NSNumber * _Nullable lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC28TMBPolylineAnnotationManager")
@interface TMBPolylineAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolylineAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// The display of line endings.
@property (nonatomic, strong) TMBLineCap * _Nullable lineCap;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) NSNumber * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) NSNumber * _Nullable lineRoundLimit;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDasharray;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTranslate;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBLineTranslateAnchor * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTrimOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBPuckBearingSource, open) {
  TMBPuckBearingSourceHeading = 0,
  TMBPuckBearingSourceCourse = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBRasterResampling")
@interface TMBRasterResampling : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull linear;)
+ (TMBRasterResampling * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull nearest;)
+ (TMBRasterResampling * _Nonnull)nearest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBResolvedImage")
@interface TMBResolvedImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBResolvedImage (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name available:(BOOL)available SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBResolvedImageData")
@interface TMBResolvedImageData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC9TMBScheme")
@interface TMBScheme : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Slippy map tilenames scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull xyz;)
+ (TMBScheme * _Nonnull)xyz SWIFT_WARN_UNUSED_RESULT;
/// OSGeo spec scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull tms;)
+ (TMBScheme * _Nonnull)tms SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBSkyType")
@interface TMBSkyType : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Renders the sky with a gradient that can be configured with {@link SKY_GRADIENT_RADIUS} and {@link SKY_GRADIENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull gradient;)
+ (TMBSkyType * _Nonnull)gradient SWIFT_WARN_UNUSED_RESULT;
/// Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through {@link SKY_ATMOSPHERE_SUN}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull atmosphere;)
+ (TMBSkyType * _Nonnull)atmosphere SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceType")
@interface TMBSourceType : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A vector tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull vector;)
+ (TMBSourceType * _Nonnull)vector SWIFT_WARN_UNUSED_RESULT;
/// A raster tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull raster;)
+ (TMBSourceType * _Nonnull)raster SWIFT_WARN_UNUSED_RESULT;
/// A raster DEM source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull rasterDem;)
+ (TMBSourceType * _Nonnull)rasterDem SWIFT_WARN_UNUSED_RESULT;
/// A GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull geoJson;)
+ (TMBSourceType * _Nonnull)geoJson SWIFT_WARN_UNUSED_RESULT;
/// An image source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull image;)
+ (TMBSourceType * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// A model source
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull model;)
+ (TMBSourceType * _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBStyle")
@interface TMBStyle : NSObject
- (void)addImageWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBStyleProjectionName")
@interface TMBStyleProjectionName : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The Mercator projection is the default projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull mercator;)
+ (TMBStyleProjectionName * _Nonnull)mercator SWIFT_WARN_UNUSED_RESULT;
/// A globe projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull globe;)
+ (TMBStyleProjectionName * _Nonnull)globe SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleTransition")
@interface TMBStyleTransition : NSObject
- (nonnull instancetype)initWithDuration:(double)duration delay:(double)delay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC18TMBSymbolPlacement")
@interface TMBSymbolPlacement : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The label is placed at the point where the geometry is located.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull point;)
+ (TMBSymbolPlacement * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
/// The label is placed along the line of the geometry. Can only be used on LineString and Polygon geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull line;)
+ (TMBSymbolPlacement * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// The label is placed at the center of the line of the geometry. Can only be used on LineString and Polygon geometries. Note that a single feature in a vector tile may contain multiple line geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull lineCenter;)
+ (TMBSymbolPlacement * _Nonnull)lineCenter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC15TMBSymbolZOrder")
@interface TMBSymbolZOrder : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by symbol sort key if set. Otherwise, sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBSymbolZOrder * _Nonnull auto_;)
+ (TMBSymbolZOrder * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull viewportY;)
+ (TMBSymbolZOrder * _Nonnull)viewportY SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by symbol sort key if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull source;)
+ (TMBSymbolZOrder * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBTerrain")
@interface TMBTerrain : NSObject
- (nonnull instancetype)initWithSourceId:(NSString * _Nonnull)sourceId OBJC_DESIGNATED_INITIALIZER;
/// Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.
@property (nonatomic, strong) TMBValue * _Nullable exaggeration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC13TMBTextAnchor")
@interface TMBTextAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The center of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull center;)
+ (TMBTextAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull left;)
+ (TMBTextAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull right;)
+ (TMBTextAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull top;)
+ (TMBTextAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottom;)
+ (TMBTextAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topLeft;)
+ (TMBTextAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topRight;)
+ (TMBTextAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomLeft;)
+ (TMBTextAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomRight;)
+ (TMBTextAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14TMBTextJustify")
@interface TMBTextJustify : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned towards the anchor position.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextJustify * _Nonnull auto_;)
+ (TMBTextJustify * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the left.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull left;)
+ (TMBTextJustify * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The text is centered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull center;)
+ (TMBTextJustify * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the right.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull right;)
+ (TMBTextJustify * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBTextPitchAlignment")
@interface TMBTextPitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull map;)
+ (TMBTextPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull viewport;)
+ (TMBTextPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link TEXT_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextPitchAlignment * _Nonnull auto_;)
+ (TMBTextPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBTextRotationAlignment")
@interface TMBTextRotationAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns text east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns text x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull map;)
+ (TMBTextRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull viewport;)
+ (TMBTextRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextRotationAlignment * _Nonnull auto_;)
+ (TMBTextRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBTextTransform")
@interface TMBTextTransform : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is not altered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull none;)
+ (TMBTextTransform * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in uppercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull uppercase;)
+ (TMBTextTransform * _Nonnull)uppercase SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in lowercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull lowercase;)
+ (TMBTextTransform * _Nonnull)lowercase SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBTextTranslateAnchor")
@interface TMBTextTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull map;)
+ (TMBTextTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull viewport;)
+ (TMBTextTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBTextWritingMode")
@interface TMBTextWritingMode : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// If a text’s language supports horizontal writing mode, symbols would be laid out horizontally.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull horizontal;)
+ (TMBTextWritingMode * _Nonnull)horizontal SWIFT_WARN_UNUSED_RESULT;
/// If a text’s language supports vertical writing mode, symbols would be laid out vertically.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull vertical;)
+ (TMBTextWritingMode * _Nonnull)vertical SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBValue")
@interface TMBValue : NSObject
- (nonnull instancetype)initWithConstant:(NSObject * _Nonnull)constant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpression:(TMBExpression * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
+ (TMBValue * _Nonnull)constant:(NSObject * _Nonnull)constant SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)intValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)doubleValue:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)expression:(TMBExpression * _Nonnull)expression SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13MapboxMapObjC13TMBVisibility")
@interface TMBVisibility : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The layer is shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBVisibility * _Nonnull visible;)
+ (TMBVisibility * _Nonnull)visible SWIFT_WARN_UNUSED_RESULT;
/// The layer is not shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBVisibility * _Nonnull none;)
+ (TMBVisibility * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MBXTileRegionLoadOptions;
@class MBXTileRegion;

@interface MBXTileStore (SWIFT_EXTENSION(MapboxMapObjC))
+ (MBXTileStore * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
- (TMBCancelable * _Nonnull)loadTileRegionForId:(NSString * _Nonnull)id loadOptions:(MBXTileRegionLoadOptions * _Nonnull)loadOptions progress:(MBXTileRegionLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
- (void)allTileRegions:(void (^ _Nonnull)(NSArray<MBXTileRegion *> * _Nullable, NSError * _Nullable))completion;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MAPBOXMAPOBJC_SWIFT_H
#define MAPBOXMAPOBJC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapboxCommon;
@import MapboxCoreMaps;
@import MapboxMaps;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxMapObjC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13MapboxMapObjC13BuiltInStyles")
@interface BuiltInStyles : NSObject
/// Mapbox Streets is a general-purpose style with detailed road and transit networks.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull streets;)
+ (NSString * _Nonnull)streets SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Outdoors is a general-purpose style tailored to outdoor activities.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull outdoors;)
+ (NSString * _Nonnull)outdoors SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Light is a subtle, light-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light;)
+ (NSString * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Dark is a subtle, dark-colored backdrop for data visualizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dark;)
+ (NSString * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite style is a base-map of high-resolution satellite and aerial imagery.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satellite;)
+ (NSString * _Nonnull)satellite SWIFT_WARN_UNUSED_RESULT;
/// The Mapbox Satellite Streets style combines the high-resolution satellite and aerial imagery
/// of Mapbox Satellite with unobtrusive labels and translucent roads from Mapbox Streets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull satelliteStreets;)
+ (NSString * _Nonnull)satelliteStreets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class TMBExpression;
@class NSNumber;
@class TMBValue;
@class TMBStyleTransition;

SWIFT_CLASS("_TtC13MapboxMapObjC25FillExtrusionLayerBuilder")
@interface FillExtrusionLayerBuilder : NSObject
+ (FillExtrusionLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionIntensity:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionIntensityTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionRadius:(TMBValue * _Nullable)value;
- (void)fillExtrusionAmbientOcclusionRadiusTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionBase:(TMBValue * _Nullable)value;
- (void)fillExtrusionBaseTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionColor:(TMBValue * _Nullable)value;
- (void)fillExtrusionColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionHeight:(TMBValue * _Nullable)value;
- (void)fillExtrusionHeightTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionOpacity:(TMBValue * _Nullable)value;
- (void)fillExtrusionOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionPattern:(TMBValue * _Nullable)value;
- (void)fillExtrusionPatternTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionTranslate:(TMBValue * _Nullable)value;
- (void)fillExtrusionTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)fillExtrusionTranslateAnchor:(TMBValue * _Nonnull)value;
- (void)fillExtrusionVerticalGradient:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;
@class MBXGeometry;

SWIFT_CLASS("_TtC13MapboxMapObjC14GeometryHelper")
@interface GeometryHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MBXGeometry * _Nonnull)createPoint:(NSValue * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createLine:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiLine:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPoint:(NSArray<NSValue *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createMultiPolygon:(NSArray<NSArray<NSArray<NSValue *> *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)createPolygon:(NSArray<NSArray<NSValue *> *> * _Nonnull)locations SWIFT_WARN_UNUSED_RESULT;
+ (MBXGeometry * _Nonnull)create:(NSArray<MBXGeometry *> * _Nonnull)items SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMResourceOptions;

@interface MapInitOptions (SWIFT_EXTENSION(MapboxMapObjC))
- (MBMResourceOptions * _Nonnull)resourceOptions SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMMapOptions;
@class MBMCameraOptions;
@class NSURL;

SWIFT_CLASS("_TtC13MapboxMapObjC21MapInitOptionsBuilder")
@interface MapInitOptionsBuilder : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBMResourceOptions * _Nonnull defaultResourceOptions;)
+ (MBMResourceOptions * _Nonnull)defaultResourceOptions SWIFT_WARN_UNUSED_RESULT;
+ (MapInitOptionsBuilder * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptions * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)resourceOptions:(MBMResourceOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)accessToken:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)mapOptions:(MBMMapOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)cameraOptions:(MBMCameraOptions * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)styleUriString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (MapInitOptionsBuilder * _Nonnull)styleUri:(NSURL * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SymbolLayerBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)updateSymbolLayer:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(SymbolLayerBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class SkyLayerBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)updateSkyLayer:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(SkyLayerBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class TMBTerrain;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setTerrain:(TMBTerrain * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end


@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setCameraTo:(MBMCameraOptions * _Nonnull)cameraOptions;
@end

@class RasterDemSourceBuilder;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addRasterDemSource:(NSString * _Nonnull)id configure:(SWIFT_NOESCAPE void (^ _Nonnull)(RasterDemSourceBuilder * _Nonnull))configure onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

enum TMBOrnamentVisibility : NSInteger;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)ornamentsOptionsScaleBarVisibility:(enum TMBOrnamentVisibility)value;
@end


@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)preferredFrameRateRange:(CAFrameRateRange)value;
- (NSArray<NSNumber *> * _Nonnull)mapboxMapDebugOptions SWIFT_WARN_UNUSED_RESULT;
- (void)mapboxMapDebugOptions:(NSArray<NSNumber *> * _Nonnull)value;
@end

enum TMBLayerPosition : NSInteger;
@class TMBPolygonAnnotationManager;
@class TMBCircleAnnotationManager;
@class TMBClusterOptions;
@class TMBPointAnnotationManager;
@class TMBPolylineAnnotationManager;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBPolygonAnnotationManager * _Nonnull)polygonAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
- (TMBCircleAnnotationManager * _Nonnull)circleAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
- (TMBPointAnnotationManager * _Nonnull)pointAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam clusterOptions:(TMBClusterOptions * _Nullable)clusterOptions SWIFT_WARN_UNUSED_RESULT;
- (TMBPolylineAnnotationManager * _Nonnull)polylineAnnotationManagerWithId:(NSString * _Nullable)id layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(id _Nullable)layerPositionParam SWIFT_WARN_UNUSED_RESULT;
@end

@protocol LocationPermissionsDelegate;
@class Puck2DConfigurationBuilder;
enum TMBPuckBearingSource : NSInteger;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)locationDelegate:(id <LocationPermissionsDelegate> _Nonnull)delegate;
- (void)locationRequestTemporaryFullAccuracyPermissions:(NSString * _Nonnull)customKey;
- (void)puck2D:(void (^ _Nullable)(Puck2DConfigurationBuilder * _Nonnull))build;
- (void)puckBearingSource:(enum TMBPuckBearingSource)source;
@end

@class TMBStyle;
@class UIImage;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)setStyle:(NSString * _Nonnull)styleUri;
- (void)setStyleInJson:(NSString * _Nonnull)styleJson;
- (void)loadStyle:(NSString * _Nonnull)styleUri completion:(void (^ _Nullable)(TMBStyle * _Nullable, NSError * _Nullable))completion;
- (void)addImageWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
@end

@class TMBGeometry;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addSource:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)removeSource:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (BOOL)sourceExists:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)setSourcePropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (NSDictionary<NSString *, id> * _Nonnull)getSourcePropertiesFor:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)addSourceWithId:(NSString * _Nonnull)id geometry:(TMBGeometry * _Nonnull)geometry onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addGeoJSONSourceWithId:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
- (void)updateGeoJSONSourceWithId:(NSString * _Nonnull)id geojson:(NSString * _Nonnull)geojson onComplete:(void (^ _Nullable)(NSError * _Nullable))onComplete;
@end

@class TMBAnchor;
@class UIColor;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
/// Color tint for lighting extruded geometries.
- (void)setLightProperty:(NSString * _Nonnull)name value:(id _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Color tint for lighting extruded geometries.
- (void)setLightWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Whether extruded geometries are lit relative to the map or viewport.
- (void)lightAnchor:(TMBAnchor * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Color tint for lighting extruded geometries.
- (void)lightColor:(UIColor * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>color</code>
- (void)lightColorTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
- (void)lightIntensity:(double)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>intensity</code>
- (void)lightIntensityTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0 degree (0 degree when <code>light.anchor</code> is set to <code>viewport</code> corresponds to the top of the viewport, or 0 degree when <code>light.anchor</code> is set to <code>map</code> corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0 degree, directly above, to 180 degree, directly below).
- (void)lightPosition:(NSArray<NSNumber *> * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Transition property for <code>position</code>
- (void)lightPositionTransition:(TMBStyleTransition * _Nonnull)value onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@protocol MBMCustomLayerHost;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
- (void)addLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)removeLayerWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (BOOL)isPersistentLayerWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)layerExistsWithId:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)setLayerPropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)updateLayerPropertiesFor:(NSString * _Nonnull)id properties:(NSDictionary<NSString *, id> * _Nonnull)properties onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (NSDictionary<NSString *, id> * _Nonnull)getLayerPropertiesFor:(NSString * _Nonnull)id onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_WARN_UNUSED_RESULT;
- (void)addPersistentLayerWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addLayerWithTarget:(NSObject * _Nonnull)target selector:(SEL _Nonnull)selector layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addLayerWithBuilder:(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(void))builder layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
- (void)addCustomLayer:(NSString * _Nonnull)id layerHost:(id <MBMCustomLayerHost> _Nonnull)layerHost layerPosition:(enum TMBLayerPosition)layerPosition layerPositionParam:(NSObject * _Nullable)layerPositionParam onError:(void (^ _Nullable)(NSError * _Nonnull))onError;
@end

@class TMBCancelable;

@interface MapView (SWIFT_EXTENSION(MapboxMapObjC))
/// The style has been fully loaded, and the map has rendered all visible tiles.
- (TMBCancelable * _Nonnull)onMapLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// Describes an error that has occurred while loading the Map. The <code>type</code> property defines what resource could
/// not be loaded and the <code>message</code> property will contain a descriptive error message.
/// In case of <code>source</code> or <code>tile</code> loading errors, <code>source-id</code> will contain the id of the source failing.
/// In case of <code>tile</code> loading errors, <code>tile-id</code> will contain the id of the tile.
- (TMBCancelable * _Nonnull)onMapLoadingError:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map has entered the idle state. The map is in the idle state when there are no ongoing transitions
/// and the map has rendered all requested non-volatile tiles. The event will not be emitted if <code>setUserAnimationInProgress</code>
/// and / or <code>setGestureInProgress</code> is set to <code>true</code>.
- (TMBCancelable * _Nonnull)onMapIdle:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style data has been loaded. The <code>type</code> property defines what kind of style data has been loaded.
/// Event may be emitted synchronously, for example, when <code>setStyleJSON</code> is used to load style.
/// Based on an event data <code>type</code> property value, following use-cases may be implemented:
/// <ul>
///   <li>
///     <code>style</code>: Style is parsed, style layer properties could be read and modified, style layers and sources could be
///     added or removed before rendering is started.
///   </li>
///   <li>
///     <code>sprite</code>: Style’s sprite sheet is parsed and it is possible to add or update images.
///   </li>
///   <li>
///     <code>sources</code>: All sources defined by the style are loaded and their properties could be read and updated if needed.
///   </li>
/// </ul>
- (TMBCancelable * _Nonnull)onStyleDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The requested style has been fully loaded, including the style, specified sprite and sources’ metadata.
/// Note: The style specified sprite would be marked as loaded even with sprite loading error (An error will be emitted via <code>.mapLoadingError</code>).
/// Sprite loading error is not fatal and we don’t want it to block the map rendering, thus this event will still be emitted if style and sources are fully loaded.
- (TMBCancelable * _Nonnull)onStyleLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// A style has a missing image. This event is emitted when the map renders visible tiles and
/// one of the required images is missing in the sprite sheet. Subscriber has to provide the missing image
/// by calling <code>Style/addImage(_:id:sdf:contentInsets:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageMissing:(void (^ _Nonnull)(id _Nonnull))handler;
/// An image added to the style is no longer needed and can be removed using <code>Style/removeImage(withId:)</code>.
- (TMBCancelable * _Nonnull)onStyleImageRemoveUnused:(void (^ _Nonnull)(id _Nonnull))handler;
/// A source data has been loaded.
/// Event may be emitted synchronously in cases when source’s metadata is available when source is added to the style.
/// The <code>id</code> property defines the source id.
/// The <code>type</code> property defines if source’s metadata (e.g., TileJSON) or tile has been loaded. The property of <code>metadata</code>
/// value might be useful to identify when particular source’s metadata is loaded, thus all source’s properties are
/// readable and can be updated before map will start requesting data to be rendered.
/// The <code>loaded</code> property will be set to <code>true</code> if all source’s data required for visible viewport of the map, are loaded.
/// The <code>tile-id</code> property defines the tile id if the <code>type</code> field equals <code>tile</code>.
- (TMBCancelable * _Nonnull)onSourceDataLoaded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been added with <code>Style/addSource(_:id:)</code> or <code>Style/addSource(withId:properties:)</code>.
/// The event is emitted synchronously, therefore, it is possible to immediately
/// read added source’s properties.
- (TMBCancelable * _Nonnull)onSourceAdded:(void (^ _Nonnull)(id _Nonnull))handler;
/// The source has been removed with <code>Style/removeSource(withId:)</code>.
/// The event is emitted synchronously, thus, <code>Style/allSourceIdentifiers</code> will be
/// in sync when the observer receives the notification.
- (TMBCancelable * _Nonnull)onSourceRemoved:(void (^ _Nonnull)(id _Nonnull))handler;
/// The map finished rendering a frame.
/// The <code>render-mode</code> property tells whether the map has all data (<code>full</code>) required to render the visible viewport.
/// The <code>needs-repaint</code> property provides information about ongoing transitions that trigger map repaint.
/// The <code>placement-changed</code> property tells if the symbol placement has been changed in the visible viewport.
- (TMBCancelable * _Nonnull)onRenderFrameStarted:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onRenderFrameFinished:(void (^ _Nonnull)(id _Nonnull))handler;
/// The camera has changed. This event is emitted whenever the visible viewport
/// changes due to the MapView’s size changing or when the camera
/// is modified by calling camera methods. The event is emitted synchronously,
/// so that an updated camera state can be fetched immediately.
- (TMBCancelable * _Nonnull)onEvenCameraChanged:(void (^ _Nonnull)(id _Nonnull))handler;
/// The <code>ResourceRequest</code> event allows client to observe resource requests made by a
/// map or snapshotter.
- (TMBCancelable * _Nonnull)onResourceRequest:(void (^ _Nonnull)(id _Nonnull))handler;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14MapViewFactory")
@interface MapViewFactory : NSObject
/// :nodoc:
/// See https://developer.apple.com/forums/thread/650054 for context
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (MapView * _Nonnull)createWithFrame:(CGRect)frame options:(MapInitOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC11NamedString_")
@protocol NamedString
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
@end

@class MBMStylePackLoadOptions;
@class MBMStylePack;

@interface MBMOfflineManager (SWIFT_EXTENSION(MapboxMapObjC))
- (TMBCancelable * _Nonnull)loadStyleWithStyleUriString:(NSString * _Nonnull)styleUriString styleLoadOptions:(MBMStylePackLoadOptions * _Nonnull)styleLoadOptions progress:(MBMStylePackLoadProgressCallback _Nonnull)progress completion:(void (^ _Nonnull)(MBMStylePack * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (void)allStylePacks:(void (^ _Nonnull)(NSArray<MBMStylePack *> * _Nullable, NSError * _Nullable))completion;
@end

@class Puck2DConfigurationPulsingBuilder;

SWIFT_CLASS("_TtC13MapboxMapObjC26Puck2DConfigurationBuilder")
@interface Puck2DConfigurationBuilder : NSObject
- (Puck2DConfigurationBuilder * _Nonnull)setPulsingBuilder:(Puck2DConfigurationPulsingBuilder * _Nullable)builder SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setPulsing:(SWIFT_NOESCAPE void (^ _Nonnull)(Puck2DConfigurationPulsingBuilder * _Nonnull))build SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setOpacity:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setTopImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setBearingImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setShadowImage:(UIImage * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setScale:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setShowsAccuracyRing:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setAccuracyRingColor:(UIColor * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationBuilder * _Nonnull)setAccuracyRingBorderColor:(UIColor * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC33Puck2DConfigurationPulsingBuilder")
@interface Puck2DConfigurationPulsingBuilder : NSObject
- (Puck2DConfigurationPulsingBuilder * _Nonnull)setColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
- (Puck2DConfigurationPulsingBuilder * _Nonnull)setRadiusWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMBEncoding;

SWIFT_CLASS("_TtC13MapboxMapObjC22RasterDemSourceBuilder")
@interface RasterDemSourceBuilder : NSObject
- (RasterDemSourceBuilder * _Nonnull)url:(NSString * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)tiles:(NSArray<NSString *> * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)bounds:(NSArray<NSNumber *> * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)minzoom:(double)value;
- (RasterDemSourceBuilder * _Nonnull)maxzoom:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileSize:(double)value;
- (RasterDemSourceBuilder * _Nonnull)attribution:(NSString * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)encoding:(TMBEncoding * _Nullable)value;
- (RasterDemSourceBuilder * _Nonnull)volatile:(BOOL)value;
- (RasterDemSourceBuilder * _Nonnull)prefetchZoomDelta:(double)value;
- (RasterDemSourceBuilder * _Nonnull)minimumTileUpdateInterval:(double)value;
- (RasterDemSourceBuilder * _Nonnull)maxOverscaleFactorForParentTiles:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileRequestsDelay:(double)value;
- (RasterDemSourceBuilder * _Nonnull)tileNetworkRequestsDelay:(double)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC13MapboxMapObjC15SkyLayerBuilder")
@interface SkyLayerBuilder : NSObject
+ (SkyLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)skyAtmosphereColor:(TMBValue * _Nullable)value;
- (void)skyAtmosphereHaloColor:(TMBValue * _Nullable)value;
- (void)skyAtmosphereSun:(TMBValue * _Nullable)value;
- (void)skyAtmosphereSunIntensity:(TMBValue * _Nullable)value;
- (void)skyGradient:(TMBValue * _Nullable)value;
- (void)skyGradientCenter:(TMBValue * _Nullable)value;
- (void)skyGradientRadius:(TMBValue * _Nullable)value;
- (void)skyOpacity:(TMBValue * _Nullable)value;
- (void)skyOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)skyType:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18SymbolLayerBuilder")
@interface SymbolLayerBuilder : NSObject
+ (SymbolLayerBuilder * _Nonnull)withId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)filter:(TMBExpression * _Nullable)value;
- (void)source:(NSString * _Nullable)value;
- (void)sourceLayer:(NSString * _Nullable)value;
- (void)minZoom:(NSNumber * _Nullable)value;
- (void)maxZoom:(NSNumber * _Nullable)value;
- (void)visibility:(TMBValue * _Nullable)value;
- (void)iconAllowOverlap:(TMBValue * _Nullable)value;
- (void)iconAnchor:(TMBValue * _Nullable)value;
- (void)iconIgnorePlacement:(TMBValue * _Nullable)value;
- (void)iconImage:(TMBValue * _Nullable)value;
- (void)iconKeepUpright:(TMBValue * _Nullable)value;
- (void)iconOffset:(TMBValue * _Nullable)value;
- (void)iconOptional:(TMBValue * _Nullable)value;
- (void)iconPadding:(TMBValue * _Nullable)value;
- (void)iconPitchAlignment:(TMBValue * _Nullable)value;
- (void)iconRotate:(TMBValue * _Nullable)value;
- (void)iconRotationAlignment:(TMBValue * _Nullable)value;
- (void)iconSize:(TMBValue * _Nullable)value;
- (void)iconTextFit:(TMBValue * _Nullable)value;
- (void)iconTextFitPadding:(TMBValue * _Nullable)value;
- (void)symbolAvoidEdges:(TMBValue * _Nullable)value;
- (void)symbolPlacement:(TMBValue * _Nullable)value;
- (void)symbolSortKey:(TMBValue * _Nullable)value;
- (void)symbolSpacing:(TMBValue * _Nullable)value;
- (void)symbolZOrder:(TMBValue * _Nullable)value;
- (void)textAllowOverlap:(TMBValue * _Nullable)value;
- (void)textAnchor:(TMBValue * _Nullable)value;
- (void)textField:(TMBValue * _Nullable)value;
- (void)textFont:(TMBValue * _Nullable)value;
- (void)textIgnorePlacement:(TMBValue * _Nullable)value;
- (void)textJustify:(TMBValue * _Nullable)value;
- (void)textKeepUpright:(TMBValue * _Nullable)value;
- (void)textLetterSpacing:(TMBValue * _Nullable)value;
- (void)textLineHeight:(TMBValue * _Nullable)value;
- (void)textMaxAngle:(TMBValue * _Nullable)value;
- (void)textMaxWidth:(TMBValue * _Nullable)value;
- (void)textOffset:(TMBValue * _Nullable)value;
- (void)textOptional:(TMBValue * _Nullable)value;
- (void)textPadding:(TMBValue * _Nullable)value;
- (void)textPitchAlignment:(TMBValue * _Nullable)value;
- (void)textRadialOffset:(TMBValue * _Nullable)value;
- (void)textRotate:(TMBValue * _Nullable)value;
- (void)textRotationAlignment:(TMBValue * _Nullable)value;
- (void)textSize:(TMBValue * _Nullable)value;
- (void)textTransform:(TMBValue * _Nullable)value;
- (void)textVariableAnchor:(TMBValue * _Nullable)value;
- (void)textWritingMode:(TMBValue * _Nullable)value;
- (void)iconColor:(TMBValue * _Nullable)value;
- (void)iconColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloBlur:(TMBValue * _Nullable)value;
- (void)iconHaloBlurTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloColor:(TMBValue * _Nullable)value;
- (void)iconHaloColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconHaloWidth:(TMBValue * _Nullable)value;
- (void)iconHaloWidthTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconOpacity:(TMBValue * _Nullable)value;
- (void)iconOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconTranslate:(TMBValue * _Nullable)value;
- (void)iconTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)iconTranslateAnchor:(TMBValue * _Nullable)value;
- (void)textColor:(TMBValue * _Nullable)value;
- (void)textColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloBlur:(TMBValue * _Nullable)value;
- (void)textHaloBlurTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloColor:(TMBValue * _Nullable)value;
- (void)textHaloColorTransition:(TMBStyleTransition * _Nullable)value;
- (void)textHaloWidth:(TMBValue * _Nullable)value;
- (void)textHaloWidthTransition:(TMBStyleTransition * _Nullable)value;
- (void)textOpacity:(TMBValue * _Nullable)value;
- (void)textOpacityTransition:(TMBStyleTransition * _Nullable)value;
- (void)textTranslate:(TMBValue * _Nullable)value;
- (void)textTranslateTransition:(TMBStyleTransition * _Nullable)value;
- (void)textTranslateAnchor:(TMBValue * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC9TMBAnchor")
@interface TMBAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The position of the light source is aligned to the rotation of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull map;)
+ (TMBAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The position of the light source is aligned to the rotation of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBAnchor * _Nonnull viewport;)
+ (TMBAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC13TMBAnnotation_")
@protocol TMBAnnotation
/// The unique identifier of the annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The geometry that is backing this annotation.
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
/// Properties associated with the annotation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@end

@protocol TMBAnnotationManager;

/// A delegate that is called when a tap is detected on an annotation (or on several of them).
SWIFT_PROTOCOL("_TtP13MapboxMapObjC32TMBAnnotationInteractionDelegate_")
@protocol TMBAnnotationInteractionDelegate
/// This method is invoked when a tap gesture is detected on an annotation
/// \param manager The <code>AnnotationManager</code> that detected this tap gesture
///
/// \param annotations A list of <code>Annotations</code> that were tapped
///
- (void)annotationManager:(id <TMBAnnotationManager> _Nonnull)manager didDetectTappedAnnotations:(NSArray<id <TMBAnnotation>> * _Nonnull)annotations;
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC20TMBAnnotationManager_")
@protocol TMBAnnotationManager
/// The id of this annotation manager.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the <code>GeoJSONSource</code> that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
/// The id of the layer that this manager is responsible for.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBCancelable")
@interface TMBCancelable : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCircleAnnotation")
@interface TMBCircleAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBCircleAnnotation * _Nonnull)fromCenter:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable circleSortKey;
/// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
@property (nonatomic, strong) NSNumber * _Nullable circleBlur;
/// The fill color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleColor;
/// The opacity at which the circle will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable circleOpacity;
/// Circle radius.
@property (nonatomic, strong) NSNumber * _Nullable circleRadius;
/// The stroke color of the circle.
@property (nonatomic, strong) UIColor * _Nullable circleStrokeColor;
/// The opacity of the circle’s stroke.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeOpacity;
/// The width of the circle’s stroke. Strokes are placed outside of the <code>circle-radius</code>.
@property (nonatomic, strong) NSNumber * _Nullable circleStrokeWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBCirclePitchAlignment;
@class TMBCirclePitchScale;
@class TMBCircleTranslateAnchor;

SWIFT_CLASS("_TtC13MapboxMapObjC26TMBCircleAnnotationManager")
@interface TMBCircleAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBCircleAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// Orientation of circle when map is pitched.
@property (nonatomic, strong) TMBCirclePitchAlignment * _Nullable circlePitchAlignment;
/// Controls the scaling behavior of the circle when the map is pitched.
@property (nonatomic, strong) TMBCirclePitchScale * _Nullable circlePitchScale;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable circleTranslate;
/// Controls the frame of reference for <code>circle-translate</code>.
@property (nonatomic, strong) TMBCircleTranslateAnchor * _Nullable circleTranslateAnchor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC23TMBCirclePitchAlignment")
@interface TMBCirclePitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The circle is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull map;)
+ (TMBCirclePitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchAlignment * _Nonnull viewport;)
+ (TMBCirclePitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBCirclePitchScale")
@interface TMBCirclePitchScale : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Circles are scaled according to their apparent distance to the camera.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull map;)
+ (TMBCirclePitchScale * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Circles are not scaled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCirclePitchScale * _Nonnull viewport;)
+ (TMBCirclePitchScale * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBCircleTranslateAnchor")
@interface TMBCircleTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The circle is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull map;)
+ (TMBCircleTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The circle is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBCircleTranslateAnchor * _Nonnull viewport;)
+ (TMBCircleTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC17TMBClusterOptions")
@interface TMBClusterOptions : NSObject
/// The circle radius of the cluster items, 18 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nonnull circleRadius;
/// The circle color, black by default.
@property (nonatomic, strong) TMBValue * _Nonnull circleColor;
/// The text color of cluster item, white by default
@property (nonatomic, strong) TMBValue * _Nonnull textColor;
/// The text size of cluster item, 12 by default. Units in pixels.
@property (nonatomic, strong) TMBValue * _Nonnull textSize;
/// Value to use for a text label of the cluster. <code>get("point_count")</code> by default which
/// will show the count of points in the cluster
@property (nonatomic, strong) TMBValue * _Nonnull textField;
/// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal
/// to the width of a tile, 50 by default. Value must be greater than or equal to 0.
@property (nonatomic) double clusterRadius;
/// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less
/// than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom
/// levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
@property (nonatomic) double clusterMaxZoom;
/// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from
/// clustered points. Has the form <code>{"property_name": [operator, map_expression]}</code>.
/// <code>operator</code> is any expression function that accepts at
/// least 2 operands (e.g. <code>"+"</code> or <code>"max"</code>) — it accumulates the property value from clusters/points the
/// cluster contains; <code>map_expression</code> produces the value of a single point. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp(.sum) {
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": ["+", ["get", "scalerank"]]}</code>
/// For more advanced use cases, in place of <code>operator</code>, you can use a custom reduce expression that references a special <code>["accumulated"]</code> value. Example:
/// <code>Expression</code> syntax:
/// \code
/// let expression = Exp {
///     Exp(.sum) {
///         Exp(.accumulated)
///         Exp(.get) { "sum" }
///     }
///     Exp(.get) { "scalerank" }
/// }
/// clusterProperties: ["sum": expression]
///
/// \endcodeJSON syntax:
/// <code>{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}</code>
@property (nonatomic, copy) NSDictionary<NSString *, TMBExpression *> * _Nullable clusterProperties;
/// Define a set of cluster options to determine how to cluster annotations.
/// Providing clusterOptions when initializing a <code>PointAnnotationManager</code>
/// will turn on clustering for that <code>PointAnnotationManager</code>.
- (nonnull instancetype)initWithCircleRadius:(TMBValue * _Nonnull)circleRadius circleColor:(TMBValue * _Nonnull)circleColor textColor:(TMBValue * _Nonnull)textColor textSize:(TMBValue * _Nonnull)textSize textField:(TMBValue * _Nonnull)textField clusterRadius:(double)clusterRadius clusterMaxZoom:(double)clusterMaxZoom clusterProperties:(NSDictionary<NSString *, TMBExpression *> * _Nullable)clusterProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBEncoding")
@interface TMBEncoding : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull terrarium;)
+ (TMBEncoding * _Nonnull)terrarium SWIFT_WARN_UNUSED_RESULT;
/// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBEncoding * _Nonnull mapbox;)
+ (TMBEncoding * _Nonnull)mapbox SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBOperator;

SWIFT_CLASS("_TtC13MapboxMapObjC13TMBExpression")
@interface TMBExpression : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBOperator * _Nonnull)operator_ SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithOperator:(TMBOperator * _Nonnull)operator_ arguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
+ (TMBExpression * _Nonnull)createWithArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC31TMBFillExtrusionTranslateAnchor")
@interface TMBFillExtrusionTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The fill extrusion is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull map;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill extrusion is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillExtrusionTranslateAnchor * _Nonnull viewport;)
+ (TMBFillExtrusionTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBFillTranslateAnchor")
@interface TMBFillTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The fill is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull map;)
+ (TMBFillTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The fill is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull viewport;)
+ (TMBFillTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MapboxMapObjC10TMBGeoData_")
@protocol TMBGeoData
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBGeometry")
@interface TMBGeometry : NSObject
+ (TMBGeometry * _Nonnull)fromData:(id <TMBGeoData> _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC30TMBHillshadeIlluminationAnchor")
@interface TMBHillshadeIlluminationAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The hillshade illumination is relative to the north direction.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull map;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The hillshade illumination is relative to the top of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBHillshadeIlluminationAnchor * _Nonnull viewport;)
+ (TMBHillshadeIlluminationAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBIconAnchor")
@interface TMBIconAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The center of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull center;)
+ (TMBIconAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull left;)
+ (TMBIconAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull right;)
+ (TMBIconAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull top;)
+ (TMBIconAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottom;)
+ (TMBIconAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topLeft;)
+ (TMBIconAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull topRight;)
+ (TMBIconAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomLeft;)
+ (TMBIconAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the icon is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconAnchor * _Nonnull bottomRight;)
+ (TMBIconAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBIconPitchAlignment")
@interface TMBIconPitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The icon is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull map;)
+ (TMBIconPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The icon is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconPitchAlignment * _Nonnull viewport;)
+ (TMBIconPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link ICON_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconPitchAlignment * _Nonnull auto_;)
+ (TMBIconPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBIconRotationAlignment")
@interface TMBIconRotationAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns icons east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns icon x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull map;)
+ (TMBIconRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconRotationAlignment * _Nonnull viewport;)
+ (TMBIconRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#ICON_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBIconRotationAlignment * _Nonnull auto_;)
+ (TMBIconRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14TMBIconTextFit")
@interface TMBIconTextFit : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The icon is displayed at its intrinsic aspect ratio.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull none;)
+ (TMBIconTextFit * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the x-dimension to fit the width of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull width;)
+ (TMBIconTextFit * _Nonnull)width SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in the y-dimension to fit the height of the text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull height;)
+ (TMBIconTextFit * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
/// The icon is scaled in both x- and y-dimensions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTextFit * _Nonnull both;)
+ (TMBIconTextFit * _Nonnull)both SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBIconTranslateAnchor")
@interface TMBIconTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Icons are translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull map;)
+ (TMBIconTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Icons are translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBIconTranslateAnchor * _Nonnull viewport;)
+ (TMBIconTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBLayerPosition, open) {
  TMBLayerPositionAt = 0,
  TMBLayerPositionBelow = 1,
  TMBLayerPositionAbove = 2,
  TMBLayerPositionUnowned = 3,
};


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBLineCap")
@interface TMBLineCap : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A cap with a squared-off end which is drawn to the exact endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull butt;)
+ (TMBLineCap * _Nonnull)butt SWIFT_WARN_UNUSED_RESULT;
/// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull round;)
+ (TMBLineCap * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineCap * _Nonnull square;)
+ (TMBLineCap * _Nonnull)square SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBLineJoin")
@interface TMBLineJoin : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line’s width.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull bevel;)
+ (TMBLineJoin * _Nonnull)bevel SWIFT_WARN_UNUSED_RESULT;
/// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line’s width and centered on the endpoint of the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull round;)
+ (TMBLineJoin * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBLineJoin * _Nonnull miter;)
+ (TMBLineJoin * _Nonnull)miter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBLineTranslateAnchor")
@interface TMBLineTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The line is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull map;)
+ (TMBFillTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The line is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBFillTranslateAnchor * _Nonnull viewport;)
+ (TMBFillTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC11TMBOperator")
@interface TMBOperator : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull subtract;)
+ (TMBOperator * _Nonnull)subtract SWIFT_WARN_UNUSED_RESULT;
/// Logical negation. Returns <code>true</code> if the input is <code>false</code>, and <code>false</code> if the input is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=not) TMBOperator * _Nonnull not_;)
+ (TMBOperator * _Nonnull)not SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are not equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull neq;)
+ (TMBOperator * _Nonnull)neq SWIFT_WARN_UNUSED_RESULT;
/// Returns the product of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull product;)
+ (TMBOperator * _Nonnull)product SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of floating point division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull division;)
+ (TMBOperator * _Nonnull)division SWIFT_WARN_UNUSED_RESULT;
/// Returns the remainder after integer division of the first input by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull mod;)
+ (TMBOperator * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
/// Returns the result of raising the first input to the power specified by the second.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pow;)
+ (TMBOperator * _Nonnull)pow SWIFT_WARN_UNUSED_RESULT;
/// Returns the sum of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sum;)
+ (TMBOperator * _Nonnull)sum SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly less than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lt;)
+ (TMBOperator * _Nonnull)lt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is less than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lte;)
+ (TMBOperator * _Nonnull)lte SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input values are equal, <code>false</code> otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull eq;)
+ (TMBOperator * _Nonnull)eq SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is strictly greater than the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull gt;)
+ (TMBOperator * _Nonnull)gt SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the first input is greater than or equal to the second, <code>false</code> otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional <code>collator</code> argument to control locale-dependent string comparisons.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull gte;)
+ (TMBOperator * _Nonnull)gte SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute value of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull abs;)
+ (TMBOperator * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
/// Returns the value of a cluster property accumulated so far. Can only be used in the <code>clusterProperties</code> option of a clustered GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull accumulated;)
+ (TMBOperator * _Nonnull)accumulated SWIFT_WARN_UNUSED_RESULT;
/// Returns the arccosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull acos;)
+ (TMBOperator * _Nonnull)acos SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if all the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>false</code>, the result is <code>false</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull all;)
+ (TMBOperator * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if any of the inputs are <code>true</code>, <code>false</code> otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to <code>true</code>, the result is <code>true</code> and no further input expressions are evaluated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull any;)
+ (TMBOperator * _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull array;)
+ (TMBOperator * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// Returns the arcsine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull asin;)
+ (TMBOperator * _Nonnull)asin SWIFT_WARN_UNUSED_RESULT;
/// Retrieves an item from an array.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull at;)
+ (TMBOperator * _Nonnull)at SWIFT_WARN_UNUSED_RESULT;
/// Returns the arctangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull atan;)
+ (TMBOperator * _Nonnull)atan SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull boolean;)
+ (TMBOperator * _Nonnull)boolean SWIFT_WARN_UNUSED_RESULT;
/// Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull switchCase;)
+ (TMBOperator * _Nonnull)switchCase SWIFT_WARN_UNUSED_RESULT;
/// Returns the smallest integer that is greater than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ceil;)
+ (TMBOperator * _Nonnull)ceil SWIFT_WARN_UNUSED_RESULT;
/// Evaluates each expression in turn until the first valid value is obtained. Invalid values are <code>null</code> and <a href="#types-image"><code>'image'</code></a> expressions that are unavailable in the style. If all values are invalid, <code>coalesce</code> returns the first value listed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull coalesce;)
+ (TMBOperator * _Nonnull)coalesce SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>collator</code> for use in locale-dependent comparison operations. The <code>case-sensitive</code> and <code>diacritic-sensitive</code> options default to <code>false</code>. The <code>locale</code> argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the <code>collator</code> will use a system-defined fallback locale. Use <code>resolved-locale</code> to test the results of locale fallback behavior.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull collator;)
+ (TMBOperator * _Nonnull)collator SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>string</code> consisting of the concatenation of the inputs. Each input is converted to a string as if by <code>to-string</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull concat;)
+ (TMBOperator * _Nonnull)concat SWIFT_WARN_UNUSED_RESULT;
/// Returns the cosine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull cos;)
+ (TMBOperator * _Nonnull)cos SWIFT_WARN_UNUSED_RESULT;
/// Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull distance;)
+ (TMBOperator * _Nonnull)distance SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a <code>symbol</code> instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. <code>["distance-from-center"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull distanceFromCenter;)
+ (TMBOperator * _Nonnull)distanceFromCenter SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull downcase;)
+ (TMBOperator * _Nonnull)downcase SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant e.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull e;)
+ (TMBOperator * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s state. Returns <code>null</code> if the requested property is not present on the feature’s state. A feature’s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their <code>id</code> attribute, which must be an integer or a string that can be cast to an integer. Note that [“feature-state”] can only be used with paint properties that support data-driven styling.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull featureState;)
+ (TMBOperator * _Nonnull)featureState SWIFT_WARN_UNUSED_RESULT;
/// Returns the largest integer that is less than or equal to the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull floor;)
+ (TMBOperator * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>formatted</code> string for displaying mixed-format text in the <code>text-field</code> property. The input may contain a string literal or expression, including an <a href="#types-image"><code>'image'</code></a> expression. Strings may be followed by a style override object that supports the following properties:
/// <ul>
///   <li>
///     <code>"text-font"</code>: Overrides the font stack specified by the root layout property.
///   </li>
///   <li>
///     <code>"text-color"</code>: Overrides the color specified by the root paint property.
///   </li>
///   <li>
///     <code>"font-scale"</code>: Applies a scaling factor on <code>text-size</code> as specified by the root layout property.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull format;)
+ (TMBOperator * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s geometry type: <code>Point</code>, <code>LineString</code> or <code>Polygon</code>. <code>Multi*</code> feature types return the singular forms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull geometryType;)
+ (TMBOperator * _Nonnull)geometryType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a property value from the current feature’s properties, or from another object if a second argument is provided. Returns <code>null</code> if the requested property is missing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull get;)
+ (TMBOperator * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
/// Tests for the presence of an property value in the current feature’s properties, or from another object if a second argument is provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull has;)
+ (TMBOperator * _Nonnull)has SWIFT_WARN_UNUSED_RESULT;
/// Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the <code>heatmap-color</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull heatmapDensity;)
+ (TMBOperator * _Nonnull)heatmapDensity SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature’s id, if it has one.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull id;)
+ (TMBOperator * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Returns a <a href="/mapbox-gl-js/style-spec/types/#resolvedimage"><code>ResolvedImage</code></a> for use in <a href="/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image"><code>icon-image</code></a>, <code>*-pattern</code> entries, and as a section in the <a href="#types-format"><code>'format'</code></a> expression. A <a href="#coalesce"><code>'coalesce'</code></a> expression containing <code>image</code> expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the <code>'image'</code> argument.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull image;)
+ (TMBOperator * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a <a href="#types-literal"><code>literal</code></a> expression to hint correct interpretation to the <a href="#type-system">type system</a>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull inExpression;)
+ (TMBOperator * _Nonnull)inExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the first position at which an item can be found in an array or a substring can be found in a string, or <code>-1</code> if the input cannot be found. Accepts an optional index from where to begin the search.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull indexOf;)
+ (TMBOperator * _Nonnull)indexOf SWIFT_WARN_UNUSED_RESULT;
/// Produces continuous, smooth results by interpolating between pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. The output type must be <code>number</code>, <code>array<number></code>, or <code>color</code>.
/// Interpolation types:
/// <ul>
///   <li>
///     <code>["linear"]</code>: Interpolates linearly between the pair of stops just less than and just greater than the input.
///   </li>
///   <li>
///     <code>["exponential", base]</code>: Interpolates exponentially between the stops just less than and just greater than the input. <code>base</code> controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.
///   </li>
///   <li>
///     <code>["cubic-bezier", x1, y1, x2, y2]</code>: Interpolates using the cubic bezier curve defined by the given control points.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull interpolate;)
+ (TMBOperator * _Nonnull)interpolate SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the input string is expected to render legibly. Returns <code>false</code> if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the <code>mapbox-gl-rtl-text</code> plugin is not in use in Mapbox GL JS).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull isSupportedScript;)
+ (TMBOperator * _Nonnull)isSupportedScript SWIFT_WARN_UNUSED_RESULT;
/// Returns the length of an array or string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull length;)
+ (TMBOperator * _Nonnull)length SWIFT_WARN_UNUSED_RESULT;
/// Binds expressions to named variables, which can then be referenced in the result expression using [“var”, “variable_name”].
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull letExpression;)
+ (TMBOperator * _Nonnull)letExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along a gradient line. Can only be used in the <code>line-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull lineProgress;)
+ (TMBOperator * _Nonnull)lineProgress SWIFT_WARN_UNUSED_RESULT;
/// Provides a literal array or object value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull literal;)
+ (TMBOperator * _Nonnull)literal SWIFT_WARN_UNUSED_RESULT;
/// Returns the natural logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ln;)
+ (TMBOperator * _Nonnull)ln SWIFT_WARN_UNUSED_RESULT;
/// Returns mathematical constant ln(2).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull ln2;)
+ (TMBOperator * _Nonnull)ln2 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-ten logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull log10;)
+ (TMBOperator * _Nonnull)log10 SWIFT_WARN_UNUSED_RESULT;
/// Returns the base-two logarithm of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull log2;)
+ (TMBOperator * _Nonnull)log2 SWIFT_WARN_UNUSED_RESULT;
/// Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, <code>["get", "building_type"]</code>). Each label must be unique, and must be either:
/// <ul>
///   <li>
///     a single literal value; or
///   </li>
///   <li>
///     an array of literal values, the values of which must be all strings or all numbers (for example <code>[100, 101]</code> or <code>["c", "b"]</code>).
///   </li>
/// </ul>
/// The input matches if any of the values in the array matches using strict equality, similar to the <code>"in"</code> operator.
/// If the input type does not match the type of the labels, the result will be the fallback value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull match;)
+ (TMBOperator * _Nonnull)match SWIFT_WARN_UNUSED_RESULT;
/// Returns the maximum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull max;)
+ (TMBOperator * _Nonnull)max SWIFT_WARN_UNUSED_RESULT;
/// Returns the minimum value of the inputs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull min;)
+ (TMBOperator * _Nonnull)min SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull number;)
+ (TMBOperator * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Converts the input number into a string representation using the providing formatting rules. If set, the <code>locale</code> argument specifies the locale to use, as a BCP 47 language tag. If set, the <code>currency</code> argument specifies an ISO 4217 code to use for currency-style formatting. If set, the <code>unit</code> argument specifies a <a href="https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier">simple ECMAScript unit</a> to use for unit-style formatting. If set, the <code>min-fraction-digits</code> and <code>max-fraction-digits</code> arguments specify the minimum and maximum number of fractional digits to include.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull numberFormat;)
+ (TMBOperator * _Nonnull)numberFormat SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull objectExpression;)
+ (TMBOperator * _Nonnull)objectExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the mathematical constant pi.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pi;)
+ (TMBOperator * _Nonnull)pi SWIFT_WARN_UNUSED_RESULT;
/// Returns the current pitch in degrees. <code>["pitch"]</code> may only be used in the <code>filter</code> expression for a <code>symbol</code> layer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull pitch;)
+ (TMBOperator * _Nonnull)pitch SWIFT_WARN_UNUSED_RESULT;
/// Returns the feature properties object.  Note that in some cases, it may be more efficient to use <code>["get", "property_name"]</code> directly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull properties;)
+ (TMBOperator * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns the IETF language tag of the locale being used by the provided <code>collator</code>. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull resolvedLocale;)
+ (TMBOperator * _Nonnull)resolvedLocale SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull rgb;)
+ (TMBOperator * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
/// Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull rgba;)
+ (TMBOperator * _Nonnull)rgba SWIFT_WARN_UNUSED_RESULT;
/// Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, <code>["round", -1.5]</code> evaluates to -2.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull round;)
+ (TMBOperator * _Nonnull)round SWIFT_WARN_UNUSED_RESULT;
/// Returns the sine of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sin;)
+ (TMBOperator * _Nonnull)sin SWIFT_WARN_UNUSED_RESULT;
/// Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches <code>sky-gradient-radius</code>. Can only be used in the <code>sky-gradient</code> property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull skyRadialProgress;)
+ (TMBOperator * _Nonnull)skyRadialProgress SWIFT_WARN_UNUSED_RESULT;
/// Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull slice;)
+ (TMBOperator * _Nonnull)slice SWIFT_WARN_UNUSED_RESULT;
/// Returns the square root of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull sqrt;)
+ (TMBOperator * _Nonnull)sqrt SWIFT_WARN_UNUSED_RESULT;
/// Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (“stops”). The <code>input</code> may be any numeric expression (e.g., <code>["get", "population"]</code>). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull step;)
+ (TMBOperator * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull string;)
+ (TMBOperator * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Returns the tangent of the input.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull tan;)
+ (TMBOperator * _Nonnull)tan SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a boolean. The result is <code>false</code> when then input is an empty string, 0, <code>false</code>, <code>null</code>, or <code>NaN</code>; otherwise it is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toBoolean;)
+ (TMBOperator * _Nonnull)toBoolean SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toColor;)
+ (TMBOperator * _Nonnull)toColor SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a number, if possible. If the input is <code>null</code> or <code>false</code>, the result is 0. If the input is <code>true</code>, the result is 1. If the input is a string, it is converted to a number as specified by the <a href="https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type">“ToNumber Applied to the String Type” algorithm</a> of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toNumber;)
+ (TMBOperator * _Nonnull)toNumber SWIFT_WARN_UNUSED_RESULT;
/// Returns a four-element array containing the input color’s red, green, blue, and alpha components, in that order.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toRgba;)
+ (TMBOperator * _Nonnull)toRgba SWIFT_WARN_UNUSED_RESULT;
/// Converts the input value to a string. If the input is <code>null</code>, the result is <code>""</code>. If the input is a <a href="#types-boolean"><code>boolean</code></a>, the result is <code>"true"</code> or <code>"false"</code>. If the input is a number, it is converted to a string as specified by the <a href="https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type">“NumberToString” algorithm</a> of the ECMAScript Language Specification. If the input is a <a href="#color"><code>color</code></a>, it is converted to a string of the form <code>"rgba(r,g,b,a)"</code>, where <code>r</code>, <code>g</code>, and <code>b</code> are numerals ranging from 0 to 255, and <code>a</code> ranges from 0 to 1. If the input is an <a href="#types-image"><code>'image'</code></a> expression, <code>'to-string'</code> returns the image name. Otherwise, the input is converted to a string in the format specified by the <a href="https://tc39.github.io/ecma262/#sec-json.stringify"><code>JSON.stringify</code></a> function of the ECMAScript Language Specification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull toString;)
+ (TMBOperator * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// Returns a string describing the type of the given value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull typeofExpression;)
+ (TMBOperator * _Nonnull)typeofExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull upcase;)
+ (TMBOperator * _Nonnull)upcase SWIFT_WARN_UNUSED_RESULT;
/// References variable bound using “let”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull varExpression;)
+ (TMBOperator * _Nonnull)varExpression SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the evaluated feature is fully contained inside a boundary of the input geometry, <code>false</code> otherwise. The input value can be a valid GeoJSON of type <code>Polygon</code>, <code>MultiPolygon</code>, <code>Feature</code>, or <code>FeatureCollection</code>. Supported features for evaluation:
/// <ul>
///   <li>
///     <code>Point</code>: Returns <code>false</code> if a point is on the boundary or falls outside the boundary.
///   </li>
///   <li>
///     <code>LineString</code>: Returns <code>false</code> if any part of a line falls outside the boundary, the line intersects the boundary, or a line’s endpoint is on the boundary.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull within;)
+ (TMBOperator * _Nonnull)within SWIFT_WARN_UNUSED_RESULT;
/// Returns the current zoom level.  Note that in style layout and paint properties, [“zoom”] may only appear as the input to a top-level “step” or “interpolate” expression.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull zoom;)
+ (TMBOperator * _Nonnull)zoom SWIFT_WARN_UNUSED_RESULT;
/// Interpolates linearly between the pair of stops just less than and just greater than the input
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull linear;)
+ (TMBOperator * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// <code>["exponential", base]</code>
/// Interpolates exponentially between the stops just less than and just
/// greater than the input. base controls the rate at which the output increases: higher values make the output
/// increase more towards the high end of the range.
/// With values close to 1 the output increases linearly.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull exponential;)
+ (TMBOperator * _Nonnull)exponential SWIFT_WARN_UNUSED_RESULT;
/// <code>["cubic-bezier", x1, y1, x2, y2]</code>
/// Interpolates using the cubic bezier curve defined by the given control points.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBOperator * _Nonnull cubicBezier;)
+ (TMBOperator * _Nonnull)cubicBezier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBOrnamentVisibility, open) {
  TMBOrnamentVisibilityAdaptive = 0,
  TMBOrnamentVisibilityHidden = 1,
  TMBOrnamentVisibilityVisible = 2,
};


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBPoint")
@interface TMBPoint : NSObject <TMBGeoData>
+ (TMBPoint * _Nonnull)withCoordinates:(CLLocationCoordinate2D)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBTextAnchor;
@class TMBTextJustify;
@class TMBTextTransform;

SWIFT_CLASS("_TtC13MapboxMapObjC18TMBPointAnnotation")
@interface TMBPointAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
- (void)image:(UIImage * _Nonnull)image name:(NSString * _Nonnull)name;
+ (TMBPointAnnotation * _Nonnull)fromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Part of the icon placed closest to the anchor.
@property (nonatomic, strong) TMBIconAnchor * _Nullable iconAnchor;
/// Name of image in sprite to use for drawing an image background.
@property (nonatomic, copy) NSString * _Nullable iconImage;
/// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of <code>icon-size</code> to obtain the final offset in pixels. When combined with <code>icon-rotate</code> the offset will be as if the rotated direction was up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconOffset;
/// Rotates the icon clockwise.
@property (nonatomic, strong) NSNumber * _Nullable iconRotate;
/// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by <code>icon-size</code>. 1 is the original size; 3 triples the size of the image.
@property (nonatomic, strong) NSNumber * _Nullable iconSize;
/// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is <code>false</code>, features with a lower sort key will have priority during placement. When <code>icon-allow-overlap</code> or <code>text-allow-overlap</code> is set to <code>true</code>, features with a higher sort key will overlap over features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable symbolSortKey;
/// Part of the text placed closest to the anchor.
@property (nonatomic, strong) TMBTextAnchor * _Nullable textAnchor;
/// Value to use for a text label. If a plain <code>string</code> is provided, it will be treated as a <code>formatted</code> with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
@property (nonatomic, copy) NSString * _Nullable textField;
/// Text justification options.
@property (nonatomic, strong) TMBTextJustify * _Nullable textJustify;
/// Text tracking amount.
@property (nonatomic, strong) NSNumber * _Nullable textLetterSpacing;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight;
/// The maximum line width for text wrapping.
@property (nonatomic, strong) NSNumber * _Nullable textMaxWidth;
/// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textOffset;
/// Radial offset of text, in the direction of the symbol’s anchor. Useful in combination with <code>text-variable-anchor</code>, which defaults to using the two-dimensional <code>text-offset</code> if present.
@property (nonatomic, strong) NSNumber * _Nullable textRadialOffset;
/// Rotates the text clockwise.
@property (nonatomic, strong) NSNumber * _Nullable textRotate;
/// Font size.
@property (nonatomic, strong) NSNumber * _Nullable textSize;
/// Specifies how to capitalize text, similar to the CSS <code>text-transform</code> property.
@property (nonatomic, strong) TMBTextTransform * _Nullable textTransform;
/// The color of the icon. This can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// Fade out the halo towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloBlur;
/// The color of the icon’s halo. Icon halos can only be used with <a href="/help/troubleshooting/using-recolorable-images-in-mapbox-maps/">SDF icons</a>.
@property (nonatomic, strong) UIColor * _Nullable iconHaloColor;
/// Distance of halo to the icon outline.
@property (nonatomic, strong) NSNumber * _Nullable iconHaloWidth;
/// The opacity at which the icon will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable iconOpacity;
/// The color with which the text will be drawn.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The halo’s fadeout distance towards the outside.
@property (nonatomic, strong) NSNumber * _Nullable textHaloBlur;
/// The color of the text’s halo, which helps it stand out from backgrounds.
@property (nonatomic, strong) UIColor * _Nullable textHaloColor;
/// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
@property (nonatomic, strong) NSNumber * _Nullable textHaloWidth;
/// The opacity at which the text will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable textOpacity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMBSymbolPlacement;
@class TMBSymbolZOrder;
@class TMBTextPitchAlignment;
@class TMBTextRotationAlignment;
@class TMBTextWritingMode;
@class TMBTextTranslateAnchor;

SWIFT_CLASS("_TtC13MapboxMapObjC25TMBPointAnnotationManager")
@interface TMBPointAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPointAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// If true, the icon will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable iconAllowOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic, strong) NSNumber * _Nullable iconIgnorePlacement;
/// If true, the icon may be flipped to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable iconKeepUpright;
/// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
@property (nonatomic, strong) NSNumber * _Nullable iconOptional;
/// Size of the additional area around the icon bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable iconPadding;
/// Orientation of icon when map is pitched.
@property (nonatomic, strong) TMBIconPitchAlignment * _Nullable iconPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of icons.
@property (nonatomic, strong) TMBIconRotationAlignment * _Nullable iconRotationAlignment;
/// Scales the icon to fit around the associated text.
@property (nonatomic, strong) TMBIconTextFit * _Nullable iconTextFit;
/// Size of the additional area added to dimensions determined by <code>icon-text-fit</code>, in clockwise order: top, right, bottom, left.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTextFitPadding;
/// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don’t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
@property (nonatomic, strong) NSNumber * _Nullable symbolAvoidEdges;
/// Label placement relative to its geometry.
@property (nonatomic, strong) TMBSymbolPlacement * _Nullable symbolPlacement;
/// Distance between two symbol anchors.
@property (nonatomic, strong) NSNumber * _Nullable symbolSpacing;
/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use <code>symbol-sort-key</code>.
@property (nonatomic, strong) TMBSymbolZOrder * _Nullable symbolZOrder;
/// If true, the text will be visible even if it collides with other previously drawn symbols.
@property (nonatomic, strong) NSNumber * _Nullable textAllowOverlap;
/// Font stack to use for displaying text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable textFont;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic, strong) NSNumber * _Nullable textIgnorePlacement;
/// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
@property (nonatomic, strong) NSNumber * _Nullable textKeepUpright;
/// Maximum angle change between adjacent characters.
@property (nonatomic, strong) NSNumber * _Nullable textMaxAngle;
/// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
@property (nonatomic, strong) NSNumber * _Nullable textOptional;
/// Size of the additional area around the text bounding box used for detecting symbol collisions.
@property (nonatomic, strong) NSNumber * _Nullable textPadding;
/// Orientation of text when map is pitched.
@property (nonatomic, strong) TMBTextPitchAlignment * _Nullable textPitchAlignment;
/// In combination with <code>symbol-placement</code>, determines the rotation behavior of the individual glyphs forming the text.
@property (nonatomic, strong) TMBTextRotationAlignment * _Nullable textRotationAlignment;
/// To increase the chance of placing high-priority labels on the map, you can provide an array of <code>text-anchor</code> locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use <code>text-justify: auto</code> to choose justification based on anchor position. To apply an offset, use the <code>text-radial-offset</code> or the two-dimensional <code>text-offset</code>.
@property (nonatomic, copy) NSArray<TMBTextAnchor *> * _Nullable textVariableAnchor;
/// The property allows control over a symbol’s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single ‘vertical’ enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [‘horizontal’, ‘vertical’] or [‘vertical’, ‘horizontal’], the order doesn’t affect the placement.
@property (nonatomic, copy) NSArray<TMBTextWritingMode *> * _Nullable textWritingMode;
/// Distance that the icon’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable iconTranslate;
/// Controls the frame of reference for <code>icon-translate</code>.
@property (nonatomic, strong) TMBIconTranslateAnchor * _Nullable iconTranslateAnchor;
/// Distance that the text’s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable textTranslate;
/// Controls the frame of reference for <code>text-translate</code>.
@property (nonatomic, strong) TMBTextTranslateAnchor * _Nullable textTranslateAnchor;
/// Text leading value for multi-line text.
@property (nonatomic, strong) NSNumber * _Nullable textLineHeight SWIFT_DEPRECATED_MSG("text-line-height property is now data driven, use `PointAnnotation.textLineHeight` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBPolygon")
@interface TMBPolygon : NSObject
- (nonnull instancetype)initWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
+ (TMBPolygon * _Nonnull)createWithOuterRingCoordinates:(NSArray<NSValue *> * _Nonnull)outerRingCoordinates innerRingCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)innerRingCoordinates SWIFT_WARN_UNUSED_RESULT;
+ (TMBPolygon * _Nonnull)fromCoordinates:(NSArray<NSArray<NSValue *> *> * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBPolygonAnnotation")
@interface TMBPolygonAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
+ (TMBPolygonAnnotation * _Nonnull)polygon:(TMBPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable fillSortKey;
/// The color of the filled part of this layer. This color can be specified as <code>rgba</code> with an alpha component and the color’s opacity will not affect the opacity of the 1px stroke, if it is used.
@property (nonatomic, strong) UIColor * _Nullable fillColor;
/// The opacity of the entire fill layer. In contrast to the <code>fill-color</code>, this value will also affect the 1px stroke around the fill, if the stroke is used.
@property (nonatomic, strong) NSNumber * _Nullable fillOpacity;
/// The outline color of the fill. Matches the value of <code>fill-color</code> if unspecified.
@property (nonatomic, strong) UIColor * _Nullable fillOutlineColor;
/// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable fillPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC27TMBPolygonAnnotationManager")
@interface TMBPolygonAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolygonAnnotation *> * _Nonnull annotations;
/// Whether or not the fill should be antialiased.
@property (nonatomic, strong) NSNumber * _Nullable fillAntialias;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable fillTranslate;
/// Controls the frame of reference for <code>fill-translate</code>.
@property (nonatomic, strong) TMBFillTranslateAnchor * _Nullable fillTranslateAnchor;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBPolylineAnnotation")
@interface TMBPolylineAnnotation : NSObject <TMBAnnotation>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull geometryInJSON;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDraggable;
+ (TMBPolylineAnnotation * _Nonnull)fromId:(NSString * _Nonnull)id coordinates:(NSArray<NSValue *> * _Nonnull)coordinates isSelected:(BOOL)isSelected isDraggable:(BOOL)isDraggable SWIFT_WARN_UNUSED_RESULT;
/// The display of lines when joining.
@property (nonatomic, strong) TMBLineJoin * _Nullable lineJoin;
/// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
@property (nonatomic, strong) NSNumber * _Nullable lineSortKey;
/// Blur applied to the line, in pixels.
@property (nonatomic, strong) NSNumber * _Nullable lineBlur;
/// The color with which the line will be drawn.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic, strong) NSNumber * _Nullable lineGapWidth;
/// The line’s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
@property (nonatomic, strong) NSNumber * _Nullable lineOffset;
/// The opacity at which the line will be drawn.
@property (nonatomic, strong) NSNumber * _Nullable lineOpacity;
/// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, …, 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSString * _Nullable linePattern;
/// Stroke thickness.
@property (nonatomic, strong) NSNumber * _Nullable lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC28TMBPolylineAnnotationManager")
@interface TMBPolylineAnnotationManager : NSObject <TMBAnnotationManager>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull layerId;
@property (nonatomic, copy) NSArray<TMBPolylineAnnotation *> * _Nonnull annotations;
/// Set this delegate in order to be called back if a tap occurs on an annotation being managed by this manager.
/// note:
/// This annotation manager listens to tap events via the <code>GestureManager.singleTapGestureRecognizer</code>.
@property (nonatomic, weak) id <TMBAnnotationInteractionDelegate> _Nullable delegate;
/// The display of line endings.
@property (nonatomic, strong) TMBLineCap * _Nullable lineCap;
/// Used to automatically convert miter joins to bevel joins for sharp angles.
@property (nonatomic, strong) NSNumber * _Nullable lineMiterLimit;
/// Used to automatically convert round joins to miter joins for shallow angles.
@property (nonatomic, strong) NSNumber * _Nullable lineRoundLimit;
/// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with <code>lineMetrics: true</code> specified won’t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDasharray;
/// The geometry’s offset. Values are [x, y] where negatives indicate left and up, respectively.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTranslate;
/// Controls the frame of reference for <code>line-translate</code>.
@property (nonatomic, strong) TMBLineTranslateAnchor * _Nullable lineTranslateAnchor;
/// The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineTrimOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TMBPuckBearingSource, open) {
  TMBPuckBearingSourceHeading = 0,
  TMBPuckBearingSourceCourse = 1,
};


SWIFT_CLASS("_TtC13MapboxMapObjC19TMBRasterResampling")
@interface TMBRasterResampling : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull linear;)
+ (TMBRasterResampling * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
/// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBRasterResampling * _Nonnull nearest;)
+ (TMBRasterResampling * _Nonnull)nearest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBResolvedImage")
@interface TMBResolvedImage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TMBResolvedImage (SWIFT_EXTENSION(MapboxMapObjC))
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (TMBResolvedImage * _Nonnull)fromName:(NSString * _Nonnull)name available:(BOOL)available SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13MapboxMapObjC20TMBResolvedImageData")
@interface TMBResolvedImageData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC9TMBScheme")
@interface TMBScheme : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Slippy map tilenames scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull xyz;)
+ (TMBScheme * _Nonnull)xyz SWIFT_WARN_UNUSED_RESULT;
/// OSGeo spec scheme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBScheme * _Nonnull tms;)
+ (TMBScheme * _Nonnull)tms SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBSkyType")
@interface TMBSkyType : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Renders the sky with a gradient that can be configured with {@link SKY_GRADIENT_RADIUS} and {@link SKY_GRADIENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull gradient;)
+ (TMBSkyType * _Nonnull)gradient SWIFT_WARN_UNUSED_RESULT;
/// Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through {@link SKY_ATMOSPHERE_SUN}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSkyType * _Nonnull atmosphere;)
+ (TMBSkyType * _Nonnull)atmosphere SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC13TMBSourceType")
@interface TMBSourceType : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// A vector tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull vector;)
+ (TMBSourceType * _Nonnull)vector SWIFT_WARN_UNUSED_RESULT;
/// A raster tile source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull raster;)
+ (TMBSourceType * _Nonnull)raster SWIFT_WARN_UNUSED_RESULT;
/// A raster DEM source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull rasterDem;)
+ (TMBSourceType * _Nonnull)rasterDem SWIFT_WARN_UNUSED_RESULT;
/// A GeoJSON source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull geoJson;)
+ (TMBSourceType * _Nonnull)geoJson SWIFT_WARN_UNUSED_RESULT;
/// An image source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull image;)
+ (TMBSourceType * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// A model source
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSourceType * _Nonnull model;)
+ (TMBSourceType * _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBStyle")
@interface TMBStyle : NSObject
- (void)addImageWithId:(NSString * _Nonnull)id image:(UIImage * _Nonnull)image sdf:(BOOL)sdf contentInsets:(UIEdgeInsets)contentInsets completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)removeImageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)imageExistsWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBStyleProjectionName")
@interface TMBStyleProjectionName : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The Mercator projection is the default projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull mercator;)
+ (TMBStyleProjectionName * _Nonnull)mercator SWIFT_WARN_UNUSED_RESULT;
/// A globe projection.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBStyleProjectionName * _Nonnull globe;)
+ (TMBStyleProjectionName * _Nonnull)globe SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBStyleTransition")
@interface TMBStyleTransition : NSObject
- (nonnull instancetype)initWithDuration:(double)duration delay:(double)delay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC18TMBSymbolPlacement")
@interface TMBSymbolPlacement : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The label is placed at the point where the geometry is located.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull point;)
+ (TMBSymbolPlacement * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
/// The label is placed along the line of the geometry. Can only be used on LineString and Polygon geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull line;)
+ (TMBSymbolPlacement * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// The label is placed at the center of the line of the geometry. Can only be used on LineString and Polygon geometries. Note that a single feature in a vector tile may contain multiple line geometries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolPlacement * _Nonnull lineCenter;)
+ (TMBSymbolPlacement * _Nonnull)lineCenter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC15TMBSymbolZOrder")
@interface TMBSymbolZOrder : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by symbol sort key if set. Otherwise, sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBSymbolZOrder * _Nonnull auto_;)
+ (TMBSymbolZOrder * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by their y-position relative to the viewport if {@link ICON_ALLOW_OVERLAP} or {@link TEXT_ALLOW_OVERLAP} is set to {@link TRUE} or {@link ICON_IGNORE_PLACEMENT} or {@link TEXT_IGNORE_PLACEMENT} is {@link FALSE}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull viewportY;)
+ (TMBSymbolZOrder * _Nonnull)viewportY SWIFT_WARN_UNUSED_RESULT;
/// Sorts symbols by symbol sort key if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBSymbolZOrder * _Nonnull source;)
+ (TMBSymbolZOrder * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC10TMBTerrain")
@interface TMBTerrain : NSObject
- (nonnull instancetype)initWithSourceId:(NSString * _Nonnull)sourceId OBJC_DESIGNATED_INITIALIZER;
/// Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.
@property (nonatomic, strong) TMBValue * _Nullable exaggeration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13MapboxMapObjC13TMBTextAnchor")
@interface TMBTextAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The center of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull center;)
+ (TMBTextAnchor * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The left side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull left;)
+ (TMBTextAnchor * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The right side of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull right;)
+ (TMBTextAnchor * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
/// The top of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull top;)
+ (TMBTextAnchor * _Nonnull)top SWIFT_WARN_UNUSED_RESULT;
/// The bottom of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottom;)
+ (TMBTextAnchor * _Nonnull)bottom SWIFT_WARN_UNUSED_RESULT;
/// The top left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topLeft;)
+ (TMBTextAnchor * _Nonnull)topLeft SWIFT_WARN_UNUSED_RESULT;
/// The top right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull topRight;)
+ (TMBTextAnchor * _Nonnull)topRight SWIFT_WARN_UNUSED_RESULT;
/// The bottom left corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomLeft;)
+ (TMBTextAnchor * _Nonnull)bottomLeft SWIFT_WARN_UNUSED_RESULT;
/// The bottom right corner of the text is placed closest to the anchor.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextAnchor * _Nonnull bottomRight;)
+ (TMBTextAnchor * _Nonnull)bottomRight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC14TMBTextJustify")
@interface TMBTextJustify : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned towards the anchor position.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextJustify * _Nonnull auto_;)
+ (TMBTextJustify * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the left.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull left;)
+ (TMBTextJustify * _Nonnull)left SWIFT_WARN_UNUSED_RESULT;
/// The text is centered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull center;)
+ (TMBTextJustify * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the right.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextJustify * _Nonnull right;)
+ (TMBTextJustify * _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC21TMBTextPitchAlignment")
@interface TMBTextPitchAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the plane of the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull map;)
+ (TMBTextPitchAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is aligned to the plane of the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextPitchAlignment * _Nonnull viewport;)
+ (TMBTextPitchAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// Automatically matches the value of {@link TEXT_ROTATION_ALIGNMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextPitchAlignment * _Nonnull auto_;)
+ (TMBTextPitchAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC24TMBTextRotationAlignment")
@interface TMBTextRotationAlignment : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, aligns text east-west. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, aligns text x-axes with the line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull map;)
+ (TMBTextRotationAlignment * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of {@link SYMBOL_PLACEMENT}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextRotationAlignment * _Nonnull viewport;)
+ (TMBTextRotationAlignment * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
/// When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_POINT}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_VIEWPORT}. When {@link SYMBOL_PLACEMENT} is set to {@link Property#SYMBOL_PLACEMENT_LINE} or {@link Property#SYMBOL_PLACEMENT_LINE_CENTER}, this is equivalent to {@link Property#TEXT_ROTATION_ALIGNMENT_MAP}.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=auto) TMBTextRotationAlignment * _Nonnull auto_;)
+ (TMBTextRotationAlignment * _Nonnull)auto SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC16TMBTextTransform")
@interface TMBTextTransform : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is not altered.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull none;)
+ (TMBTextTransform * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in uppercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull uppercase;)
+ (TMBTextTransform * _Nonnull)uppercase SWIFT_WARN_UNUSED_RESULT;
/// Forces all letters to be displayed in lowercase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTransform * _Nonnull lowercase;)
+ (TMBTextTransform * _Nonnull)lowercase SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC22TMBTextTranslateAnchor")
@interface TMBTextTranslateAnchor : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The text is translated relative to the map.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull map;)
+ (TMBTextTranslateAnchor * _Nonnull)map SWIFT_WARN_UNUSED_RESULT;
/// The text is translated relative to the viewport.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextTranslateAnchor * _Nonnull viewport;)
+ (TMBTextTranslateAnchor * _Nonnull)viewport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC18TMBTextWritingMode")
@interface TMBTextWritingMode : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// If a text’s language supports horizontal writing mode, symbols would be laid out horizontally.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull horizontal;)
+ (TMBTextWritingMode * _Nonnull)horizontal SWIFT_WARN_UNUSED_RESULT;
/// If a text’s language supports vertical writing mode, symbols would be laid out vertically.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBTextWritingMode * _Nonnull vertical;)
+ (TMBTextWritingMode * _Nonnull)vertical SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MapboxMapObjC8TMBValue")
@interface TMBValue : NSObject
- (nonnull instancetype)initWithConstant:(NSObject * _Nonnull)constant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpression:(TMBExpression * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
+ (TMBValue * _Nonnull)constant:(NSObject * _Nonnull)constant SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)intValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)doubleValue:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (TMBValue * _Nonnull)expression:(TMBExpression * _Nonnull)expression SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13MapboxMapObjC13TMBVisibility")
@interface TMBVisibility : NSObject <NamedString>
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// The layer is shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBVisibility * _Nonnull visible;)
+ (TMBVisibility * _Nonnull)visible SWIFT_WARN_UNUSED_RESULT;
/// The layer is not shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMBVisibility * _Nonnull none;)
+ (TMBVisibility * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MBXTileRegionLoadOptions;
@class MBXTileRegion;

@interface MBXTileStore (SWIFT_EXTENSION(MapboxMapObjC))
+ (MBXTileStore * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
- (TMBCancelable * _Nonnull)loadTileRegionForId:(NSString * _Nonnull)id loadOptions:(MBXTileRegionLoadOptions * _Nonnull)loadOptions progress:(MBXTileRegionLoadProgressCallback _Nullable)progress completion:(void (^ _Nonnull)(MBXTileRegion * _Nullable, NSError * _Nullable))completion;
- (void)allTileRegions:(void (^ _Nonnull)(NSArray<MBXTileRegion *> * _Nullable, NSError * _Nullable))completion;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
